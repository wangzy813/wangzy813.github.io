<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试题总结二</title>
      <link href="/2021/11/04/notes-2/"/>
      <url>/2021/11/04/notes-2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、闭包"><a href="#一、闭包" class="headerlink" title="一、闭包"></a>一、闭包</h1><blockquote><p>闭包（closure）是 JavasSript 的一大难点，也是它的特色。很多高级应用都要依靠闭包来实现。 </p></blockquote><p>什么是闭包？个人理解就是由于函数的嵌套，并且对外提供访问接口就会产生闭包。</p><h2 id="闭包形成的条件"><a href="#闭包形成的条件" class="headerlink" title="闭包形成的条件"></a>闭包形成的条件</h2><ul><li>函数嵌套</li><li>内部函数引用外部函数的局部变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t = fn();</span><br><span class="line"><span class="built_in">console</span>.log(t());<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，正常情况下，函数fn执行完之后，应该<strong>JS的垃圾回收机制</strong>被标记“等待清除”，等待下一次垃圾回收机制执行的时候被清除，但是由于返回函数中引用了fn中的变量b，所以函数fn并不会被清除，而是一直保存着内存中，直到没有任何引用，才会被清除。</p><p>从上面的 我们可以得出，闭包有什么作用呢？</p><ul><li>闭包可以使得程序在函数外部可以访问到函数内部的变量</li><li>闭包可以在内存中维持一个变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    array[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = fn();</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]());<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]());<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>正常情况下，我们期待的结果就是返回0和1,但是结果出人意料。为什么呢？</p><p>其实我们可以先看下arr[0]执行时，它的scope chain：</p><p><img src="https://pic2.zhimg.com/80/v2-d97efc66d7e8f9617af385761baf8991_720w.jpg" alt="img"></p><p>我们可以清楚的看到，此时arr[0]中并没有i的定义，它会沿着作用域链向上找i，那么就会找到fn中的i，但是此时，i已经变成10了。</p><p>从此我们也可以得出一个结论：</p><blockquote><p>JS的函数中的变量的值不是在编译的时候确定的，而是在运行时再去寻找的。</p></blockquote><p>如果我们想让上面的 按照我们预期的执行，那么考虑使用立即执行函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    array[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;<span class="comment">//函数参数的传递是按值传递，会创建i的副本，而不是直接使用变量i</span></span><br><span class="line">      <span class="keyword">return</span> num</span><br><span class="line">    &#125;)(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = fn();</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h2><ul><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li><li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li></ul><h1 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h1><p>什么是工厂模式？</p><p>工厂模式大体分为三类：简单工厂模式、工厂方法模式、抽象工厂模式。下面就分别对这三类工厂模式</p><p>1.简单工厂模式</p><p>简单工厂模式是由一个工厂对象来创建某一类产品的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  obj.name = name;</span><br><span class="line">  obj.age = age;</span><br><span class="line">  obj.job = job;</span><br><span class="line">  obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = createPerson(<span class="string">&#x27;Nicholas&#x27;</span>, <span class="string">&#x27;29&#x27;</span>, <span class="string">&#x27;Software Engineer&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = createPerson(<span class="string">&#x27;Greg&#x27;</span>, <span class="string">&#x27;27&#x27;</span>, <span class="string">&#x27;Doctor&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2、工厂方法模式</p><p>工厂方法模式与简单工厂模式有些差异，可以理解为升级版的简单工厂模式。</p><p>工厂方法模式是对产品类的抽象，使其创建多类产品的实例。</p><p>上面简单工厂模式是创建同一类的某个产品，而这里的工厂方法模式是创建多类产品的实例，区别就出来了，它其实是将多个产品类进行抽象化，可以通过这个工厂对这些类创建相应类的实例。</p><p>比如现在，我不想买编程类的书了，我要买科学类或者社会学类的书，那么工厂方法模式的作用就体现出来了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BookShop = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果外部直接调用了BookShop而不是new关键字调用，则返回new BookShop调用，否则直接调用</span></span><br><span class="line">  <span class="comment">// 这个产品类创建实例返给外部</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> BookShop) &#123;</span><br><span class="line">    <span class="keyword">var</span> book = <span class="keyword">new</span> <span class="built_in">this</span>[name]()</span><br><span class="line">    <span class="keyword">return</span> book</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BookShop(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">BookShop.prototype = &#123;</span><br><span class="line">  <span class="attr">Programme</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.books = [<span class="string">&#x27;css世界&#x27;</span>, <span class="string">&#x27;JS高级编程&#x27;</span>, <span class="string">&#x27;ES6入门教程&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Science</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.books = [<span class="string">&#x27;人与自然&#x27;</span>, <span class="string">&#x27;大自然的奥秘&#x27;</span>, <span class="string">&#x27;走进科学&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Society</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.books = [<span class="string">&#x27;精神小伙修炼手册&#x27;</span>, <span class="string">&#x27;摇花手&#x27;</span>, <span class="string">&#x27;豆豆鞋&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> programme = <span class="keyword">new</span> BookShop(<span class="string">&#x27;programme&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> science = BookShop(<span class="string">&#x27;science&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> society = BookShop(<span class="string">&#x27;society&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(programme) <span class="comment">// books: (3) [&quot;css世界&quot;, &quot;JS高级编程&quot;, &quot;ES6入门教程&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(science) <span class="comment">// books: (3) [&quot;人与自然&quot;, &quot;大自然的奥秘&quot;, &quot;走进科学&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(society) <span class="comment">// books: (3) [&quot;精神小伙修炼手册&quot;, &quot;摇花手&quot;, &quot;豆豆鞋&quot;]</span></span><br></pre></td></tr></table></figure><h1 id="三、加载图片优化"><a href="#三、加载图片优化" class="headerlink" title="三、加载图片优化"></a>三、加载图片优化</h1><ol><li>压缩</li><li>直接一开始用压缩过的体积小的图，等加载完毕后，再用高清无码图来替换掉</li><li>使用base64编码代替图片</li><li>更好的图片格式</li><li>合并图片sprite(雪碧图)</li><li>使用css、svg、canvas或iconfont代替图片</li><li>响应式图片</li><li>将图片服务和应用服务分离</li><li>预加载</li><li>图片懒加载</li><li>使用CDN加速</li><li>加大服务器宽带</li><li>检查服务器硬盘读取速度</li></ol><h1 id="四、文件打包压缩"><a href="#四、文件打包压缩" class="headerlink" title="四、文件打包压缩"></a>四、文件打包压缩</h1><p><strong>1. JavaScript Minifier</strong></p><p><img src="https://pic4.zhimg.com/80/v2-3c499504f61a4f74c27bc562fdd2d07f_720w.jpg" alt="img"></p><p>它是一个很好的工具，带有API来缩小js代码。</p><p><strong>2. JSMIni</strong></p><p><img src="https://pic1.zhimg.com/80/v2-79302867088beb60810336d0015d13a4_720w.jpg" alt="img"></p><p>如果您想快速轻松地缩小JavaScript或jQuery文件，请使用jsMini。只需复制和粘贴源代码，选择要基本压缩还是完全压缩，然后缩小代码。</p><p><strong>3. JSCompress</strong></p><p><img src="https://pic3.zhimg.com/80/v2-d4efb83abbe621c71de9319db1bf5de2_720w.jpg" alt="img"></p><p><a href="https://link.zhihu.com/?target=http%3A//JSCompress.com">http://JSCompress.com</a>是一个在线javascript压缩器，允许您压缩和缩小javascript文件。压缩的javascript文件是生产环境的理想选择，因为它们通常会将文件的大小减少30-90%。大多数文件大小的减少是通过删除Web浏览器或访问者不需要的注释和额外的空白字符来实现的。<br><strong>4. Minifier</strong></p><p><img src="https://pic4.zhimg.com/80/v2-caab1069af288f03718e46e819a3d69b_720w.jpg" alt="img"></p><p>一个简化CSS/JS的简单工具，没有大的设置。它将CSS中的URL从原来的位置重新工作到输出位置。它会自动解析CSS中的@import语句。</p><p><strong>5. Gulp.js</strong></p><p><img src="https://pic1.zhimg.com/80/v2-14b62d367c36d8783b3e40ebe3d40c90_720w.jpg" alt="img"></p><p>js是流构建系统。它使用流和代码对配置，使一个更简单和更直观的构建。通过更喜欢代码而不是配置，GUMP使简单的事情变得简单，并使复杂的任务易于管理。通过利用节点流的强大功能，您可以获得不将中间文件写入磁盘的快速构建。GUP的严格插件指南确保插件保持简单，并按您预期的方式工作。<br><strong>6. Uglifyjs</strong></p><p><img src="https://pic3.zhimg.com/80/v2-da51b6e9e462f4af28923b8acee2959a_720w.jpg" alt="img"></p><p>这个包实现了一个通用的JavaScript解析器/压缩器/美化工具包。它是在NodeJS上开发的，但是它应该在任何支持CommonJS模块系统的JavaScript平台上工作(如果您选择的平台不支持CommonJS，那么您可以很容易地实现它，或者放弃导出。</p><p><strong>7. Grunt</strong></p><p><img src="https://pic4.zhimg.com/80/v2-726d31ed71beb349a8789d9eebd76d87_720w.jpg" alt="img"></p><p>grunt是一个用于JavaScript项目的基于任务的命令行构建工具。它有以下可以在项目中使用的预定义任务：连接文件、使用JSHint验证文件、使用UGIFIFYJS执行minify文件、使用节点单元运行单元测试等等。</p><p><strong>8. Koala</strong></p><p><img src="https://pic4.zhimg.com/80/v2-343266db9ed72a576f7ecb9a4d476afb_720w.jpg" alt="img"></p><p>koala是一个GUI应用程序，用于Less、Sass、Compass和CoffeeScript编译，以帮助Web开发人员更有效地使用它们。考拉可以在Windows、Linux和Mac上运行。</p><p><strong>9. Prepros</strong></p><p><img src="https://pic3.zhimg.com/80/v2-abbba698bb138ef51024a01a40ceb956_720w.jpg" alt="img"></p><p>PreProfessional是一个用于编译更少的工具，Sass、Compass、Stylus、Jade以及更多的带有自动CSS前缀的工具，它带有内置的服务器，用于跨浏览器测试。它运行在Windows、Mac和Linux上。</p><p><strong>10. Ajax Minifier</strong></p><p><img src="https://pic4.zhimg.com/80/v2-975db46f920db0406e0904b19d3185cf_720w.jpg" alt="img"></p><p>此工具是一个Windows应用程序，允许您在不使用命令行或VisualStudio的情况下运行MicrosoftAjaxMinifier。它缩小了文件夹和嵌套文件夹中的所有javascript文件，缩小了单个javascript文件，启用/禁用了小型程序的超压缩和分析选项等等。<br><strong>11. Smaller</strong></p><p><img src="https://pic2.zhimg.com/80/v2-fb5ecaa4a6b0a6f4ea4112c706ee246d_720w.jpg" alt="img"></p><p>更小的是一个强大的HTML，CSS和JavaScript压缩器在OSX上，它也有能力将多个文件组合成一个。压缩您的文件，使您的网站加载更快。</p><p><strong>12. Ultra Minifier</strong></p><p><img src="https://pic3.zhimg.com/80/v2-caa2a815672f8cff7fc45484df9e5f5e_720w.jpg" alt="img"></p><p>超迷你是最简单的YUI压缩机GUI，以缩小Javascript和CSS代码，而不使用终端。</p><p><strong>13. Require JS</strong></p><p><img src="https://pic3.zhimg.com/80/v2-401a7c0f89d7f7998bbbbc66a5406bca_720w.jpg" alt="img"></p><p>RequireJS是一个JavaScript文件和模块加载器。它是为浏览器内使用而优化的，但它可以用于其他JavaScript环境，如Rhino和Node。使用像RequireJS这样的模块化脚本加载程序将提高代码的速度和质量。它包括一个优化工具，可以作为部署代码的打包步骤的一部分运行。优化工具可以组合和缩小JavaScript文件，以实现更好的性能。<br><strong>14. Online JavaScript/CSS Compressor</strong></p><p><img src="https://pic4.zhimg.com/80/v2-642f9f9ccd8bdcc3a273efe535344a5b_720w.jpg" alt="img"></p><p>这是一个用于压缩JavaScript或CSS的Web接口。该工具使用UgulifyJS 2、Clean-CSS和HTML缩略符.</p><p><strong>15. Minify</strong></p><p><img src="https://pic4.zhimg.com/80/v2-126e9f9696f8301140a0aa50cede3797_720w.jpg" alt="img"></p><p>minify是一个PHP 5应用程序，它可以帮助你遵循雅虎的一些高性能网站规则，它结合了多个css或Javascript文件，删除了不必要的空白和注释，并为它们提供gzip编码和最佳客户端缓存头。</p><h1 id="五、三列布局（圣杯布局）"><a href="#五、三列布局（圣杯布局）" class="headerlink" title="五、三列布局（圣杯布局）"></a>五、三列布局（圣杯布局）</h1><p>圣杯布局简单来说就是把页面分为三列，左右两列固定宽度，中间自适应宽度，假设每列高度为屏幕高度，左右两列宽度为200px，中间自适应宽度</p><h2 id="float实现三列布局"><a href="#float实现三列布局" class="headerlink" title="float实现三列布局"></a>float实现三列布局</h2><ul><li>HTML结构</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>CSS代码</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.left</span>&#123;</span><br><span class="line">          <span class="attribute">float</span>: left;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: pink;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.center</span>&#123;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.right</span>&#123;</span><br><span class="line">          <span class="attribute">float</span>: right;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: pink;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>这里会奇怪为什么center元素要写在最后面，left,right元素使用浮动布局，纷纷都脱离了文档流，碰到父元素或者另外一个浮动元素就会浮动停止，浮动元素后面的元素会围绕着它；center元素没有设置浮动，则在常规文档中，left和right看起来像是漂浮在了常规流中；如果center写在中间，右边的元素碰到了center就停止了，不会飘在center的上方。（绝对定位实现三列布局，与float原理类似，position:absolute使得元素脱离文档流，下面就不详细说明position的实现方式了）</p><h2 id="flex实现三列布局"><a href="#flex实现三列布局" class="headerlink" title="flex实现三列布局"></a>flex实现三列布局</h2><p>flex实现三列布局有多种代码表示方式，可以使用flex-basis与flex-grow搭配着实现，也可以用width和flex:1（flex-grow,flex-shrink,flex-basis的缩写）实现等等，原理都是一样，只是代码的组织方式不一样，这里总结flex-basis和flex-grow的实现方式</p><ul><li>HTML代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>CSS代码</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">          <span class="attribute">display</span>: flex;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.left</span>&#123;</span><br><span class="line">          <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: pink;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.center</span>&#123;</span><br><span class="line">          <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.right</span>&#123;</span><br><span class="line">          <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: pink;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>flex-basis设置左右两边定宽，中间元素flex-grow实现元素填满剩余空间</p><h2 id="calc计算属性实现三列布局"><a href="#calc计算属性实现三列布局" class="headerlink" title="calc计算属性实现三列布局"></a>calc计算属性实现三列布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.left</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.center</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">400px</span>);</span><br><span class="line">        <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.right</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>calc结合着display:inline-block来实现，让三个div水平分布，设置左右两边固定200px.中间center元素利用计算属性计算剩余宽度</p><h2 id="table和table-cell实现三列布局"><a href="#table和table-cell实现三列布局" class="headerlink" title="table和table-cell实现三列布局"></a>table和table-cell实现三列布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">            <span class="attribute">display</span>: table;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.left</span>&#123;</span><br><span class="line">            <span class="attribute">display</span>: table-cell;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.center</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: auto;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">display</span>: table-cell;</span><br><span class="line">            <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.right</span>&#123;</span><br><span class="line">            <span class="attribute">display</span>: table-cell;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>table实现的时候，一定要给 父元素设置宽度，display:table默认宽度不是100%</p><h1 id="六、position的absolute和fixed的区别"><a href="#六、position的absolute和fixed的区别" class="headerlink" title="六、position的absolute和fixed的区别"></a>六、position的absolute和fixed的区别</h1><ul><li><p>共同点：</p><ul><li><p>改变行内元素的呈现方式，display被置为block</p></li><li><p>让元素脱离普通流，不占据空间</p></li><li><p>默认会覆盖到非定位元素上</p></li></ul></li><li><p>不同点：</p><ul><li><p>absolute的”根元素“是可以设置的，而fixed的”根元素“固定为浏览器窗口</p></li><li><p>当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的</p></li></ul></li></ul><h2 id="sticky-粘性定位"><a href="#sticky-粘性定位" class="headerlink" title="sticky(粘性定位)"></a>sticky(粘性定位)</h2><p>要设置一个元素的定位方式为粘性定位，首先需要将 <em>position</em> 属性设置为 <em>sticky</em>。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    ...</span><br><span class="line">    position: sticky;   /* 设置定位方式为粘性定位 */</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有以下几点需要注意：</p><ul><li>设定为 <em>position:sticky</em> 元素的任意父节点的 <em>overflow</em> 属性必须是 <em>visible*，否则 *position:sticky</em> 不会生效。因为如果 <em>position:sticky</em> 元素的任意父节点定位设置为 <em>overflow:hidden*，则父容器无法进行滚动，所以 *position:sticky</em> 元素也不会有滚动然后固定的情况。</li><li>父级元素不能设置固定的 <em>height</em> 高度值，否则也没有粘滞效果。</li><li>如果 <em>position:sticky</em> 元素的任意父节点定位设置为 <em>position:relative | absolute | fixed*，则元素相对父元素进行定位，而不会相对 *viewprot</em> 定位。</li></ul><p>除此之外，我们还需要指定 <em>top<em>、</em>right<em>、</em>bottom</em> 或 <em>left</em> 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。并且 <em>top</em> 和 <em>bottom</em> 同时设置时，<em>top</em> 生效的优先级高；<em>left</em> 和 <em>right</em> 同时设置时，<em>left</em> 的优先级高。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    ...</span><br><span class="line">    position: sticky;   /* 设置定位方式为粘性定位 */</span><br><span class="line">    top: 0;             /* 设置阀值 */</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所谓阀值，其实就是触发定位的条件。例如：如果设置了 <em>top: 50px*，那么元素在达到距离顶部 *50px</em> 时才会发生定位，否则并不会发生定位。</p><h1 id="七、JavaScript基本数据类型"><a href="#七、JavaScript基本数据类型" class="headerlink" title="七、JavaScript基本数据类型"></a>七、<code>JavaScript</code>基本数据类型</h1><p> <strong>7 种原始类型，使用 typeof 运算符检查 ：</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/undefined">undefined</a>：<code>typeof instance === &quot;undefined&quot;</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Boolean">Boolean</a>：<code>typeof instance === &quot;boolean&quot;</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Number">Number</a>：<code>typeof instance === &quot;number&quot;</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/String">String</a>：<code>typeof instance === &quot;string</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/BigInt">BigInt</a>：<code>typeof instance === &quot;bigint&quot;</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Symbol">Symbol</a> ：<code>typeof instance === &quot;symbol&quot;</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Null">null</a>：<code>typeof instance === &quot;object&quot;</code>。</li></ul><p><strong>引用数据类型</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Object">Object</a>：<code>typeof instance === &quot;object&quot;</code>。任何 constructed 对象实例的特殊非数据结构类型，也用做数据结构：new <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Object">Object</a>，new <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/array">Array</a>，new Map，new Set，new WeakMap，new WeakSet，new Date，和几乎所有通过 new keyword 创建的东西。</li></ul><p><strong>Symbol</strong></p><ul><li>Symbol 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JavaScript">JavaScript</a> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">原始数据类型</a> ，Symbol实例是唯一且不可改变的.  </li><li>在一些编程语言中 symbol也被称为原子(atoms).</li><li>在<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JavaScript">JavaScript</a>中，Symbol 是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">基本数据类型</a> 的一种，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a> 对象是 Symbol原始值的<a href="https://developer.mozilla.org/en-US/docs/Glossary/Wrapper">封装 (en-US)</a> 。</li><li>Symbol 的描述是可选的，但仅用于调试目的。</li><li>Symbol 类型是 ECMAScript 2015 中新添加的特性，在ECMAScript 5中没有对应的类型。</li></ul><h1 id="八、let与const和var的区别"><a href="#八、let与const和var的区别" class="headerlink" title="八、let与const和var的区别"></a>八、<code>let</code>与<code>const</code>和<code>var</code>的区别</h1><ul><li><p>var定义的变量，作用域是整个封闭函数，是全域的；let定义的变量，作用域是在块级或者字块中；</p></li><li><p>变量提升：不论通过var声明的变量处于当前作用于的第几行，都会提升到作用域的最顶部。而let声明的变量不会在顶部初始化，凡是在let声明之前使用该变量都会报错（引用错误ReferenceError）；</p></li><li><p>只要块级作用域内存在let，它所声明的变量就会绑定在这个区域；</p></li><li><p>let不允许在相同作用域内重复声明（报错同时使用var和let，两个let）。</p></li><li><p>const用来专门声明一个常量，它跟let一样作用于块级作用域，没有变量提升，重复声明会报错，不同的是const声明的常量不可改变，声明时必须初始化（赋值）</p></li></ul><h1 id="九、-Promise对象以及async与await的作用"><a href="#九、-Promise对象以及async与await的作用" class="headerlink" title="九、 Promise对象以及async与await的作用"></a>九、 <code>Promise</code>对象以及<code>async</code>与<code>await</code>的作用</h1><p>1.获得一个promise对象很简单  new Promise () 就可以了，简单的说promise的作用就是 当一个 异步函数 执行完毕时 所进行的回调  例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       resolve(<span class="string">&#x27;成功的回调&#x27;</span>)</span><br><span class="line">       reject(<span class="string">&#x27;失败的回调&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>这里的new  Promise是一个promise对象  可以通过在通过then()方法和catch()方法捕获到两个不同回调的值，顺便一提 axios 的值就是一个promise对象。</p><p>2.async的作用是声明一个函数为异步函数，当用了async声明后，这个函数就成了一个promise对象 ，如果这个函数有返回值，那么函数内部会把这个return 的值赋值给promise对象的PromiseValue。通过await就可以拿到这个异步返回值。当然通过then()也可以拿到。</p><p>3.await 是等待的意思，用于含有async的函数体内，可以让两个异步函数按照同步的顺序执行，也就是自上而下，依次执行。这样可以避免写过多的嵌套代码。</p><h1 id="十、-ES5与ES6实现继承的方式"><a href="#十、-ES5与ES6实现继承的方式" class="headerlink" title="十、  ES5与ES6实现继承的方式"></a>十、  <code>ES5</code>与<code>ES6</code>实现继承的方式</h1><ol><li><strong>ES5实现继承（基于原型链）：</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Human(name) &#123;    // 创建一个 Human 构造函数</span><br><span class="line">  this.name = name</span><br><span class="line">&#125;</span><br><span class="line">Human.prototype.run = function () &#123;</span><br><span class="line">  console.log(&#x27;I can run&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Man(name) &#123;    // 创建一个 Man 构造函数</span><br><span class="line">  Human.call(this, name)</span><br><span class="line">  this.gender = &#x27;男&#x27;</span><br><span class="line">&#125;</span><br><span class="line">Man.prototype.fight = function () &#123;</span><br><span class="line">  console.log(&#x27;I can fight&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Man.prototype.__proto__ = Human.prototype    // 让 Man 的原型对象的 proto 指向 Human 的原型对象</span><br></pre></td></tr></table></figure><p>以上代码，就可以实现继承。来 new 一个 Man 实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var dong = new Man(&#x27;dong&#x27;)</span><br><span class="line">console.log(dong)  </span><br></pre></td></tr></table></figure><p>看控制台是如何打印的：</p><p><img src="https://pic3.zhimg.com/80/v2-1a8ca07b2b04bfe88aad444a1a3a7766_720w.jpg" alt="img"></p><p>本来 Man.prototype.<strong>proto</strong> 是指向 Object.prototype 的，</p><p>但是我们加了一句 <strong>Man.prototype.<strong>proto</strong> = Human.prototype</strong> ，</p><p>所以现在 Man.prototype.<strong>proto</strong> 就指向了 Human.prototype 。</p><p>但是 IE 不支持这样的写法，在 IE 中，你要把</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Man.prototype.__proto__ = Human.prototype</span><br></pre></td></tr></table></figure><p>换成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var f = function()&#123;&#125;</span><br><span class="line">f.prototype = Human.prototype</span><br><span class="line">Man.prototype = new f()</span><br></pre></td></tr></table></figure><p>IE 坑你没商量。</p><p>至此，就实现了继承，Man 有了 Human 的 属性和方法。</p><ol start="2"><li><strong>ES6 实现继承（class 和 extends）：</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Human &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  run() &#123;</span><br><span class="line">    console.log(&#x27;I can run&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Man extends Human &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">    this.gender = &#x27;男&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  fight()&#123;</span><br><span class="line">    console.log(&#x27;I can fight&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 ES6 的写法比 ES5 的写法简洁了很多。</p><p>同样，再来 new 一个 Man 实例看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var dong = new Man(&#x27;dong&#x27;)</span><br><span class="line">console.log(dong)</span><br></pre></td></tr></table></figure><p>看看控制台：</p><p><img src="https://pic3.zhimg.com/80/v2-cabeeb8fbdcd7a8d7bfba540822ba506_720w.jpg" alt="img"></p><p><strong>注意：本文大部分内容来自其他文章和文档，只是进行了总结</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题总结三</title>
      <link href="/2021/11/04/notes-3/"/>
      <url>/2021/11/04/notes-3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、HTTP状态码"><a href="#一、HTTP状态码" class="headerlink" title="一、HTTP状态码"></a>一、HTTP状态码</h1><p>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p><p>HTTP状态码的英文为HTTP Status Code。</p><p>下面是常见的HTTP状态码：</p><ul><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ul><h1 id="二、浏览器缓存机制强缓存协商缓存"><a href="#二、浏览器缓存机制强缓存协商缓存" class="headerlink" title="二、浏览器缓存机制强缓存协商缓存"></a>二、浏览器缓存机制强缓存协商缓存</h1><blockquote><p><strong>浏览器缓存</strong> 是浏览器将用户请求过的静态资源（html、css、js），存储到电脑本地磁盘中，当浏览器再次访问时，就可以直接从本地加载了，不需要再去服务端请求了。</p><p>但也不是说缓存没有缺点，如果处理不当，可能会导致服务端代码更新了，但是用户却还是老页面。所以前端们要针对项目中各个资源的实际情况，做出合理的缓存策略。</p><p>缓存的优点：</p><ul><li>减少了冗余的数据传输，节省网费</li><li>减少服务器的负担，提升网站性能</li><li>加快了客户端加载网页的速度</li></ul><p>转自：<a href="https://juejin.cn/post/6844903763665240072">浏览器缓存 - 掘金 (juejin.cn)</a> (原文讲的很详细)</p></blockquote><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>简单粗暴，如果资源没过期，就取缓存，如果过期了，则请求服务器。</p><p>如何判断资源是否过期呢，也就是说强缓存的规则怎么看？</p><p><img src="https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fef124c55304637bbf89591ea947131~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p>主要是看 response headers 中的 Cache-Control 的值，图中的max-age = 31xxxxxxx，就是说在这些秒内，都直接使用缓存，超过了就继续请求服务器</p><p>而和 Cache-Control 并列的，还有一个 Expires ，已经基本淘汰了，所以不用管</p><p><strong>Cache-Control 的几个取值含义：</strong></p><p><strong>private：</strong> 仅浏览器可以缓存</p><p><strong>public：</strong> 浏览器和代理服务器都可以缓存（对于private和public，前端可以认为一样，不用深究）</p><p><strong>max-age=xxx</strong> 过期时间（重要）</p><p><strong>no-cache</strong>  不进行强缓存（重要）</p><p><strong>no-store</strong>   不强缓存，也不协商缓存，基本不用，缓存越多才越好呢</p><p>注意：规则可以同时多个</p><p><img src="https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c50fd6d7f97c41458a2b60cf8c2601af~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p>所以，对于强缓存，我们主要研究 Cache-Control 中的 max-age 和 no-cache</p><p>所以，判断该资源是否命中强缓存，就看 response 中 Cache-Control 的值，如果有max-age=xxx秒，则命中强缓存。如果Cache-Control的值是no-cache，说明没命中强缓存，走协商缓存。</p><p><strong>强缓存流程：</strong></p><p><img src="https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07f8dcf612474aa3b35ebea794f06fbe~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p><img src="https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c27d01f81b746db9594013415232287~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p>所以强缓存步骤已经很清晰了：</p><ol><li>第一次请求 a.js ，缓存表中没该信息，直接请求后端服务器。</li><li>后端服务器返回了 a.js ，且 http response header 中 cache-control 为 max-age=xxxx，所以是强缓存规则，存入缓存表中。</li><li>第二次请求 a.js ，缓存表中是 max-age， 那么命中强缓存，然后判断是否过期，如果没过期，直接读缓存的a.js，如果过期了，则执行协商缓存的步骤了。</li></ol><p><strong>注意</strong></p><p>这里有个问题，就是 max-age = 0 ，和 no-cache 有啥区别，我理解的是，no-cache直接不进行强缓存，让你去走协商缓存，而max-age=0是进行强缓存，但是过期了，需要更新。。。虽然实际上看起来两者效果是一样的。</p><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.itranslater.com%2Fqa%2Fdetails%2F2106051831532094464">www.itranslater.com/qa/details/…</a></p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>触发条件：</p><ol><li>Cache-Control 的值为 no-cache （不强缓存）</li><li>或者 max-age 过期了 （强缓存，但总有过期的时候）</li></ol><p>也就是说，不管怎样，都可能最后要进行协商缓存（no-store除外）</p><p><img src="https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfd149d78c3e4e25a3d5ce6128bb65b1~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p>这个图，虽然强缓存命中，但是也有 ETag 和 Last-Modified ，这两个就是协商缓存的相关规则。虽然之前的强缓存流程和他俩没关。。。</p><p>ETag：每个文件有一个，改动文件了就变了，可以看似md5</p><p>Last-Modified：文件的修改时间</p><p>也就是说，每次http返回来 <strong>response</strong> header 中的 ETag和 Last-Modified，在下次请求时在 <strong>request</strong> header 就把这两个带上（但是名字变了ETag–&gt;If-None-Match，Last-Modified–&gt;If-Modified-Since ），服务端把你带过来的标识，资源目前的标识，进行对比，然后判断资源是否更改了。</p><p>这个过程是循环往复的，即缓存表在每次请求成功后都会更新规则。</p><p><strong>1. 第n次请求成功时：</strong></p><p><img src="https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae429acb07da4066ba780980451ed8d7~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p><strong>2. 缓存表中更新该资源的 ETag 值</strong></p><p><strong>3. 第n+1次请求：</strong></p><p>从缓存表中取该资源最新的ETag，然后加在 request header 中, 注意变名字了，由 ETag – &gt; If-None-Match</p><p><img src="https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b59c098641a94f4099373b45ad8f572c~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p>图：</p><p><img src="https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58e4541b60f44ff7ac7e9cf6c1242ba0~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p><img src="https:////p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77ece84bcd294d22bdc966362248663e~tplv-k3u1fbpfcp-watermark.awebp" alt="img"></p><p>所以协商缓存步骤总结：</p><ol><li>请求资源时，把用户本地该资源的 ETag 同时带到服务端，服务端和最新资源做对比。</li><li>如果资源没更改，返回304，浏览器读取本地缓存。</li><li>如果资源有更改，返回200，返回最新的资源。</li></ol><h1 id="三、promise"><a href="#三、promise" class="headerlink" title="三、promise"></a>三、promise</h1><p> <strong>Promise</strong> 对象用于表示一个异步操作的最终完成 (或失败)及其结果值。 </p><h2 id="有几种状态"><a href="#有几种状态" class="headerlink" title="有几种状态"></a>有几种状态</h2><p>一个 <code>Promise</code> 必然处于以下几种状态之一：</p><ul><li><em>待定（pending）</em>: 初始状态，既没有被兑现，也没有被拒绝。</li><li><em>已兑现（fulfilled）</em>: 意味着操作成功完成。</li><li><em>已拒绝（rejected）</em>: 意味着操作失败。</li></ul><h2 id="Promise-优缺点"><a href="#Promise-优缺点" class="headerlink" title="Promise 优缺点"></a>Promise 优缺点</h2><p>有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。</p><p>Promise 也有一些缺点。首先，无法取消 Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。第三，当处于 Pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><h1 id="四、为什么用Vuex，其他方式实现Vuex"><a href="#四、为什么用Vuex，其他方式实现Vuex" class="headerlink" title="四、为什么用Vuex，其他方式实现Vuex"></a>四、为什么用<code>Vuex</code>，其他方式实现Vuex</h1><p> Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题总结一</title>
      <link href="/2021/11/04/notes/"/>
      <url>/2021/11/04/notes/</url>
      
        <content type="html"><![CDATA[<h1 id="一、原生js的选择器"><a href="#一、原生js的选择器" class="headerlink" title="一、原生js的选择器"></a>一、原生js的选择器</h1><blockquote><p>JS选择器的主要作用</p><p>​    JS选择器主要用来获取HTML页面中的元素，将页面中的元素保存到一个对象中然后就可以对这些对象的属性值进行相应操作以实现一些动态效果，以达到页面的生动，易用。需要注意的一点是操作的一定是对象，直接将元素当做对象使用是不行的。</p><p>​    JS选择器是将对象对应的元素的属性直接进行操作，所以其改变的style的值是直接改变行间样式优先级远高于CSS样式，所以使用时应注意与已经完成的CSS样式的取舍。 </p></blockquote><p> js中原生的选择器主要有以下六种</p><ul><li>document.getElementById() </li><li>document.getElementsByClassName() </li><li>document.getElementsByName() </li><li>document.getElementsByTagName() </li><li>document.querySelector()</li><li>document.querySelectorAll()</li></ul><p>主要介绍document.querySelector() document.querySelectorAll()</p><h2 id="1-document-querySelector"><a href="#1-document-querySelector" class="headerlink" title="1.document.querySelector()"></a>1.document.querySelector()</h2><ul><li>返回第一个匹配的元素（以文档顺序）</li><li>如果没有匹配的元素就返回null。 </li></ul><h2 id="2-document-querySelectorAll"><a href="#2-document-querySelectorAll" class="headerlink" title="2.document.querySelectorAll()"></a>2.document.querySelectorAll()</h2><ul><li>它接受包含一个CSS选择器的字符串参数，返回一个表示文档中匹配选择器的所有元素的NodeList对象。</li><li>该对象并不是实时的它包含在调用时刻所匹配的元素，但它并不更新后续文档的变化。</li><li>如果没有匹配的元素，querySelectorAll（）将返回一个空的NodeList对象。</li><li>如果选择器字符串非法，querySelectorAll（）将抛出一个异常。 </li></ul><h1 id="二、什么时候用id什么时候用class"><a href="#二、什么时候用id什么时候用class" class="headerlink" title="二、什么时候用id什么时候用class"></a>二、什么时候用id什么时候用class</h1><ul><li>当css样式用于不止一个元素时，使用class来定义。</li><li>当css样式只应用于一个元素时，使用id来定义。 </li></ul><h1 id="三、position-absolute与position-fixed的区别"><a href="#三、position-absolute与position-fixed的区别" class="headerlink" title="三、position:absolute与position:fixed的区别"></a>三、position:absolute与position:fixed的区别</h1><blockquote><p> CSS <code>position</code>属性用于指定一个元素在文档中的定位方式。<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/top"><code>top</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/right"><code>right</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/bottom"><code>bottom</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/left"><code>left</code></a> 属性则决定了该元素的最终位置。 </p></blockquote><h2 id="定位类型"><a href="#定位类型" class="headerlink" title="定位类型"></a>定位类型</h2><ul><li><strong>定位元素（positioned element）</strong>是其<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/computed_value">计算后</a>位置属性为 <code>relative</code>, <code>absolute</code>, <code>fixed</code>或 <code>sticky</code> 的一个元素（换句话说，除<code>static</code>以外的任何东西）。</li><li><strong>相对定位元素（relatively positioned element）</strong>是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/computed_value">计算后</a>位置属性为 <code>relative</code>的元素。</li><li><strong>绝对定位元素（absolutely positioned element）</strong>是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/computed_value">计算后</a>位置属性为 <code>absolute</code> 或 <code>fixed</code> 的元素。</li><li><strong>粘性定位元素（stickily positioned element）</strong>是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/computed_value">计算后</a>位置属性为 <code>sticky</code> 的元素。</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>position</code> 属性被指定为从下面的值列表中选择的单个关键字。</p><h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><ul><li><p><code>static</code></p><p>该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 和 <code>z-index</code>属性无效。</p></li><li><p><code>relative</code></p><p>该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白）。position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。</p></li><li><p><code>absolute</code></p><p>元素会被移出正常文档流，并不为元素预留空间，通过指定元素相对于最近的非 static 定位祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p></li><li><p><code>fixed</code></p><p>元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。<code>fixed</code> 属性会创建新的层叠上下文。当元素祖先的 <code>transform</code>, <code>perspective</code> 或 <code>filter</code> 属性非 <code>none</code> 时，容器由视口改为该祖先。</p></li><li><p><code>sticky</code></p><p>元素根据正常文档流进行定位，然后相对它的最近滚动祖先（nearest scrolling ancestor）和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block">containing block</a> (最近块级祖先 nearest block-level ancestor)，包括table-related元素，基于<code>top</code>, <code>right</code>, <code>bottom</code>, 和 <code>left</code>的值进行偏移。偏移值不会影响任何其他元素的位置。</p><p>该值总是创建一个新的<a href="https://developer.mozilla.org/en/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">层叠上下文（stacking context</a>）。注意，一个sticky元素会“固定”在离它最近的一个拥有“滚动机制”的祖先上（当该祖先的<code>overflow</code> 是 <code>hidden</code>, <code>scroll</code>, <code>auto</code>, 或 <code>overlay</code>时），即便这个祖先不是最近的真实可滚动祖先。这有效地抑制了任何“sticky”行为（详情见<a href="https://github.com/w3c/csswg-drafts/issues/865">Github issue on W3C CSSWG</a>）。</p><h1 id="四、Bootstrap-栅格"><a href="#四、Bootstrap-栅格" class="headerlink" title="四、Bootstrap 栅格"></a>四、Bootstrap 栅格</h1></li></ul><blockquote><p> Bootstrap包含了一个强大的移动优先的网格系统，它是基于一个12列的布局、有5种响应尺寸(对应不同的屏幕)，支持Sass mixins自由调用，并结合自己预定义的CSS、Js类，用来创建各种形状和尺寸的布局。 </p></blockquote><h2 id="机制原理"><a href="#机制原理" class="headerlink" title="机制原理"></a>机制原理</h2><p>Bootstrap的网格系统使用一系列<code>div</code>容器的行、列来布局和对齐内容，不同于旧版3.0，新版是完全基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes">flexbox</a>流式布局构建的，完全支持响应式标准。下面的示例，可以让我们深入了解网格如何组合在一起。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm&quot;</span>&gt;</span></span><br><span class="line">      三分之一空间占位</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm&quot;</span>&gt;</span></span><br><span class="line">      三分之一空间占位</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm&quot;</span>&gt;</span></span><br><span class="line">      三分之一空间占位</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的例子使用BootStrap预定义的栅格系统，演示了在<code>.container</code>容器内建立了三个等宽的列，并且分别兼容在small(极窄宽度网页)、medium(中等宽度网页)、large(宽网页)、extra large(超宽网页)四种设备类型-即无论网页宽度如何，这三个列都是<strong>恒在</strong>呈现的。</p><p>让我们来慢慢揭开它的工作原理：</p><ul><li>栅格系统提供了集中内容居中、水平填充网页内容的方法，使用<code>.container</code>(严格意义上也包括<code>.container-fluid</code>，后文相同不再备注-译者)应答网页宽度，或使用<code>.container-fluid</code>使网页能够以<code>100%</code>宽度呈现在所有的浏览器窗口或设备尺寸上。<br>换一个说法就是：<code>.container</code>实现固定的宽度并居中呈现，<code>.container-fluid</code>实现全宽度，并和其它网格实现对齐(译者注)。</li><li>行(<code>.row</code>)是列(<code>.col-*</code>)的横向组合和父容器(它们有效组织在<code>.row</code>下)，每列都有水平的<code>padding</code>值，用于控制它们之间的间隔，同时在负边距的行上抵消，从而实现列中的所有内容在视觉上是左侧对齐的体验。</li><li>网页开发者的呈现内容必须放置在列(<code>.col-*</code>中，而且只有列可以是行的直接子元素，否则都是违法的(不可以在<code>.col-*</code>以上添加呈现内容。</li><li>这一切都要感谢<code>flexbox</code>流式布局，从而使我们不需要指定列的宽度(旧版Bootsrap3是采用严格宽度定义来实现的)就能实现网页自动等宽排列，比如我们在<code>.container</code>中置入初始化的四个<code>.col-sm</code>就能实现各自25%宽度并左对齐形成一行的排列。</li><li>你可能注意到<code>.col-*</code>后面有不同的数字，如<code>.col-sm-4</code>或<code>.col-xl-12</code>，这些css类后面的数字用于表明定义div空间想要占用列的数量，每行最多有12列。如果你想用三个等宽的列，则取12的三分之一，即<code>.col-sm-4</code>就是正确的(后文会有详细的介绍)。</li><li><code>.col-*</code>的<code>width</code>属性(即列宽)是用百分比来表现和定义的，所以它们总是流式的，其尺寸大小受父元素的定义影响(这正是<code>flexbox</code>布局的特征，子元素的宽比和排列受父元素定义)。</li><li>列具有水平<code>padding</code>定义，用于创建列与列之的间隙。</li><li><code>.row</code>上带有<code>margin-left: -15px;margin-right: -15px;</code>属性，你可以在<code>.row</code>上上定义<code>.no-gutters</code>属性，从而消除这个属性，使页面不会<strong>额外宽出30px</strong>，即`。(译者原意拆成两行表述)。</li><li>总共有<a href="https://getbootstrap.net/docs/layout/grid/#responsive-breakpoints">五个栅格等级</a>，每个响应式分界点隔出一个等级：特小<code>.col</code>、小<code>.col-sm-*</code>、中<code>.col-md-*</code>、大<code>.col-lg-*</code>、特大（大、特大也可以称为宽、超宽）<code>.col-xl-*</code>。</li><li>栅格断点的媒体查询基于宽度的最小值，意味着它们应用到某一等级以及这一等级之上的所有（如<code>.col-sm-4</code>的的定义可以在小型、中型、宽、超宽设备上呈现，但不适用于能在超小型<code>.col-sx</code>上呈现）。</li><li>用户不需要自行定义网格，可以直接使用系统预定义的栅格类（如<code>.col-4</code>）或采用<a href="https://getbootstrap.net/docs/layout/grid/#sass-mixins">Sass mixins</a>来进行更多的语义标记满足开发需要。</li></ul><h1 id="五、开发页面时怎么debug"><a href="#五、开发页面时怎么debug" class="headerlink" title="五、开发页面时怎么debug"></a>五、开发页面时怎么debug</h1><ul><li>debugger</li><li>alert、confirm；</li><li>console</li><li>element</li><li>breakpoint</li><li>network </li></ul><h1 id="六、什么是CSS-盒模型"><a href="#六、什么是CSS-盒模型" class="headerlink" title="六、什么是CSS 盒模型?"></a>六、什么是CSS 盒模型?</h1><p>完整的 CSS 盒模型应用于块级盒子，内联盒子只使用盒模型中定义的部分内容。模型定义了盒的每个部分 —— margin, border, padding, and content —— 合在一起就可以创建我们在页面上看到的内容。为了增加一些额外的复杂性，有一个标准的和替代（IE）的盒模型。</p><h2 id="盒模型的各个部分"><a href="#盒模型的各个部分" class="headerlink" title="盒模型的各个部分"></a>盒模型的各个部分</h2><p> CSS中组成一个块级盒子需要:</p><ul><li><strong>Content box</strong>: 这个区域是用来显示内容，大小可以通过设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width"><code>width</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height"><code>height</code></a>.</li><li><strong>Padding box</strong>: 包围在内容区域外部的空白区域； 大小通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding"><code>padding</code></a> 相关属性设置。</li><li><strong>Border box</strong>: 边框盒包裹内容和内边距。大小通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border"><code>border</code></a> 相关属性设置。</li><li><strong>Margin box</strong>: 这是最外面的区域，是盒子和其他元素之间的空白区域。大小通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin"><code>margin</code></a> 相关属性设置。</li></ul><h2 id="标准盒模型"><a href="#标准盒模型" class="headerlink" title="标准盒模型"></a>标准盒模型</h2><p>在标准模型中，如果你给盒设置 <code>width</code> 和 <code>height</code>，实际设置的是 <em>content box</em>。 padding 和 border 再加上设置的宽高一起决定整个盒子的大小。</p><p> 假设定义了 <code>width</code>, <code>height</code>, <code>margin</code>, <code>border</code>, and <code>padding</code>: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果使用标准模型宽度 = 410px (350 + 25 + 25 + 5 + 5)，高度 = 210px (150 + 25 + 25 + 5 + 5)，padding 加 border 再加 content box。 </p><blockquote><p><strong>注</strong>: margin 不计入实际大小 —— 当然，它会影响盒子在页面所占空间，但是影响的是盒子外部空间。盒子的范围到边框为止 —— 不会延伸到margin。 </p></blockquote><h2 id="替代（IE）盒模型"><a href="#替代（IE）盒模型" class="headerlink" title="替代（IE）盒模型"></a>替代（IE）盒模型</h2><p>你可能会认为盒子的大小还要加上边框和内边距，这样很麻烦，而且你的想法是对的! 因为这个原因，css还有一个替代盒模型。使用这个模型，所有宽度都是可见宽度，所以内容宽度是该宽度减去边框和填充部分。使用上面相同的样式得到 (width = 350px, height = 150px).</p><p> 默认浏览器会使用标准模型。如果需要使用替代模型，您可以通过为其设置 <code>box-sizing: border-box</code> 来实现。 这样就可以告诉浏览器使用 <code>border-box</code> 来定义区域，从而设定您想要的大小。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p> 如果你希望所有元素都使用替代模式，而且确实很常用，设置 <code>box-sizing</code> 在 `` 元素上，然后设置所有元素继承该属性，正如下面的例子。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、CSS三种引入方式：内联、页级、外联"><a href="#七、CSS三种引入方式：内联、页级、外联" class="headerlink" title="七、CSS三种引入方式：内联、页级、外联"></a>七、CSS三种引入方式：内联、页级、外联</h1><h2 id="1-内联"><a href="#1-内联" class="headerlink" title="1.内联"></a>1.内联</h2><p> 内联CSS也可称为行内CSS或者行级CSS，它直接在标签内部引入，显著的优点是十分的便捷、高效；但是同时也造成了不能够重用样式的缺点，如果代码行数到达一定长度不建议采用。通常内联CSS作为测试使用，可以查找代码中bug。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 65px;height: 20px;border: 1px solid;&quot;</span>&gt;</span>测试元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-页级CSS"><a href="#2-页级CSS" class="headerlink" title="2.页级CSS"></a>2.页级CSS</h2><p> 页级CSS也可称为内部CSS，整体是放在head标签里边的，在style标签里边定义样式，作用范围和字面意思相同，仅限于本页面的元素；如果你写的代码超过了几百行，想想每次把代码页拉到最上边都很烦，所以它在可维护性方面较差。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> 2     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"> 3     <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> 4     <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"> <span class="number">5</span>         <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css"> <span class="number">6</span>             <span class="attribute">width</span>: <span class="number">65px</span>;</span></span><br><span class="line"><span class="css"> <span class="number">7</span>             <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css"> <span class="number">8</span>             <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css"> <span class="number">9</span>             <span class="attribute">background</span>: greenyellow;</span></span><br><span class="line"><span class="css"><span class="number">10</span>         &#125;</span></span><br><span class="line"><span class="css"><span class="number">11</span>     </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">12 <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-外联CSS"><a href="#3-外联CSS" class="headerlink" title="3. 外联CSS"></a>3. 外联CSS</h2><p> 外联CSS也可称为外部CSS，在实际的项目中通常使用此种方式，它只在页面中使用link或者@import引入即可，可维护性好；并且外联CSS是一个单独的文件，可以作用于多个页面，在修改的时候可以针对性地修改某一块区域，达到多个页面样式同时变更，相较于内联CSS和页级CSS，省去了到每个页面修改的步骤，提高了开发效率，同时一定程度提高了性能。 </p><p> 接下来具体说说link和@import的区别： </p><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><ul><li><p><code>link:&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;*.css&quot; /&gt;</code></p><p>link语法格式中，rel指的是关联(relation)，type指的是类型，href指的是链接文件路径。</p><p>link的作用主要用来引入CSS和网页图标，指示告知搜索引擎，网页之间的关系等。</p></li><li><p><code>@import:&lt;style&gt;@import url(&quot;*.css&quot;);&lt;/style&gt;</code></p><p>@import语法格式务必写在style标签中，后直接加文件路径即可。</p><p>@import作用在CSS文件和页面中，可以在一个CSS文件中引入其他的CSS文件，例如在index.css文件中引入其他CSS文件的样式，整合在一起后，再在index.html中调用一次即可，在实际项目中经常使用，方便管理和维护。</p></li><li><p>二者加载顺序影响　</p><p>HTML加载过程：</p><ul><li>加载HTML-DOM结构</li><li>CSS和JS</li><li>图片和多媒体</li><li>加载事件触发</li></ul><p>link和@import都没有放置顺序的要求，但是不同的放置位置可能会造成效果显示的差异。对于link，无论放到哪个位置，都是一边加载数据，一边进行优化，视觉感受很好；而对于@import，放置到哪里，才从哪里开始加载CSS样式，即先加载数据，然后加载样式，如果网速不佳，可能会造成只有数据出来，而样式一点点加载的效果。并且在同一个页面中，调用两种方式，link永远比@import优先级高。</p><p>在项目中使用的时候，一般在页面中调用方式为link，并且放在head标签中；使用@import除了在CSS文件中，在页面调用时，一般加载第三方的样式会使用到，并且需要放置在页面的底部，不会影响自己的网站。</p><h1 id="八、eval的具体实现原理"><a href="#八、eval的具体实现原理" class="headerlink" title="八、eval的具体实现原理"></a>八、eval的具体实现原理</h1></li></ul><blockquote><p> eval() 函数可计算某个字符串，并执行其中的的 <a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=JavaScript">JavaScript</a> 代码。  w3c上对它的定义</p></blockquote><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><blockquote><p>eval(string)</p></blockquote><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li><p><code>string</code></p><p>一个表示 JavaScript 表达式、语句或一系列语句的字符串。表达式可以包含变量与已存在对象的属性。</p></li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回字符串中代码的返回值。如果返回值为空，则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><code>eval()</code> 是全局对象的一个函数属性。</p><p><code>eval()</code> 的参数是一个字符串。如果字符串表示的是表达式，<code>eval()</code> 会对表达式进行求值。如果参数表示一个或多个 JavaScript 语句，那么<code>eval()</code> 就会执行这些语句。不需要用 <code>eval()</code> 来执行一个算术表达式：因为 JavaScript 可以自动为算术表达式求值。</p><p>如果你以字符串的形式构造了算术表达式，那么可以在后面用 <code>eval()</code>对它求值。例如，假设你有一个变量 <code>x</code>，您可以通过将表达式的字符串值（例如 <code>3 * x + 2</code>）赋值给一个变量，然后在你的代码后面的其他地方调用 <code>eval()</code>，来推迟涉及 <code>x</code> 的表达式的求值。</p><p>如果 <code>eval()</code> 的参数不是字符串， <code>eval()</code> 会将参数原封不动地返回。在下面的例子中，<code>String</code> 构造器被指定，而 <code>eval()</code> 返回了 <code>String</code> 对象而不是执行字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;2 + 2&quot;</span>)); <span class="comment">// 返回了包含&quot;2 + 2&quot;的字符串对象</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;2 + 2&quot;</span>);             <span class="comment">// returns 4</span></span><br></pre></td></tr></table></figure><p>你可以使用一些通用的方法来绕过这个限制，例如使用 <code>toString()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> expression = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;2 + 2&quot;</span>);</span><br><span class="line"><span class="built_in">eval</span>(expression.toString());</span><br></pre></td></tr></table></figure><p>如果你间接的使用 <code>eval()</code>，比如通过一个引用来调用它，而不是直接的调用 <code>eval</code>。 从 <a href="https://www.ecma-international.org/ecma-262/5.1/#sec-10.4.2">ECMAScript 5</a> 起，它工作在全局作用域下，而不是局部作用域中。这就意味着，例如，下面的代码的作用声明创建一个全局函数，并且 <code>eval</code> 中的这些代码在执行期间不能在被调用的作用域中访问局部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">2</span>, y = <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">&#x27;x + y&#x27;</span>));  <span class="comment">// 直接调用，使用本地作用域，结果是 6</span></span><br><span class="line">  <span class="keyword">var</span> geval = <span class="built_in">eval</span>; <span class="comment">// 等价于在全局作用域调用</span></span><br><span class="line">  <span class="built_in">console</span>.log(geval(<span class="string">&#x27;x + y&#x27;</span>)); <span class="comment">// 间接调用，使用全局作用域，throws ReferenceError 因为`x`未定义</span></span><br><span class="line">  (<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">&#x27;x + y&#x27;</span>); <span class="comment">// 另一个间接调用的例子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="永远不要使用-eval！"><a href="#永远不要使用-eval！" class="headerlink" title="永远不要使用 eval！"></a>永远不要使用 <code>eval</code>！</h2><p><code>eval()</code> 是一个危险的函数， 它使用与调用者相同的权限执行代码。如果你用 <code>eval()</code> 运行的字符串代码被恶意方（不怀好意的人）修改，您最终可能会在您的网页/扩展程序的权限下，在用户计算机上运行恶意代码。更重要的是，第三方代码可以看到某一个 <code>eval()</code> 被调用时的作用域，这也有可能导致一些不同方式的攻击。相似的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function"><code>Function</code></a> 就不容易被攻击。</p><p><code>eval()</code> 通常比其他替代方法更慢，因为它必须调用 JS 解释器，而许多其他结构则可被现代 JS 引擎进行优化。</p><p>此外，现代JavaScript解释器将javascript转换为机器代码。 这意味着任何变量命名的概念都会被删除。 因此，任意一个eval的使用都会强制浏览器进行冗长的变量名称查找，以确定变量在机器代码中的位置并设置其值。 另外，新内容将会通过 <code>eval()</code> 引进给变量， 比如更改该变量的类型，因此会强制浏览器重新执行所有已经生成的机器代码以进行补偿。 但是，（谢天谢地）存在一个非常好的eval替代方法：只需使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function">window.Function</a>。 这有个例子方便你了解如何将<code>eval()</code>的使用转变为<code>Function()</code>。</p><p>使用eval的糟糕代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">looseJsonParse</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + obj + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(looseJsonParse(</span><br><span class="line">   <span class="string">&quot;&#123;a:(4-1), b:function()&#123;&#125;, c:new Date()&#125;&quot;</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p> 不用eval的更好的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">looseJsonParse</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Function</span>(<span class="string">&#x27;&quot;use strict&quot;;return (&#x27;</span> + obj + <span class="string">&#x27;)&#x27;</span>)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(looseJsonParse(</span><br><span class="line">   <span class="string">&quot;&#123;a:(4-1), b:function()&#123;&#125;, c:new Date()&#125;&quot;</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>比较上面的两个代码片段，两个代码片段似乎是以相同的方式工作，但再想一想：eval的这个代码的速度要慢得多。 注意<code>c: new Date()</code>在执行体中。 在没有eval的函数中，对象在全局范围内被用来进行计算，因此浏览器可以放心的假设<code>Date</code>是来自<code>window.Date</code>的而不是一个名为<code>Date</code>的局部变量。</p><h1 id="九、作用域"><a href="#九、作用域" class="headerlink" title="九、作用域"></a>九、作用域</h1><p>在JavaScript中的作用域有<strong>全局作用域</strong>、<strong>局部作用域</strong>（在JavaScript中局部作用域即是<strong>函数作用域</strong>）以及<strong>块级作用域</strong>。</p><ul><li>全局作用域：在最外层函数定义的变量即拥有全局作用域，对于任意函数来说，都可以访问到。例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;     </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;     </span><br><span class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(a);<span class="comment">//1  </span></span><br><span class="line">    &#125;     </span><br><span class="line">    fn();  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ul><li><p>局部作用域：和全局作用域相反，局部作用域的变量即是在特定代码块中才能过访问，对于外部是不能够访问的。</p><p>注意：在函数内部定义变量的时候，如果不用var，那么你声明的就是全局变量了。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;     <span class="keyword">var</span> a = <span class="number">1</span>;     </span><br><span class="line">      <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;       </span><br><span class="line">          <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">          <span class="built_in">console</span>.log(a)<span class="comment">//1</span></span><br><span class="line">       &#125;</span><br><span class="line">      fn();</span><br><span class="line">      <span class="built_in">console</span>.log(b);<span class="comment">//b is not defined </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>块级作用域：在代码块中使用<strong>let</strong>定义的变量，只能在当前代码块中进行访问。块级作用域可以形成暂时性死区。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(i);<span class="comment">//1-9</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">console</span>.log(i);<span class="comment">//undefined</span></span><br><span class="line">   &#125;</span><br><span class="line">   fn()</span><br></pre></td></tr></table></figure><h1 id="十、作用域链"><a href="#十、作用域链" class="headerlink" title="十、作用域链"></a>十、作用域链</h1><p>个人理解，作用域就是在函数内部可以访问外部变量的机制，使用链式查找哪些变量可以被函数内部访问。说起作用域链，那么不得不说<strong>执行环境</strong>了。</p><h2 id="执行环境（Execution-Context）"><a href="#执行环境（Execution-Context）" class="headerlink" title="执行环境（Execution Context）"></a>执行环境（Execution Context）</h2><p>EC是JavaScript中一个最为重要的概念。EC定义了变量和函数有权访问的其他数据。JavaScript中，函数在运行时都会产生一个执行环境，并且JS引擎还会产生一个与当前EC相关联的<strong>变量对象</strong>（Variable Object，即VO）。EC中所有定义的变量和方法都包含在VO中。全局执行环境是最外围的执行环境，它是一个“兜底”的执行环境。</p><p>JS引擎在进入一段可执行的代码时，需要完成以下三个初始化工作：</p><p>首先，创建一个<strong>全局对象</strong>(Global Object，即GO)，将Math、String、Data等常用的js对象作为其属性，但是这个GO在全局是不可见的，不可直接访问的。因此它还有另外一个属性window，并将window指向了自身，这样就可以在全局通过访问window，来访问GO的属性和方法了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalObject = &#123;</span><br><span class="line">  <span class="built_in">Math</span>,</span><br><span class="line">  <span class="built_in">String</span>,</span><br><span class="line">  Data,</span><br><span class="line">  <span class="built_in">Function</span>,</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">window</span>:<span class="built_in">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，JS引擎会创建一个<strong>执行环境栈</strong>（Execution Context Stack 即ECS），与此同时还会创建一个全局环境EC。当JS的执行流执行到一个函数时，JS引擎就会把该函数的EC推到ECS中，当函数执行完之后，再把EC从ECS中弹出，将执行流的控制权交还给上一层的EC。ECMAScript的执行流就是由这种机制控制着。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ecStack = [];</span><br><span class="line"><span class="comment">//执行到函数fn</span></span><br><span class="line">ecStock.push(EC);</span><br><span class="line"><span class="comment">//执行完fn</span></span><br><span class="line">ecStack.pop(EC);</span><br></pre></td></tr></table></figure><p>最后，JS引擎会创造一个和EC相关连的变量对象VO。如果这个环境是一个函数，则将其<strong>活动对象</strong>（Action Object，即AO）作为其变量对象。初始时AO只包含一个变量，即arguments。作用域链的下一个变量对象来自于外部包含环境，而下一个变量对象来自下一个包含环境，这样一直延伸到全局环境。全局变量对象（GO）始终都是作用域链的最后一个对象。</p><p>每一个函数在定义的时候，都会创建一个与之关联的<strong>[[scopes]]</strong>属性，该scope总是指向定义函数时的执行环境EC。举个 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.dir(fn);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-495d018d3ea92cdf67ddc475ea82e406_720w.jpg" alt="img"></p><p>如上图所示，函数fn的[[scopes]]即是它的执行环境，GO。</p><p>再看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = a + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t = fn();</span><br><span class="line"><span class="built_in">console</span>.dir(t)</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-3faf889894663a738e0555b3594456db_720w.jpg" alt="img"></p><p>fn中始终都没有定义变量a，那么JS引擎就会沿着Scope Chain一直向上寻找a，最终在GO中找到了a。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>当JavaScript的代码块在运行时，就会创建与之相关的作用域链。</p><blockquote><p>作用域链的作用就是保证当前环境对其有权访问的变量和方法进行有序的访问 ——JavaScript高级程序设计</p></blockquote><p>作用域链的前端（也就是开头）就是当前执行环境EC的变量对象，它的变量对象来自于它的外部包含环境，再下一个变量对象同时也来自再下一个外部包含环境，这样一直延伸到全局执行环境，同时，GO也是作用域链的最后一个对象。</p><h2 id="标识符解析"><a href="#标识符解析" class="headerlink" title="标识符解析"></a>标识符解析</h2><p>当在某个环境中为了读取或写入从而引入一个标识符时，必须通过搜索来确定该标识符代表了什么。搜索过程从当期作用域链的前端开始，向上逐级搜索，如果在局部环境中查找到了该标识符的定义，则停止搜索‘否则将一直沿着作用域链向上查找，直到找到GO上。如果找不到，则会报错。</p><h2 id="延长作用域"><a href="#延长作用域" class="headerlink" title="延长作用域"></a>延长作用域</h2><p>虽然作用域只有两种：全局和局部（函数），但是还是有其他办法可以用来延长作用域链。其主要思路就是：有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象在代码执行后就被销毁。</p><p>1、try-catch语句的catch块</p><p>2、with语句</p><p><strong>注意：本文大部分内容来自其他文章和文档，只是进行了总结</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级</title>
      <link href="/2021/10/28/JavaScript%E9%AB%98%E7%BA%A7/"/>
      <url>/2021/10/28/JavaScript%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="一、JavaScript解析与执行过程"><a href="#一、JavaScript解析与执行过程" class="headerlink" title="一、JavaScript解析与执行过程"></a>一、JavaScript解析与执行过程</h1><ul><li>变量声明会在预处理阶段进行处理</li><li>变量的赋值赋值是在运行时复制的</li><li>变量名和函数名冲突，函数比变量权重总是高一些</li><li>变量或函数同名后者会覆盖前者</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度实习面试</title>
      <link href="/2021/10/26/%E7%99%BE%E5%BA%A6%E4%B8%80%E9%9D%A2%E6%80%BB%E7%BB%93/"/>
      <url>/2021/10/26/%E7%99%BE%E5%BA%A6%E4%B8%80%E9%9D%A2%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一面总结"><a href="#一面总结" class="headerlink" title="一面总结"></a>一面总结</h1><blockquote><p>真传一句话，假传万卷书。先说结论，一面很基础，很基础，很基础！还有某一点可能会问的很深！（我是废物答得不是很好，应该挂了）下面看看都问了啥吧。</p></blockquote><h2 id="1-css单位"><a href="#1-css单位" class="headerlink" title="1.css单位"></a>1.css单位</h2><blockquote><p>CSS 有几种表示长度的不同单位。</p><p>许多 CSS 属性接受“长度”值，诸如 width、margin、padding、font-size 等。</p><p>长度是一个后面跟着长度单位的数字，诸如 <code>10px</code>、<code>2em</code> 等。（来自w3chool <a href="https://www.w3school.com.cn/cssref/css_units.asp">原文链接-CSS 单位 </a> ）</p></blockquote><h3 id="绝对单位"><a href="#绝对单位" class="headerlink" title="绝对单位"></a>绝对单位</h3><p>绝对长度单位是固定的，用任何一个绝对长度表示的长度都将恰好显示为这个尺寸。</p><p>不建议在屏幕上使用绝对长度单位，因为屏幕尺寸变化很大。但是，如果已知输出介质，则可以使用它们，例如用于打印布局（print layout）。</p><table><thead><tr><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>cm</td><td>厘米</td></tr><tr><td>mm</td><td>毫米</td></tr><tr><td>in</td><td>英寸 (1in = 96px = 2.54cm)</td></tr><tr><td>px *</td><td>像素 (1px = 1/96th of 1in)</td></tr><tr><td>pt</td><td>点 (1pt = 1/72 of 1in)</td></tr><tr><td>pc</td><td>派卡 (1pc = 12 pt)</td></tr></tbody></table><p> ***** 像素（px）是相对于观看设备的。对于低 dpi 的设备，1px 是显示器的一个设备像素（点）。对于打印机和高分辨率屏幕，1px 表示多个设备像素。 </p><h3 id="相对单位"><a href="#相对单位" class="headerlink" title="相对单位"></a>相对单位</h3><p> 相对长度单位规定相对于另一个长度属性的长度。相对长度单位在不同渲染介质之间缩放表现得更好。 </p><table><thead><tr><th>单位</th><th>描述</th></tr></thead><tbody><tr><td>em</td><td>相对于元素的字体大小（font-size）（2em 表示当前字体大小的 2 倍）</td></tr><tr><td>ex</td><td>相对于当前字体的 x-height(极少使用)</td></tr><tr><td>ch</td><td>相对于 “0”（零）的宽度</td></tr><tr><td>rem</td><td>相对于根元素的字体大小（font-size）</td></tr><tr><td>vw</td><td>相对于视口*宽度的 1%</td></tr><tr><td>vh</td><td>相对于视口*高度的 1%</td></tr><tr><td>vmin</td><td>相对于视口*较小尺寸的 1％</td></tr><tr><td>vmax</td><td>相对于视口*较大尺寸的 1％</td></tr><tr><td>%</td><td>相对于父元素</td></tr></tbody></table><div class="note success flat"><p><strong>提示：</strong>em 和 rem 单元可用于创建完美的可扩展布局！</p><p>***** 视口（Viewport）= 浏览器窗口的尺寸。如果视口宽 50 里面，则 1vw = 0.5cm。</p></div><h3 id="说一下对rem和em的认识和区别"><a href="#说一下对rem和em的认识和区别" class="headerlink" title="说一下对rem和em的认识和区别"></a>说一下对rem和em的认识和区别</h3><ul><li>rem基于html元素的字体大小来决定</li><li>em根据使用它的元素的大小决定 </li></ul><p><strong>区别：</strong></p><ul><li>rem 单位翻译为像素值是由 html 元素的字体大小决定的。 此字体大小会被浏览器中字体大小的设置影响，除非显式重写一个具体单位。</li><li>em 单位转为像素值，取决于他们使用的字体大小。 此字体大小受从父元素继承过来的字体大小影响，除非显式重写一个具体单位。</li></ul><h2 id="2-事件委托"><a href="#2-事件委托" class="headerlink" title="2.事件委托"></a>2.事件委托</h2><div class="note success flat"><p>原文连接：<a href="https://zhuanlan.zhihu.com/p/26536815"> JavaScript 事件委托详解https://zhuanlan.zhihu.com/p/26536815</a></p></div><p><strong>基本概念：</strong>事件委托，通俗地来讲，就是把一个元素响应事件（click、keydown……）的函数委托到另一个元素；</p><p>一般来讲，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，当事件响应到需要绑定的元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。</p><p> <strong>事件冒泡：</strong> 在 document.addEventListener 的时候我们可以设置事件模型：事件冒泡、事件捕获，一般来说都是用事件冒泡的模型； </p><p><img src="https://pic1.zhimg.com/80/v2-bf3b8dbab027713a2b21b9e8a5b7a6c4_720w.jpg" alt=""></p><p> 如上图所示，事件模型是指分为三个阶段： </p><ul><li><p>捕获阶段：在事件冒泡的模型中，捕获阶段不会响应任何事件；</p></li><li><p>目标阶段：目标阶段就是指事件响应到触发事件的最底层元素上；</p></li><li><p>冒泡阶段：冒泡阶段就是事件的触发响应会从最底层目标一层层地向外到最外层（根节点），事件代理即是利</p><p>用事件冒泡的机制把里层所需要响应的事件绑定到外层；### 事件</p><p><strong>委托的优点</strong> </p></li></ul><ol><li><p>减少内存消耗</p><p>试想一下，若果我们有一个列表，列表之中有大量的列表项，我们需要在点击列表项的时候响应一个事件；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item n<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">// ...... 代表中间还有未知数个 li</span><br></pre></td></tr></table></figure><p>如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的，效率上需要消耗很多性能；</p><p>因此，比较好的方法就是把这个点击事件绑定到他的父层，也就是 <code>ul</code> 上，然后在执行事件的时候再去匹配判断目标元素；</p><p>所以事件委托可以减少大量的内存消耗，节约效率。</p></li><li><p>动态绑定事件 </p><p>比如上述的例子中列表项就几个，我们给每个列表项都绑定了事件；</p><p>在很多时候，我们需要通过 AJAX 或者用户操作动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件；</p><p>如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的；</p><p>所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。</p></li></ol><p><strong>基本实现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给父层元素绑定事件</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 兼容性处理</span></span><br><span class="line">    <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">    <span class="comment">// 判断是否匹配目标元素</span></span><br><span class="line">    <span class="keyword">if</span> (target.nodeName.toLocaleLowerCase() === <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;the content is: &#x27;</span>, target.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 在上述代码中， target 元素则是在 #list 元素之下具体被点击的元素，然后通过判断 target 的一些属性（比如：nodeName，id 等等）可以更精确地匹配到某一类 #list li 元素之上； </p><h2 id="3-深浅拷贝"><a href="#3-深浅拷贝" class="headerlink" title="3.深浅拷贝"></a>3.深浅拷贝</h2><div class="note success flat"><p>原文连接： <a href="https://zhuanlan.zhihu.com/p/56741046">浅拷贝与深拷贝https://zhuanlan.zhihu.com/p/56741046</a> </p></div><blockquote><p>补充：</p><p><strong>数据类型</strong>数据分为基本数据类型(String, Number, Boolean, Null, Undefined，Symbol)和引用数据类型。 </p><ul><li><p>基本数据类型的特点：直接存储在栈(stack)中的数据</p></li><li><p>引用数据类型的特点：<strong>存储的是该对象在栈中引用，真实的数据存放在堆内存里</strong></p></li></ul><p>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p><p><img src="https://pic3.zhimg.com/80/v2-fbd51464dadc4829abe0e3d07dc80212_720w.jpg" alt=""></p></blockquote><p> <strong>深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的</strong>。 </p><table><thead><tr><th></th><th>和原数组是否指向同一对象</th><th>第一层数据为基本数据类型</th><th>原数据中包含子对象</th></tr></thead><tbody><tr><td>赋值</td><td>是</td><td>改变会使原数据一同改变</td><td>改变会使原数据一同改变</td></tr><tr><td>浅拷贝</td><td>否</td><td>改变<strong>不</strong>会使原数据一同改变</td><td>改变会使原数据一同改变</td></tr><tr><td>深拷贝</td><td>否</td><td>改变<strong>不</strong>会使原数据一同改变</td><td>改变<strong>不</strong>会使原数据一同改变</td></tr></tbody></table><h3 id="浅拷贝的实现方式"><a href="#浅拷贝的实现方式" class="headerlink" title="浅拷贝的实现方式"></a>浅拷贝的实现方式</h3><ol><li><p>Object.assign()</p><p> Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign()进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: &#123;<span class="attr">a</span>: <span class="string">&quot;kobe&quot;</span>, <span class="attr">b</span>: <span class="number">39</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> initalObj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line">initalObj.a.a = <span class="string">&quot;wade&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a.a); <span class="comment">//wade</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;kobe&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;,obj);</span><br><span class="line">obj2.username = <span class="string">&#x27;wade&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//&#123;username: &quot;kobe&quot;&#125;</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>注意：<strong>当object只有一层的时候，是深拷贝</strong> </p></div></li><li><p>Array.prototype.concat()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;kobe&#x27;</span></span><br><span class="line">    &#125;];</span><br><span class="line"><span class="keyword">let</span> arr2=arr.concat();    </span><br><span class="line">arr2[<span class="number">2</span>].username = <span class="string">&#x27;wade&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//&#123;username: &quot;wade&quot;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Array.prototype.slice()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27; kobe&#x27;</span></span><br><span class="line">    &#125;];</span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice();</span><br><span class="line">arr3[<span class="number">2</span>].username = <span class="string">&#x27;wade&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//&#123;username: &quot;wade&quot;&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>关于Array的slice和concat方法的补充说明</strong>：Array的slice和concat方法不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。 slice拷贝规则和Object.assign()，如果值是对象引用拷贝之后指向同一对象，如果是基本类型则不影响另一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27; kobe&#x27;</span></span><br><span class="line">    &#125;];</span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice();</span><br><span class="line">arr3[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr,arr3);<span class="comment">// arr[1]=1</span></span><br></pre></td></tr></table></figure><h3 id="深拷贝的实现方式"><a href="#深拷贝的实现方式" class="headerlink" title="深拷贝的实现方式"></a>深拷贝的实现方式</h3><ol><li><p>JSON.parse(JSON.stringify())</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27; kobe&#x27;</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr4 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr));</span><br><span class="line">arr4[<span class="number">2</span>].username = <span class="string">&#x27;duncan&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(arr, arr4)</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/5bARIg"><img src="https://z3.ax1x.com/2021/10/27/5bARIg.png" alt="5bARIg.png"></a></p><p>原理： 用JSON.stringify将对象转成JSON字符串，再用JSON.parse()把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。 </p><p> <strong>这种方法虽然可以实现数组或对象深拷贝,但不能处理函数</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27; kobe&#x27;</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;];</span><br><span class="line"><span class="keyword">let</span> arr4 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr));</span><br><span class="line">arr4[<span class="number">2</span>].username = <span class="string">&#x27;duncan&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(arr, arr4)</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/5bEidO"><img src="https://z3.ax1x.com/2021/10/27/5bEidO.png" alt="5bEidO.png"></a></p><p> 这是因为JSON.stringify() 方法是将一个JavaScript值(对象或者数组)转换为一个 JSON字符串，不能接受函数 </p></li><li><p>手写递归方法</p><p> 递归方法实现深度克隆原理：<strong>遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义检测数据类型的功能函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkedType</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(target).slice(<span class="number">8</span>, -<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实现深度克隆---对象/数组</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//判断拷贝的数据类型</span></span><br><span class="line">      <span class="comment">//初始化变量result 成为最终克隆的数据</span></span><br><span class="line">      <span class="keyword">let</span> result, targetType = checkedType(target)</span><br><span class="line">      <span class="keyword">if</span> (targetType === <span class="string">&#x27;Object&#x27;</span>) &#123;</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetType === <span class="string">&#x27;Array&#x27;</span>) &#123;</span><br><span class="line">        result = []</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//遍历目标数据</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="comment">//获取遍历数据结构的每一项值。</span></span><br><span class="line">        <span class="keyword">let</span> value = target[i]</span><br><span class="line">        <span class="comment">//判断目标结构里的每一值是否存在对象/数组</span></span><br><span class="line">        <span class="keyword">if</span> (checkedType(value) === <span class="string">&#x27;Object&#x27;</span> ||</span><br><span class="line">          checkedType(value) === <span class="string">&#x27;Array&#x27;</span>) &#123; <span class="comment">//对象/数组里嵌套了对象/数组</span></span><br><span class="line">          <span class="comment">//继续遍历获取到value值</span></span><br><span class="line">          result[i] = clone(value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//获取到value值是基本的数据类型或者是函数。</span></span><br><span class="line">          result[i] = value;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>函数库lodash</p><p> 该函数库也有提供_.cloneDeep用来做 Deep Copy </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123; <span class="attr">f</span>: &#123; <span class="attr">g</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">    <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = _.cloneDeep(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj1.b.f === obj2.b.f);</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-Event-Loop（事件循环）机制"><a href="#4-Event-Loop（事件循环）机制" class="headerlink" title="4.Event Loop（事件循环）机制"></a>4.Event Loop（事件循环）机制</h2><blockquote><p> 我们都知道，javascript从诞生之日起就是一门单线程的非阻塞的脚本语言。这是由其最初的用途来决定的：与浏览器交互。 </p><p> 单线程是必要的，也是javascript这门语言的基石，原因之一在其最初也是最主要的执行环境——浏览器中，我们需要进行各种各样的dom操作。试想一下 如果javascript是多线程的，那么当两个线程同时对dom进行一项操作，例如一个向其添加事件，而另一个删除了这个dom，此时该如何处理呢？因此，为了保证不会 发生类似于这个例子中的情景，javascript选择只用一个主线程来执行代码，这样就保证了程序执行的一致性。</p></blockquote><div class="note success flat"><p>原文链接： <a href="https://zhuanlan.zhihu.com/p/33058983">详解JavaScript中的Event Loop（事件循环）机制 - 知乎 (zhihu.com)</a> </p></div><h3 id="浏览器环境下js引擎的事件循环机制"><a href="#浏览器环境下js引擎的事件循环机制" class="headerlink" title="浏览器环境下js引擎的事件循环机制"></a>浏览器环境下js引擎的事件循环机制</h3><ol><li><p>执行栈与事件队列</p><p> 我们知道，当我们调用一个方法的时候，js会生成一个与这个方法对应的执行环境（context），又叫执行上下文。这个执行环境中存在着这个方法的私有作用域，上层作用域的指向，方法的参数，这个作用域中定义的变量以及这个作用域的this对象。 而当一系列方法被依次调用的时候，因为js是单线程的，同一时间只能执行一个方法，于是这些方法被排队在一个单独的地方。这个地方被称为执行栈。 </p></li></ol><p><img src="https://pic2.zhimg.com/v2-2f761eb83b50f53d741e6aa1f15a9db1_b.webp" alt=""> </p><p> js引擎遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列，我们称之为事件队列。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，这样就形成了一个无限的循环。这就是这个过程被称为“事件循环（Event Loop）”的原因。 </p><p> 这里还有一张图来展示这个过程： </p><p><img src="https://pic4.zhimg.com/80/v2-da078fa3eadf3db4bf455904ae06f84b_720w.jpg" alt=""></p><ol start="2"><li><p>macro task与micro task</p><p> 以上的事件循环过程是一个宏观的表述，实际上因为异步任务之间并不相同，因此他们的执行优先级也有区别。不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）。 </p><p>以下事件属于宏任务：</p><ul><li><code>setInterval()</code></li><li><code>setTimeout()</code></li></ul><p>以下事件属于微任务</p><ul><li><code>new Promise()</code></li><li><code>new MutaionObserver()</code></li></ul><p>前面我们介绍过，在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去。并且在当前执行栈为空的时候，主线程会 查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p><p>我们只需记住<strong>当当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行</strong>。</p></li></ol><p>这样就能解释下面这段代码的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    resolve(<span class="number">3</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//结果为2 3 1</span></span><br></pre></td></tr></table></figure><h2 id="5-DOCTYPE的作用"><a href="#5-DOCTYPE的作用" class="headerlink" title="5.DOCTYPE的作用"></a>5.DOCTYPE的作用</h2><blockquote><h2 id="什么是doctype？"><a href="#什么是doctype？" class="headerlink" title="什么是doctype？"></a>什么是doctype？</h2><p>doctype是一种标准通用标记语言的文档类型声明，目的是告诉标准通用标记语言解析器要使用什么样的文档类型定义（DTD）来解析文档。</p><!DOCTYPE><p>声明是用来指示web浏览器关于页面使用哪个HTML版本进行编写的指令。</p><!DOCTYPE><p>声明必须是HTML文档的第一行，位于html标签之前。</p><p>浏览器本身分为两种模式，一种是标准模式，一种是怪异模式，浏览器通过doctype来区分这两种模式，doctype在html中的作用就是触发浏览器的标准模式，如果html中省略了doctype，浏览器就会进入到Quirks模式的怪异状态，在这种模式下，有些样式会和标准模式存在差异，而html标准和dom标准值规定了标准模式下的行为，没有对怪异模式做出规定，因此不同浏览器在怪异模式下的处理也是不同的，所以一定要在html开头使用doctype。</p></blockquote><div class="note success flat"><p>原文链接：  <a href="https://zhuanlan.zhihu.com/p/32609899">doctype的作用 - 知乎 (zhihu.com)</a> </p></div><h3 id="HTML4-01的doctype"><a href="#HTML4-01的doctype" class="headerlink" title="HTML4.01的doctype"></a>HTML4.01的doctype</h3><p>在HTML4.01中，&lt;!DOCTYPE&gt;声明引用DTD，因为HTML4.01基于SGML。DTD规定了标记语言的规则，这样浏览器才能正确的呈现内容。在HTML4.01中有三种&lt;!DOCTYPE&gt;声明。</p><p><strong>严格模式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;  &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>过渡模式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;  &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>框架模式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;  &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="HTML5的doctype"><a href="#HTML5的doctype" class="headerlink" title="HTML5的doctype"></a>HTML5的doctype</h3><p>HTML5不基于SGML，所以不需要引用DTD。在HTML5中&lt;!DOCTYPE&gt;只有一种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;！DOCTYPE html&gt;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>扩展：  <strong>utf-8作用：</strong>字符编码是一种将字节转换为字符的方法。要验证或显示HTML文档，程序必须选择字符编码。在页面中，我们可以设置“utf-8”的编码，来防止中文乱码。 </p></div><h2 id="vue双向绑定原理"><a href="#vue双向绑定原理" class="headerlink" title="vue双向绑定原理"></a>vue双向绑定原理</h2><p>Vue数据双向绑定原理是通过数据劫持结合发布者-订阅者模式的方式来实现的，首先是对数据进行监听，然后当监听的属性发生变化时则告诉订阅者是否要更新，若更新就会执行对应的更新函数从而更新视图</p><p><img src="https://pic2.zhimg.com/80/v2-10f94b6de4ff367903ea4c8c8aa6e865_720w.jpg" alt="img"></p><div class="note success flat"><p>原文链接：  <a href="https://zhuanlan.zhihu.com/p/138710460">如何理解vue数据双向绑定原理 - 知乎 (zhihu.com)</a> </p></div><h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>以往的MVC模式是单向绑定，即Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新</p><p><img src="https://pic3.zhimg.com/80/v2-379cb77a473bf0c7c449f701b8a17ffe_720w.jpg" alt="img"></p><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><p>MVVM模式就是Model–View–ViewModel模式。它实现了View的变动，自动反映在 ViewModel，反之亦然。对于双向绑定的理解，就是用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定。再说细点，就是在单向绑定的基础上给可输入元素input、textare等添加了change(input)事件,(change事件触发，View的状态就被更新了)来动态修改model。</p><p><img src="https://pic3.zhimg.com/80/v2-10c092ce5f24e44625165228cd4f245e_720w.jpg" alt="img"></p><h3 id="双向绑定原理"><a href="#双向绑定原理" class="headerlink" title="双向绑定原理"></a>双向绑定原理</h3><p>vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的</p><p>我们已经知道实现数据的双向绑定，首先要对数据进行劫持监听，所以我们需要设置一个监听器Observer，用来监听所有属性。如果属性发上变化了，就需要告诉订阅者Watcher看是否需要更新。因为订阅者是有很多个，所以我们需要有一个消息订阅器Dep来专门收集这些订阅者，然后在监听器Observer和订阅者Watcher之间进行统一管理的。接着，我们还需要有一个指令解析器Compile，对每个节点元素进行扫描和解析，将相关指令（如v-model，v-on）对应初始化成一个订阅者Watcher，并替换模板数据或者绑定相应的函数，此时当订阅者Watcher接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。</p><p><strong>因此接下去我们执行以下3个步骤，实现数据的双向绑定：</strong></p><ul><li>实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。</li><li>实现一个订阅者Watcher，每一个Watcher都绑定一个更新函数，watcher可以收到属性的变化通知并执行相应的函数，从而更新视图。</li><li>实现一个解析器Compile，可以扫描和解析每个节点的相关指令（v-model，v-on等指令），如果节点存在v-model，v-on等指令，则解析器Compile初始化这类节点的模板数据，使之可以显示在视图上，然后初始化相应的订阅者（Watcher）。</li></ul><p><img src="https://pic3.zhimg.com/80/v2-f356f2023758b0a503e4200596f941de_720w.jpg" alt="img"></p><h2 id="computed和watch区别"><a href="#computed和watch区别" class="headerlink" title="computed和watch区别"></a>computed和watch区别</h2><div class="note success flat"><p>原文链接：<a href="https://www.jianshu.com/p/5f83e06ae32f">VUE computed和watch的区别 - 简书 (jianshu.com)</a> </p></div><h3 id="计算属性computed："><a href="#计算属性computed：" class="headerlink" title="计算属性computed："></a>计算属性computed：</h3><ul><li>支持缓存，只有依赖数据发生改变，才会重新进行计算</li><li>不支持异步，当computed内有异步操作时无效，无法监听数据的变化</li><li>computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值</li><li>如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed</li><li>如果computed属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。</li></ul><h3 id="侦听属性watch："><a href="#侦听属性watch：" class="headerlink" title="侦听属性watch："></a>侦听属性watch：</h3><ul><li>不支持缓存，数据变，直接会触发相应的操作；</li><li>watch支持异步；</li><li>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</li><li>当一个属性发生变化时，需要执行对应的操作；一对多；</li><li>监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数：</li></ul><h3 id="immediate：组件加载立即触发回调函数执行"><a href="#immediate：组件加载立即触发回调函数执行" class="headerlink" title="immediate：组件加载立即触发回调函数执行"></a>immediate：组件加载立即触发回调函数执行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  firstName: &#123;</span><br><span class="line">    handler(newName, oldName) &#123;</span><br><span class="line">      this.fullName = newName + &#x27; &#x27; + this.lastName;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 代表在wacth里声明了firstName这个方法之后立即执行handler方法</span><br><span class="line">    immediate: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>deep: deep的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改obj里面任何一个属性都会触发这个监听器里的 handler</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  obj: &#123;</span><br><span class="line">    handler(newName, oldName) &#123;</span><br><span class="line">      console.log(&#x27;obj.a changed&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    immediate: true,</span><br><span class="line">    deep: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue插槽（slot）"><a href="#vue插槽（slot）" class="headerlink" title="vue插槽（slot）"></a>vue插槽（slot）</h2><div class="note success flat"><p>原文链接：<a href="https://zhuanlan.zhihu.com/p/114502325">vue插槽（slot）详解 - 知乎 (zhihu.com)</a> </p></div><h3 id="slot-父组件-在子组件-处插入内容"><a href="#slot-父组件-在子组件-处插入内容" class="headerlink" title="slot (父组件 在子组件 处插入内容)"></a>slot (父组件 在子组件<slot> </slot>处插入内容)</h3><p>Vue 实现了一套内容分发的 API，将<code>slot</code>元素作为承载分发内容的出口，这是vue文档上的说明。具体来说，slot就是可以让你在组件内添加内容的‘空间’。举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//子组件 ： (假设名为：ebutton)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &#x27;button&#x27;&gt;</span><br><span class="line">      &lt;button&gt;  &lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">//父组件：（引用子组件 ebutton）</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &#x27;app&#x27;&gt;</span><br><span class="line">     &lt;ebutton&gt; &lt;/ebutton&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>我们知道，如果直接想要在父组件中的<ebutton></ebutton> 中添加内容，是不会在页面上渲染的。那么我们如何使添加的内容能够显示呢？在子组件内添加slot 即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//子组件 ： (假设名为：ebutton)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &quot;button&quot;&gt;</span><br><span class="line">      &lt;button&gt;&lt;/button&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;       //slot 可以放在任意位置。（这个位置就是父组件添加内容的显示位置）</span><br><span class="line">  &lt;/div&gt; </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>子组件可以在任意位置添加slot , 这个位置就是父组件添加内容的显示位置。</p><h3 id="编译作用域-（父组件-在子组件-处插入-data）"><a href="#编译作用域-（父组件-在子组件-处插入-data）" class="headerlink" title="编译作用域 （父组件 在子组件 处插入 data）"></a>编译作用域 （父组件 在子组件<slot> </slot>处插入 data）</h3><p>上面我们了解了，slot 其实就是能够让我们在父组件中添加内容到子组件的‘空间’。我们可以添加父组件内任意的data值，比如这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//父组件：（引用子组件 ebutton）</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &#x27;app&#x27;&gt;</span><br><span class="line">     &lt;ebutton&gt; &#123;&#123; parent &#125;&#125;&lt;/ebutton&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&#x27;.app&#x27;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    parent:&#x27;父组件&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用数据的语法完全没有变，但是，我们能否直接使用子组件内的数据呢？显然不行！！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 子组件 ： (假设名为：ebutton)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &#x27;button&#x27;&gt;</span><br><span class="line">      &lt;button&gt; &lt;/button&gt;</span><br><span class="line">       &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&#x27;.button&#x27;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    child:&#x27;子组件&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 父组件：（引用子组件 ebutton）</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &#x27;app&#x27;&gt;</span><br><span class="line">     &lt;ebutton&gt; &#123;&#123; child &#125;&#125;&lt;/ebutton&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>直接传入子组件内的数据是不可以的。因为：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p><h3 id="后备内容-子组件-设置默认值"><a href="#后备内容-子组件-设置默认值" class="headerlink" title="后备内容 (子组件 设置默认值)"></a>后备内容 (子组件<slot> </slot>设置默认值)</h3><p>所谓的后背内容，其实就是slot的默认值，有时我没有在父组件内添加内容，那么 slot就会显示默认值，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//子组件 ： (假设名为：ebutton)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &#x27;button&#x27;&gt;</span><br><span class="line">      &lt;button&gt;  &lt;/button&gt;</span><br><span class="line">      &lt;slot&gt; 这就是默认值 &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽-（子组件-多个-对应插入内容）"><a href="#具名插槽-（子组件-多个-对应插入内容）" class="headerlink" title="具名插槽 （子组件 多个  对应插入内容）"></a>具名插槽 （子组件 多个<slot ></slot> <slot></slot> 对应插入内容）</h3><p>有时候，也许子组件内的slot不止一个，那么我们如何在父组件中，精确的在想要的位置，插入对应的内容呢？ 给插槽命一个名即可，即添加name属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//子组件 ： (假设名为：ebutton)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &#x27;button&#x27;&gt;</span><br><span class="line">      &lt;button&gt;  &lt;/button&gt;</span><br><span class="line">      &lt;slot name= &#x27;one&#x27;&gt; 这就是默认值1&lt;/slot&gt;</span><br><span class="line">      &lt;slot name=&#x27;two&#x27;&gt; 这就是默认值2 &lt;/slot&gt;</span><br><span class="line">      &lt;slot name=&#x27;three&#x27;&gt; 这就是默认值3 &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>父组件通过v-slot : name 的方式添加内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//父组件：（引用子组件 ebutton）</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &#x27;app&#x27;&gt;</span><br><span class="line">     &lt;ebutton&gt; </span><br><span class="line">        &lt;template v-slot:one&gt; 这是插入到one插槽的内容 &lt;/template&gt;</span><br><span class="line">        &lt;template v-slot:two&gt; 这是插入到two插槽的内容 &lt;/template&gt;</span><br><span class="line">        &lt;template v-slot:three&gt; 这是插入到three插槽的内容 &lt;/template&gt;</span><br><span class="line">     &lt;/ebutton&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>当然 vue 为了方便，书写 v-slot:one 的形式时，可以简写为 #one</p><h3 id="作用域插槽-父组件-在子组件-处使用子组件-data"><a href="#作用域插槽-父组件-在子组件-处使用子组件-data" class="headerlink" title="作用域插槽 ( 父组件 在子组件   处使用子组件 data)"></a>作用域插槽 ( 父组件 在子组件 <slot> </slot> 处使用子组件 data)</h3><p>通过slot 我们可以在父组件为子组件添加内容，通过给slot命名的方式，我们可以添加不止一个位置的内容。但是我们添加的数据都是父组件内的。上面我们说过不能直接使用子组件内的数据，但是我们是否有其他的方法，让我们能够使用子组件的数据呢？ 其实我们也可以使用v-slot的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//子组件 ： (假设名为：ebutton)</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &#x27;button&#x27;&gt;</span><br><span class="line">      &lt;button&gt;  &lt;/button&gt;</span><br><span class="line">      &lt;slot name= &#x27;one&#x27; :value1=&#x27;child1&#x27;&gt; 这就是默认值1&lt;/slot&gt;    //绑定child1的数据</span><br><span class="line">      &lt;slot :value2=&#x27;child2&#x27;&gt; 这就是默认值2 &lt;/slot&gt;  //绑定child2的数据，这里我没有命名slot</span><br><span class="line">  &lt;/div&gt;           </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el:&#x27;.button&#x27;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    child1:&#x27;数据1&#x27;,</span><br><span class="line">    child2:&#x27;数据2&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//父组件：（引用子组件 ebutton）</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class= &#x27;app&#x27;&gt;</span><br><span class="line">     &lt;ebutton&gt; </span><br><span class="line">        &lt;template v-slot:one = &#x27;slotone&#x27;&gt;  </span><br><span class="line">           &#123;&#123; slotone.value1 &#125;&#125;    // 通过v-slot的语法 将子组件的value1值赋值给slotone </span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template v-slot:default = &#x27;slottwo&#x27;&gt; </span><br><span class="line">           &#123;&#123; slottwo.value2 &#125;&#125;  // 同上，由于子组件没有给slot命名，默认值就为default</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">     &lt;/ebutton&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>总结来说就是：</p><ul><li>首先在子组件的slot上动态绑定一个值( :key=’value’)</li><li>然后在父组件通过v-slot : name = ‘values ’的方式将这个值赋值给 values</li><li>最后通过的方式获取数据</li></ul><h2 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h2><p>相关推荐</p><ul><li><p><a href="https://www.jianshu.com/p/d9c20eafa67e">前端页面性能优化 - 简书 (jianshu.com)</a> </p></li><li><p><a href="https://www.wangxe.top/2020/07/25/前端页面优化/">前端页面优化 | Wangxe</a> </p></li></ul><h1 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h1><h2 id="异步加载图片"><a href="#异步加载图片" class="headerlink" title="异步加载图片"></a>异步加载图片</h2><blockquote><p>概述： 异步加载：也称为图片的预加载。利用js代码提前加载图片，用户需要时可以直接从本地缓存获取，但是会增加服务器前端的压力。这样做可以提高用户的体验，因为同步加载大图片的时候，图片会一层一层的显示处理，但是经过预加载后，直接显示出整张图片。但是在图片响应时间上优化不是那么明显。 </p></blockquote><div class="note success flat"><p>原文链接： <a href="https://blog.csdn.net/Szu_AKer/article/details/52885874">JS实现图片的异步加载_webnoob-CSDN博客</a> </p></div><p><strong>基本形式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params">id,url,callback</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">            img.src = url;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 图片存在缓存中</span></span><br><span class="line">            <span class="keyword">if</span>(img.complete)&#123;</span><br><span class="line">                callback(id,url);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 图片加载到浏览器的缓存中回调函数</span></span><br><span class="line">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                callback(id,url);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><p> 利用预加载显示3张1980*1080的图片，正常加载的话会慢慢显示出来。而用预加载的话，等一会3张基本同时显示出来。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;img_box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;http://wozien.com/img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;http://wozien.com/img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;http://wozien.com/img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params">obj,url,callback</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">            img.src = url;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 判断图片是否在缓存中</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(img.complete)&#123;</span></span><br><span class="line"><span class="javascript">                callback.call(img,obj);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 图片加载到浏览器的缓存中回调函数</span></span></span><br><span class="line"><span class="javascript">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                callback.call(img,obj);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showImage</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            obj.src = <span class="built_in">this</span>.src;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;imgs.length;i++)</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> url = imgs[i].dataset.src;</span></span><br><span class="line"><span class="javascript">            loadImage(imgs[i],url,showImage);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="js实现数组的filter方法"><a href="#js实现数组的filter方法" class="headerlink" title="js实现数组的filter方法"></a>js实现数组的filter方法</h2><div class="note success flat"><p>原文链接： <a href="https://blog.csdn.net/beijiyang999/article/details/80179594">JavaScript 实现 filter() 方法函数_Beijiyang-CSDN博客</a> </p></div><p><strong>思路</strong><br>filter 方法接收两个参数：</p><ul><li>对每一项执行的函数<br>该函数接收三个参数：<br>数组项的值<br>数组项的下标<br>数组对象本身</li><li>指定 this 的作用域对象</li></ul><p>filter 方法返回 执行结果为true的项组成的数组。</p><p>代码表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arr</span>)</span>&#123;&#125;, context)</span><br></pre></td></tr></table></figure><p><strong>实现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.fakeFilter = <span class="function"><span class="keyword">function</span> <span class="title">fakeFilter</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`<span class="subst">$&#123;fn&#125;</span> is not a function`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">let</span> temp = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = fn.call(context, arr[i], i, arr);</span><br><span class="line">    <span class="keyword">if</span> (result) temp.push(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmgirls爬取经验</title>
      <link href="/2020/08/23/vmgirls/"/>
      <url>/2020/08/23/vmgirls/</url>
      
        <content type="html"><![CDATA[<h1 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h1><p>首先我们要导入此次需要用到的模块</p><ul><li><p>requests是使用Apache2 licensed 许可证的HTTP库。比urllib2模块更简洁。</p><p>Request支持HTTP连接保持和连接池，支持使用cookie保持会话，支持文件上传，支持自动响应内容的编码，支持国际化的URL和POST数据自动编码。</p><p>在python内置模块的基础上进行了高度的封装，从而使得python进行网络请求时，变得人性化，使用Requests可以轻而易举的完成浏览器可有的任何操作。</p><p>现代，国际化，友好。</p><p>requests会自动实现持久连接keep-alive</p></li><li><p>parsel主要用来将请求后的字符串格式解析成re,xpath,css进行内容的匹配</p></li><li><p>os模块提供了非常丰富的方法用来处理文件和目录。</p></li><li><p>time时间模块，用于设定延时，避免网站崩溃</p></li><li><p>urllib.parse 模块提供了很多解析和组建 URL 的函数。由于网页中所有的图片都采用相对路径，所以需要用到urljoin函数将网址进行整合。</p></li></ul><p><strong>相关代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> parsel</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br></pre></td></tr></table></figure><h1 id="请求头与网址"><a href="#请求头与网址" class="headerlink" title="请求头与网址"></a>请求头与网址</h1><p>由于网站采取了一定的反爬机制，我们要用<code>user-agent</code>进行伪装。</p><p><strong>相关代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers =&#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;https://www.vmgirls.com/13344.html&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="请求网页"><a href="#请求网页" class="headerlink" title="请求网页"></a>请求网页</h1><p>使用requests模块中的get（）函数来模拟访问并将得到的内容保存在变量response中，并将获得的网页内容用文本形式显示出来。</p><p>相关代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line">html = response.text</span><br></pre></td></tr></table></figure><h1 id="解析网页"><a href="#解析网页" class="headerlink" title="解析网页"></a>解析网页</h1><p>利用 XPath 进行 HTML 的解析，获取想要得到的图片地址列表<code>data_list</code>与文件夹名<code>dir_name</code></p><p><strong>相关代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line">pars = parsel.Selector(html)</span><br><span class="line">data_list = pars.xpath(<span class="string">&#x27;//div[@class=&quot;nc-light-gallery&quot;]/p/a/@href&#x27;</span>).getall()</span><br><span class="line"><span class="comment"># 获取文件夹名</span></span><br><span class="line">dir_name = pars.xpath(<span class="string">&#x27;//div[@class=&quot;nc-light-gallery&quot;]/p/a/img/@alt&#x27;</span>).get()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">    os.mkdir(dir_name)</span><br></pre></td></tr></table></figure><h1 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h1><p>保存图片数据到本地</p><ul><li>加一秒延迟，防止网站崩溃。</li><li>将获取到的相对路径转为绝对路径</li><li>将数据以二进制形式保存</li><li>设置文件夹名文件名</li></ul><p><strong>相关代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> data_list:</span><br><span class="line">    <span class="comment"># 加一秒延迟</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 相对路径转为绝对路径</span></span><br><span class="line">    img_url = parse.urljoin(<span class="string">&#x27;http://www.vmgirls.com/&#x27;</span>, img)</span><br><span class="line">    data = requests.get(url=img_url, headers=headers).content</span><br><span class="line">    <span class="comment"># 获取图片名</span></span><br><span class="line">    file_name = img_url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(dir_name + <span class="string">&#x27;/&#x27;</span> + file_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在保存&#x27;</span>, file_name)</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> parsel</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="comment"># 请求头与网址</span></span><br><span class="line">headers =&#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;https://www.vmgirls.com/13344.html&#x27;</span></span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line">pars = parsel.Selector(html)</span><br><span class="line">data_list = pars.xpath(<span class="string">&#x27;//div[@class=&quot;nc-light-gallery&quot;]/p/a/@href&#x27;</span>).getall()</span><br><span class="line"><span class="comment"># 获取文件夹名</span></span><br><span class="line">dir_name = pars.xpath(<span class="string">&#x27;//div[@class=&quot;nc-light-gallery&quot;]/p/a/img/@alt&#x27;</span>).get()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">    os.mkdir(dir_name)</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> data_list:</span><br><span class="line">    <span class="comment"># 加一秒延迟</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 相对路径转为绝对路径</span></span><br><span class="line">    img_url = parse.urljoin(<span class="string">&#x27;http://www.vmgirls.com/&#x27;</span>, img)</span><br><span class="line">    data = requests.get(url=img_url, headers=headers).content</span><br><span class="line">    <span class="comment"># 获取图片名</span></span><br><span class="line">    file_name = img_url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(dir_name + <span class="string">&#x27;/&#x27;</span> + file_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在保存&#x27;</span>, file_name)</span><br></pre></td></tr></table></figure><h1 id="爬取成功"><a href="#爬取成功" class="headerlink" title="爬取成功"></a>爬取成功</h1><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe/img/vmgirls.png" alt=""></p><h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers =&#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url_ = <span class="string">&#x27;https://www.vmgirls.com/13344.html&#x27;</span></span><br><span class="line">response = requests.get(url=url_, headers=headers)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="comment"># 获取文件夹名</span></span><br><span class="line">dir_name = re.findall(<span class="string">&#x27;&lt;h1 class=&quot;post-title h3&quot;&gt;(.*?)&lt;/h1&gt;&#x27;</span>, html)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">    os.mkdir(dir_name)</span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line">urls = re.findall(<span class="string">&#x27;&lt;a href=&quot;(.*?)&quot; alt=&quot;.*?&quot; title=&quot;.*?&quot;&gt;&#x27;</span>, html)</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    <span class="comment"># 加一秒延迟</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 把相对路径转为绝对路径</span></span><br><span class="line">    url = parse.urljoin(<span class="string">&#x27;http://www.vmgirls.com/&#x27;</span>, url)</span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">    <span class="comment"># 文件名</span></span><br><span class="line">    file_name = url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="comment"># 以二进制形式存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(dir_name + <span class="string">&#x27;/&#x27;</span> + file_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在保存&#x27;</span>, file_name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 唯美女生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echart数据可视化</title>
      <link href="/2020/08/04/project2/"/>
      <url>/2020/08/04/project2/</url>
      
        <content type="html"><![CDATA[<h1 id="Echarts-数据可视化"><a href="#Echarts-数据可视化" class="headerlink" title="Echarts 数据可视化"></a>Echarts 数据可视化</h1><blockquote><p>echarts百度公司出品，算是百度不可多得的良心之作。一个纯 Javascript 的图表库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的 Canvas 类库 ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。</p><p>官网地址：<a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></p></blockquote><p>项目源码地址：<a href="https://gitee.com/wangxe813/echarts">https://gitee.com/wangxe813/echarts</a> <a href="https://wangxe813.gitee.io/echarts">demo</a></p><h1 id="Project-preview"><a href="#Project-preview" class="headerlink" title="Project preview"></a>Project preview</h1><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe/img/echarts.png" alt=""></p><div class="note default flat"><p>温馨提示：本项目只有前端部分，没有涉及到后端。</p></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> Echart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目笔记</title>
      <link href="/2020/08/04/project/"/>
      <url>/2020/08/04/project/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue电商后台管理系统"><a href="#Vue电商后台管理系统" class="headerlink" title="Vue电商后台管理系统"></a>Vue电商后台管理系统</h1><p>项目源码地址(含接口文档)：<a href="https://gitee.com/wangxe813/vue">https://gitee.com/wangxe813/vue</a></p><p>后台接口地址(含后端数据)：<a href="https://gitee.com/wangxe813/vue-api">https://gitee.com/wangxe813/vue-api</a></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><blockquote><p>用于管理用户账号，商品分类，商品信息，订单，数据统计等业务功能</p></blockquote><p><img src="https://gitee.com/wangxe813/vue/raw/master/images/vuemain.png" alt="img"></p><h1 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h1><ul><li>电商后台管理系统整体采用前后端分离的开发模式,其中前端项目是基于Vue技术栈的SPA项目</li></ul><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><h2 id="前端项目技术栈"><a href="#前端项目技术栈" class="headerlink" title="前端项目技术栈"></a>前端项目技术栈</h2><ul><li>Vue</li><li>Vue-router</li><li>Element-UI</li><li>Axios</li><li>Echarts</li></ul><h2 id="后端项目技术栈"><a href="#后端项目技术栈" class="headerlink" title="后端项目技术栈"></a>后端项目技术栈</h2><ul><li>Node.js</li><li>Express</li><li>Jwt</li><li>Mysql</li><li>Sequelize</li></ul><h1 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h1><h2 id="前端项目初始化步骤"><a href="#前端项目初始化步骤" class="headerlink" title="前端项目初始化步骤"></a>前端项目初始化步骤</h2><ol><li>安装 Vue 脚手架</li><li>通过 Vue-Cli 创建项目</li><li>配置 Vue-router</li><li>配置 Element-UI 组件库</li><li>配置 Axios 库</li><li>初始化 git 远程仓库</li></ol><h2 id="相关依赖-按需导入"><a href="#相关依赖-按需导入" class="headerlink" title="相关依赖-按需导入"></a>相关依赖-按需导入</h2><p><img src="https://gitee.com/wangxe813/vue/raw/master/images/vueyi.png" alt="img"></p><h2 id="相关插件"><a href="#相关插件" class="headerlink" title="相关插件"></a>相关插件</h2><p><img src="https://gitee.com/wangxe813/vue/raw/master/images/vuecha.png" alt=""></p><h2 id="后端项目的环境安装配置"><a href="#后端项目的环境安装配置" class="headerlink" title="后端项目的环境安装配置"></a>后端项目的环境安装配置</h2><ol><li>安装MySQL数据库</li><li>安装Node.js环境</li><li>配置项目相关信息</li><li>启动项目<ol><li>使用phpstudy导入数据库并运行</li><li>npm init 后端项目</li><li>node ./app.js</li></ol></li><li>使用Postman测试后台项目接口是否正常</li></ol><h1 id="登录概述"><a href="#登录概述" class="headerlink" title="登录概述"></a>登录概述</h1><h2 id="登录业务流程"><a href="#登录业务流程" class="headerlink" title="登录业务流程"></a>登录业务流程</h2><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe/img/vuea.png" alt=""></p><ol><li>在登录页面输入用户名和密码</li><li>调用后台接口进行验证</li><li>通过验证之后,根据后台的响应状态跳转到项目主页</li></ol><h2 id="登录业务相关技术点"><a href="#登录业务相关技术点" class="headerlink" title="登录业务相关技术点"></a>登录业务相关技术点</h2><ol><li><p>http是无状态的</p></li><li><p>通过cookie在客户端记录状态</p></li><li><p>通过sesion在服务器端记录状态</p></li><li><p>通过token维持状态(不允许跨域使用)</p></li><li><p>路由导航守卫控制访问权限</p></li></ol><blockquote><p>如果用户没有登录,但是直接通过URL访问特定页面,需要重新导航到登录页面</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为路由对象,添加beforeEach导航守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//如果用户访问的登录页,直接放行</span></span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">&#x27;login&#x27;</span>) <span class="keyword">return</span> next()</span><br><span class="line">    <span class="comment">//从sessionStorage中获取到保存的token值</span></span><br><span class="line">    <span class="keyword">const</span> tokenStr = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="comment">//如果么有token,强制跳转到登录页</span></span><br><span class="line">    <span class="keyword">if</span>(!tokenStr) <span class="keyword">return</span> next(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="主页布局"><a href="#主页布局" class="headerlink" title="主页布局"></a>主页布局</h1><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe/img/vueb.png" alt=""></p><h2 id="通过接口获取菜单数据"><a href="#通过接口获取菜单数据" class="headerlink" title="通过接口获取菜单数据"></a>通过接口获取菜单数据</h2><blockquote><p>通过axios请求拦截器添加token,保证拥有获取数据的权限</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios请求拦截</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 为请求头对象,添加token验证的Authorization字段</span></span><br><span class="line">    config.headers.Authorization = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><blockquote><p>用户列表可以查看已有帐户，修改帐户权限信息，删除用户和修改状态</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe/img/vuec.png" alt=""></p><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><h2 id="权限管理业务分析"><a href="#权限管理业务分析" class="headerlink" title="权限管理业务分析"></a>权限管理业务分析</h2><blockquote><p>通过权限管理模块控制不同的用户可以进行哪些操作,具体可以通过角色的方式进行控制,即每个用户分配一个特定的角色,角色包括不同的功能权限</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe/img/vuee.png" alt=""></p><h1 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h1><h2 id="商品分类概述"><a href="#商品分类概述" class="headerlink" title="商品分类概述"></a>商品分类概述</h2><blockquote><p>商品分类用于在购物时,快速找到需要购买的商品,进行直观显示</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe/img/vued.png" alt=""></p><h1 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h1><h2 id="数据报表"><a href="#数据报表" class="headerlink" title="数据报表"></a>数据报表</h2><blockquote><p>数据报表将数据可视化</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe/img/vue.png" alt=""></p><h1 id="项目所用依赖-vue全家桶不描述"><a href="#项目所用依赖-vue全家桶不描述" class="headerlink" title="项目所用依赖(vue全家桶不描述)"></a>项目所用依赖(vue全家桶不描述)</h1><ol><li>运行依赖</li></ol><ul><li>axios =&gt; 发送请求</li><li>echarts =&gt; 图表</li><li>element-ui =&gt; element ui组件</li><li>lodash =&gt; js工具库,该项目用到深拷贝与对象合并</li><li>moment =&gt; 时间处理工具库</li><li>nprogress =&gt; 进度条库</li><li>v-viewer =&gt; 图片预览工具库</li><li>vue-quill-editor =&gt; 富文本编辑器</li><li>vue-table-with-tree-grid =&gt; 树形菜单/表格</li></ul><ol><li>开发依赖</li></ol><ul><li>babel =&gt; es6+语法转换</li><li>eslint/babel-eslint =&gt; 语法检查</li><li>less/less-loader =&gt; less语法</li><li>babel-plugin-transform-remove-console =&gt; 移除console插件</li></ul><h1 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h1><h2 id="项目优化策略"><a href="#项目优化策略" class="headerlink" title="项目优化策略"></a>项目优化策略</h2><ul><li><p>通过vue.config.js修改webpack的默认配置</p><blockquote><p>通过vue-cli 3.0工具生成的项目,默认隐藏了所有webpack的配置项,目的是为了屏蔽项目的配置过程,让开发人员把工作的 重心,放在具体功能和业务逻辑的实现上</p></blockquote></li><li><p>为开发模式与发布模式指定不同的打包入口</p><blockquote><p>默认情况下,vue项目的开发与发布模式,共用同一个打包的入口文件(即<code>src/main.js</code>),为了将项目的开发过程与发布过程分离,可以为两种模式,各自指定打包的入口文件,即:</p><ol><li>开发模式入口文件 <code>src/main-dev.js</code></li><li>发布模式入口文件 <code>src/main-prod.js</code></li></ol><p>方案：<code>configureWebpack</code>(通过链式编程形式)和<code>chainWebpack</code>(通过操作对象形式)</p><p>在<code>vue.config.js</code>导出的配置文件中,新增<code>configureWebpack</code>或<code>chainWebpack</code>节点,来自定义webpack的打包配置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码示例</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 发布模式</span></span><br><span class="line">        config.when(process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>, <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">            config.entry(<span class="string">&#x27;app&#x27;</span>).clear().add(<span class="string">&#x27;./src/main-prod.js&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 开发模式</span></span><br><span class="line">        config.when(process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>, <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">            config.entry(<span class="string">&#x27;app&#x27;</span>).clear().add(<span class="string">&#x27;./src/main-dev.js&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三方库启用CDN</p><ul><li>通过externals加载外部cdn资源</li></ul><blockquote><p>默认情况下,通过import语法导入的第三方依赖包,最终会打包合并到同一个文件中,从而导致打包成功后,单文件体积过大的问题 =&gt; <code>chunk-vendors</code>体积过大</p><p>为了解决上述问题,可以通过webpack的<code>externals</code>节点,来配置加载外部的cdn资源,凡是声明在<code>externals</code>中的第三方依赖包,都不会被打包</p></blockquote><ol><li>步骤1</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        config.when(process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>, <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">            config.entry(<span class="string">&#x27;app&#x27;</span>).clear().add(<span class="string">&#x27;./src/main-prod.js&#x27;</span>)</span><br><span class="line">            <span class="comment">// 在vue.config.js如下配置</span></span><br><span class="line">            config.set(<span class="string">&#x27;externals&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">                <span class="attr">axios</span>: <span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">                <span class="attr">lodash</span>: <span class="string">&#x27;_&#x27;</span>,</span><br><span class="line">                <span class="attr">echarts</span>: <span class="string">&#x27;echarts&#x27;</span>,</span><br><span class="line">                <span class="attr">nporgress</span>: <span class="string">&#x27;NProgress&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;vue-quill-editor&#x27;</span>: <span class="string">&#x27;VueQuillEditor&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        config.when(process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>, <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">            config.entry(<span class="string">&#x27;app&#x27;</span>).clear().add(<span class="string">&#x27;./src/main-dev.js&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>步骤2</li></ol><blockquote><p>在<code>public/index.html</code>文件头部,将<code>main-prod</code>中的已经进行配置的<code>import(样式表)</code>删除替换为cdn引入</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/viewerjs/1.3.7/viewer.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/quill/2.0.0-dev.3/quill.bubble.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/quill/2.0.0-dev.3/quill.core.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/quill/2.0.0-dev.3/quill.snow.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/nprogress/0.2.0/nprogress.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/element-ui/2.12.0/theme-chalk/index.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>步骤3</li></ol><blockquote><p>在<code>public/index.html</code>文件头部,将<code>main-prod</code>中的已经进行配置的<code>import(js文件)</code>删除替换为cdn引入</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue-router/3.1.3/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/axios/0.19.0/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/lodash.js/4.17.15/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/echarts/4.4.0-rc.1/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/nprogress/0.2.0/nprogress.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/quill/2.0.0-dev.3/quill.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.4/dist/vue-quill-editor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/viewerjs/1.3.7/viewer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/moment.js/2.24.0/moment.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>cdn加速前后对比( <code>chunk-vendors</code>打包文件)</li></ol><blockquote><p>Parsed大小 2.6m=&gt; <strong>596.9kB</strong></p></blockquote><ul><li><p>使用cdn优化<code>elementui</code>打包</p><blockquote><p>具体操作流程</p><ol><li><p>在<code>main-prod.js</code>中,注释掉<code>element-ui</code>按需加载的代码</p></li><li><p>在<code>index.html</code>头部区域中,通过cdn加载<code>element-ui</code>的js和css样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/element-ui/2.12.0/theme-chalk/index.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/element-ui/2.12.0/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote></li><li><p>首页内容定制</p><blockquote><p>不同打包环境下,首页内容可能会有所不同,通过插件方式定制</p></blockquote><ul><li>vue.config.js配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config.plugin(<span class="string">&#x27;html&#x27;</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">    args[<span class="number">0</span>].isProd = <span class="literal">true</span>或<span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>index.html修改</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发模式:使用import,发布模式:使用cdn --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.isProd ? &#x27;&#x27; : &#x27;dev-&#x27; %&gt;vue-mall<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&lt;% if(htmlWebpackPlugin.options.isProd) &#123; %&gt;</span><br><span class="line">    css | js放在这儿</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li><li><p>Element-UI组件按需加载</p></li><li><p>路由懒加载</p><blockquote><p>在打包构建项目时,javascript包会变得特别大,影响页面加载,如果我们能把不同路由对应的组件分隔成不同的代码块,然后当路由被访问的时候才加载对应组件,这样更加高效</p></blockquote><ul><li>安装@babel/plugin-syntax-dynamic-import包</li><li>在babel.config.js配置文件声明该插件</li><li>将路由改为按需加载形式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 示例:</span><br><span class="line">const Foo = () =&gt; import(/* webpackChunkName: &quot;group-foo&quot; */ &#x27;./Foo.vue&#x27;)</span><br><span class="line">const Bar = () =&gt; import(/* webpackChunkName: &quot;group-foo&quot; */ &#x27;./Bar.vue&#x27;)</span><br><span class="line">const Baz = () =&gt; import(/* webpackChunkName: &quot;group-foo&quot; */ &#x27;./Baz.vue&#x27;)</span><br><span class="line"></span><br><span class="line">// import Login from &#x27;../components/Login.vue&#x27;</span><br><span class="line">const Login = () =&gt; import(/* webpackChunkName: &quot;login_home_welcome&quot; */ &#x27;../components/Login.vue&#x27;)</span><br><span class="line">// import Home from &#x27;../components/Home.vue&#x27;</span><br><span class="line">const Home = () =&gt; import(/* webpackChunkName: &quot;login_home_welcome&quot; */ &#x27;../components/Home.vue&#x27;)</span><br><span class="line">// import Welcome from &#x27;../components/Welcome.vue&#x27;</span><br><span class="line">const Welcome = () =&gt; import(/* webpackChunkName: &quot;login_home_welcome&quot; */ &#x27;../components/Welcome.vue&#x27;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h1 id="项目上线"><a href="#项目上线" class="headerlink" title="项目上线"></a>项目上线</h1><h2 id="通过node创建web服务器"><a href="#通过node创建web服务器" class="headerlink" title="通过node创建web服务器"></a>通过node创建web服务器</h2><blockquote><p>新创建node项目,并安装express,通过express快速创建web服务器,将vue打包生成的dist文件夹,托管为静态资源即可,关键代码如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. npm init -y</span></span><br><span class="line"><span class="comment">// 2. npm i express -S</span></span><br><span class="line"><span class="comment">// 3. 将打包后的dist放入node项目中</span></span><br><span class="line"><span class="comment">// 4. </span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./dist&#x27;</span>))</span><br><span class="line">app.listen(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server runing at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 5. node app.js启动项目</span></span><br></pre></td></tr></table></figure><h2 id="开启gzip配置"><a href="#开启gzip配置" class="headerlink" title="开启gzip配置"></a>开启gzip配置</h2><blockquote><p>通过gzip减小文件体积,使传输速度更快</p></blockquote><h3 id="在服务器端使用express做gzip压缩-配置如下"><a href="#在服务器端使用express做gzip压缩-配置如下" class="headerlink" title="在服务器端使用express做gzip压缩,配置如下"></a>在服务器端使用express做gzip压缩,配置如下</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.npm install compression -S</span></span><br><span class="line"><span class="comment">// 2.导入包</span></span><br><span class="line"><span class="keyword">const</span> compression = <span class="built_in">require</span>(<span class="string">&#x27;compression&#x27;</span>)</span><br><span class="line"><span class="comment">// 3.启用中间件</span></span><br><span class="line">app.use(compression())</span><br></pre></td></tr></table></figure><h2 id="配置https服务"><a href="#配置https服务" class="headerlink" title="配置https服务"></a>配置https服务</h2><h3 id="为什么要启用https服务"><a href="#为什么要启用https服务" class="headerlink" title="为什么要启用https服务"></a>为什么要启用https服务</h3><ul><li>传统的http协议传输的数据都是明文,不安全</li><li>采用https协议对传输的数据进行了加密处理,可以防止数据被中间人窃取,使用更安全</li></ul><p>申请ssl证书(<a href="https://freessl.org/">https://freessl.org</a>) =&gt; 正常企业还是使用收费ssh(http协议默认运行在80端口,https默认运行在443端口)</p><h2 id="使用pm2管理应用"><a href="#使用pm2管理应用" class="headerlink" title="使用pm2管理应用"></a>使用pm2管理应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. npm i pm2 -g //全局安装</span><br><span class="line">2. pm2 start 脚本(如./app.js) --name 自定义名称 // 启动项目</span><br><span class="line">3. pm2 ls //查看服务器运行的项目</span><br><span class="line">4. pm2 restart 自定义名称 //重启项目</span><br><span class="line">5. pm2 stop 自定义名称 //停止项目</span><br><span class="line">6. pm2 delete 自定义名称 //删除项目</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wangxe813/vue/raw/master/images/vuepm2.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 总结 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面优化</title>
      <link href="/2020/07/25/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
      <url>/2020/07/25/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前端页面优化"><a href="#前端页面优化" class="headerlink" title="前端页面优化"></a>前端页面优化</h1><blockquote><p>学习目标</p><ul><li><p>了解为何进行前端页面的优化</p></li><li><p>了解SEO，掌握前端页面语义性的评判标准与规则</p></li><li><p>从代码可读性角度进行页面优化</p></li></ul></blockquote><h2 id="为何进行前端优化"><a href="#为何进行前端优化" class="headerlink" title="为何进行前端优化"></a>为何进行前端优化</h2><ol><li>加载速度更快 —— 速度就是王道</li><li>成本耕地 —— 人力与时间成本<ul><li>网站制作完成 ≠ 开发结束</li></ul></li><li>扩展性更强 —— 前端工作的非独立性</li></ol><h2 id="前端页面的优化角度"><a href="#前端页面的优化角度" class="headerlink" title="前端页面的优化角度"></a>前端页面的优化角度</h2><h3 id="代码语义性（与SEO相关）"><a href="#代码语义性（与SEO相关）" class="headerlink" title="代码语义性（与SEO相关）"></a>代码语义性（与SEO相关）</h3><ol><li>语义性的重要性<ol><li>语义性对SEO以及网站自然排名的影响</li><li>SEO是什么</li><li>对语义性的要求使得网站发生了什么变化<ol><li>table布局 -&gt; DIV + CSS（HTML + CSS）</li><li>Flash类网站的消亡</li></ol></li></ol></li><li>搜索引擎爬虫的评判因素<ol><li>良好的缩进与规范的格式</li><li>良好的扩展性（代码量小）</li><li>合理的标签语义</li><li>合理的标签的嵌套</li><li>404页面必不可少</li></ol></li><li>标签选择<ol><li>title与meta</li><li>标签语义化<ol><li>div、span</li><li>h1-h6、p</li><li>ul、ol、li、dl、dt、dd</li><li>a、img、table</li></ol></li><li>特殊属性<ol><li>img添加alt和title属性</li><li>a添加title的属性</li></ol></li></ol></li></ol><h3 id="代码可读性"><a href="#代码可读性" class="headerlink" title="代码可读性"></a>代码可读性</h3><ol><li>标签的嵌套规则<ol><li>ins和del（行内元素）可以包含块级元素或者行内元素，其他任何行内元素都不允许包含块级元素</li><li>p、h1-h6可以直接包含行内元素的文本信息，但是不允许包含块级元素</li><li>dl元素只允许包含dt和dd，同时dt不能包含块状元素，只允许包含行内元素，dd可以包含任何元素</li><li>不建议from元素直接包含input元素</li><li>table元素建议直接包含caption、colgroup、col、thead、tbody、tfoot，不建议直接包含tr货主其他任何元素</li></ol></li><li>CSS代码书写规范<ol><li>命名采用更简明有语义的英文单词进行组合</li><li>针对单词可以进行适当缩写</li><li>采用小写字母加中划线的方式进行命名，尽量不使用下划线或大写字母（看公司需求和个人爱好）</li><li>CSS代码的书写顺序遵循CSS样式的渲染顺序<ol><li>显示属性 — display、float、position等</li><li>自身属性 — width、height、margin、padding、border</li><li>文本属性 — font-size、line-height、text-align等</li><li>其他（含CSS3等）</li></ol></li></ol></li><li>JS命名规范与推荐<ol><li>标识符命名规范<ol><li>区分大小写</li><li>第一个字符必须是一个字母、下划线（_）或一个美元符号（$）,其他字符可以是字母、下划线、美元符号或数字</li><li>不能含有空格，不能以关键字或保留字命名</li></ol></li><li>标识符命名推荐<ol><li>遵循小驼峰命名法（如：currentTime），除了第一个首字母之外，其他的单词首字母大写</li><li>变量或者属性以名词开头，方法或者函数以动词开头</li><li>常量命名：字母全部大写，多个单词之间试用下划线分割（如：PI_API）</li><li>构造函数名称：首字母大写，遵循大驼峰命名法</li></ol></li></ol></li><li>合理的注释与空格<ol><li>在绝大多数的操作符前后，需要添加空格</li><li>在数组的逗号后面需要加空格</li><li>在对象属性的都好之后，属性名和属性值分开的冒号前后，均需要加空格</li><li>函数声明的大括号之前（参数括号之后）需要加空格</li><li>函数中，分隔各个参数的逗号之后需要加空格</li><li>合理添加注释</li><li>注释符号与注释内容之间加空格</li></ol></li></ol><h3 id="代码扩展性"><a href="#代码扩展性" class="headerlink" title="代码扩展性"></a>代码扩展性</h3><blockquote><p>学习目标</p><ul><li>掌握前后台的数据传递时存在的问题</li><li>合理处理文本或图片的超出问题</li><li>灵活应用margin负值、伪类选择器等技术，解决代码的扩展性问题</li><li>掌握伪元素并能够合理应用</li><li>理解a标签的可触区，并能够合理设置</li></ul></blockquote><ol><li><p>前后台数据交互的常见问题</p><ol><li><p>代码扩展性不足引发的问题</p><ol><li><p>图片尺寸与文本溢出</p></li><li><p>为合理处理“相似元素的不同样式”</p></li></ol></li></ol></li><li><p>img标签的宽高与文本超出</p><p>图片、文本问题处理方法</p><ul><li><p>为图片设置合理的宽高</p></li><li><p>文本超出隐藏</p><p>overflow: hidden;</p></li><li><p>文本超出省略号</p><p>overflow: hidden;</p><p>text-overflow: ellipsis;</p><p>word-break: keep-all;</p><p>white-space: nowrap;</p></li></ul></li><li><p>代码的扩展性 — 伪类选择器</p></li><li><p>代码扩展性 — margin的负值</p></li><li><p>伪元素的应用</p><ul><li>:before 在元素之前添加内容</li><li>:after 在元素之后添加内容</li><li>伪元素的常见用途<ul><li>实现清浮动</li><li>实现背景图</li></ul></li></ul></li><li><p>a标签的可触区问题</p><ul><li>移动端尽可能大一些，让用户体验更好</li></ul></li></ol><h3 id="页面加载速度"><a href="#页面加载速度" class="headerlink" title="页面加载速度"></a>页面加载速度</h3><ol><li>文件大小、请求次数</li><li>加载方式、代码性能</li></ol><h1 id="文件合并与压缩"><a href="#文件合并与压缩" class="headerlink" title="文件合并与压缩"></a>文件合并与压缩</h1><blockquote><p>学习目标</p><ul><li>能够输出文件压缩与文件合并，对前端优化的意义</li><li>连接传统文件合并与压缩的方法</li><li>掌握webpack的使用方法</li><li>能够使用webpack实现文件合并于压缩</li></ul></blockquote><h2 id="文件合并、压缩与前端优化的关系"><a href="#文件合并、压缩与前端优化的关系" class="headerlink" title="文件合并、压缩与前端优化的关系"></a>文件合并、压缩与前端优化的关系</h2><ul><li>文件合并：涉及服务器请求次数</li><li>文件压缩：涉及文件大小</li></ul><p>传统文件合并：手动合并</p><p>传统文件压缩：借助在线工具</p><p>文件压缩与合并 — 新技术 webpack</p><p>webpack是一个模块打包器，主要作业是打包JavaScript文件，可借助丰富的插件，实现html、css等其他资源的打包</p><h2 id="webpack的安装"><a href="#webpack的安装" class="headerlink" title="webpack的安装"></a>webpack的安装</h2><ul><li><p>安装cnpm（淘宝镜像可选）</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code>  </p></li><li><p>生成package.json文件</p><p><code>npm init y</code></p></li><li><p>局部安装webpack</p><p><code>npm install -D webpack webpack-cli</code></p></li></ul><h2 id="打包压缩js文件"><a href="#打包压缩js文件" class="headerlink" title="打包压缩js文件"></a>打包压缩js文件</h2><p>新建webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">index</span>: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 出口</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;../out&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">     <span class="comment">//加入以下代码</span></span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack --config config/webpack.config.js&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>运行命令npm run start 便可打包js文件</p><p>被依赖的js文件，使用import和export进行处理，引入到响应js文件中，再次打包即可实现js文件的合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;被依赖的js&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&#x27;./inde.js&#x27;</span></span><br><span class="line">a()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;不被依赖的js&#x27;</span>)</span><br></pre></td></tr></table></figure><p>再次输入npm run start 便可合并js文件</p><h2 id="HTML文件的压缩"><a href="#HTML文件的压缩" class="headerlink" title="HTML文件的压缩"></a>HTML文件的压缩</h2><ul><li><p>安装插件<code>html-webpack-plugin</code></p><p><code>npm install -D html-webpack-plugin</code></p></li><li><p>在<code>webpack.config.js</code>配置文件中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlwpPlug = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> htmlwpPlug(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;./cn/index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">chunks</span>: [<span class="string">&#x27;index&#x27;</span>],</span><br><span class="line">            <span class="attr">minify</span>: &#123;</span><br><span class="line">                <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>根据插件，调整配置信息后，打包运行</li></ul><h2 id="CSS文件压缩、CSS文件独立打包、合并及压缩"><a href="#CSS文件压缩、CSS文件独立打包、合并及压缩" class="headerlink" title="CSS文件压缩、CSS文件独立打包、合并及压缩"></a>CSS文件压缩、CSS文件独立打包、合并及压缩</h2><ul><li>安装相关插件<code>css-loader</code>和<code>style-loader</code></li><li><code>uglifyjs-webpack-plugin</code> <code>optimize-css-assets-webpack-plugin</code></li></ul><p>修改相应js文件，引入css文件</p><ul><li>单独打包安装插件<code>mini-css-extract-plugin</code></li></ul><p>完整webpack.config.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlwpPlug = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlug = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlug = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCSSExtractPlug = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">index</span>: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;../out&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> htmlwpPlug(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;./cn/index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">chunks</span>: [<span class="string">&#x27;index&#x27;</span>],</span><br><span class="line">            <span class="attr">minify</span>: &#123;</span><br><span class="line">                <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> MiniCSSExtractPlug(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;[name].css&quot;</span>,</span><br><span class="line">            <span class="attr">chunkFilename</span>: <span class="string">&quot;[id].css&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlug(&#123;</span><br><span class="line">                <span class="attr">cache</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">parallel</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">sourceMap</span>: <span class="literal">true</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlug(&#123;&#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [MiniCSSExtractPlug.loader, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图片与特殊字体"><a href="#图片与特殊字体" class="headerlink" title="图片与特殊字体"></a>图片与特殊字体</h1><blockquote><p>学习目标</p><ul><li>能够使用@font-face为文字设置特殊字体</li><li>掌握呢书字体的”缩小“方法</li><li>能够根据需求为图片选择合理的格式</li><li>能够使用在线工具，实现图片压缩与处理</li><li>掌握webp与srcset的使用方法</li><li>能够利用背景图合并技术，降低服务器请求次数</li></ul></blockquote><h2 id="特殊字体"><a href="#特殊字体" class="headerlink" title="特殊字体"></a>特殊字体</h2><ol><li><p>传统特殊字体的实现方法与问题</p><ul><li>实现方法：截图法</li><li>存在的问题：文件过大</li><li>传统方法的局限性：内容部分无法使用特殊字体</li></ul></li><li><p>@font-face的使用</p><ul><li>@font-face的核心语法</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: &lt;YourWebFontName&gt;;</span><br><span class="line">    <span class="attribute">src</span>: &lt;source&gt; [&lt;format&gt;][&lt;source&gt;[&lt;format&gt;]]*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字体格式转换：<a href="https://transfonter.org">https://transfonter.org</a></li><li>@font-face的问题-中文类字体文件较大</li></ul></li><li><p>处理特殊字体的工具——fontmin</p></li><li><p>不同情境下，对于特殊字体的处理方法</p><ul><li>“非数据部分”的特殊字体<ul><li>大量的特殊字体</li><li>极少量的特殊字体</li></ul></li><li>”数据部分“，不含中文的特殊字体</li><li>”数据部分“，总问类特殊字体</li></ul></li></ol><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ol><li><p>图片类型</p><ul><li>gif：全透明或不透明，对像素要求很低的小图标、动画</li><li>jpg：不透明的，对像素要求一般或较低的图片</li><li>png-8：半透明或不透明，对像素要救一般的图片</li><li>png-24：半透明或不透明，对象素要求较高的图片</li></ul></li><li><p>图片压缩</p><ul><li><p>压缩原则</p></li><li><p>在线压缩地址</p><p>智图：<a href="https://zhitu.isux.us">https://zhitu.isux.us</a></p><p>tinypng: <a href="https://tinypng.com/">https://tinypng.com/</a></p><p>等等</p></li></ul></li><li><p>webp与srcset</p><ul><li><p>webp图片类型</p></li><li><p>webp与jpg的比较</p></li><li><p>转换webp格式的图片的软件/方法</p><p>iSparta软件</p><p>智图</p></li></ul><ul><li>如何实现全浏览器兼容-借助srcset</li></ul></li><li><p>背景图片合并技术</p><ul><li>背景图和数据图区分方法</li><li>什么是背景图合并</li><li>为何进行背景图合并</li><li>背景图合并的核心原理</li></ul></li></ol><h1 id="文件放置位置"><a href="#文件放置位置" class="headerlink" title="文件放置位置"></a>文件放置位置</h1><blockquote><p>学习目标</p><ul><li>能够将CSS、JS文件放置在合理位置</li><li>能够说出页面回流与页面重绘</li></ul></blockquote><h2 id="CSS与JS的位置"><a href="#CSS与JS的位置" class="headerlink" title="CSS与JS的位置"></a>CSS与JS的位置</h2><ol><li>css代码放置位置<ul><li>为放置在head标签中的css代码依旧生效</li><li>css代码的推荐放置位置</li></ul></li><li>js代码放置位置<ul><li>加js代码放置在顶部的潜在隐患</li><li>js代码的推荐放置位置</li></ul></li></ol><h2 id="页面回流与重绘"><a href="#页面回流与重绘" class="headerlink" title="页面回流与重绘"></a>页面回流与重绘</h2><ol><li><p>页面回流</p><p>当render tree（DOM Tree 和样式结构体组合后构建）中的一部分（或全部）因为元素的规模尺寸，布局，隐藏的改变引起的页面重新渲染（或者交做重新构建绘制）</p></li><li><p>页面重绘</p><p>当render tree中的一些元素需要更新属性，但这些属性之影响元素的外观，风格，而不会影响到元素的布局，此类页面渲染叫做页面重绘</p></li></ol><h1 id="预加载按需加载和懒加载"><a href="#预加载按需加载和懒加载" class="headerlink" title="预加载按需加载和懒加载"></a>预加载按需加载和懒加载</h1><blockquote><p>学习目标</p><ul><li><p>通过JS实现图片预加载</p></li><li><p>掌握按需加载的基本原理和实现方法</p></li></ul></blockquote><h2 id="图片预加载"><a href="#图片预加载" class="headerlink" title="图片预加载"></a>图片预加载</h2><ol><li>图片预加载是什么</li><li>为何要用图片预加载</li><li>图片预加载的核心原理<ul><li>new Image()动态创建img</li><li>设置图片src,并使用onload方法回调鱼仔完成的事件</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;img&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> loadImg = [];</span></span><br><span class="line"><span class="javascript">        loadImg.push(<span class="string">&#x27;img/1.jpg&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        loadImg.push(<span class="string">&#x27;img/2.jpg&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        loadImg.push(<span class="string">&#x27;img/3.jpg&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        loadImg.push(<span class="string">&#x27;img/4.jpg&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        loadImg.push(<span class="string">&#x27;img/5.jpg&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> imgsNum = loadImg.length</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> nowNum = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> nowPer = <span class="number">0</span>  </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgsNum; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(i)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> newImg = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">            newImg.src = loadImg[i];</span></span><br><span class="line"><span class="javascript">            newImg.onload = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                nowNum++</span></span><br><span class="line"><span class="javascript">                img.appendChild(newImg);</span></span><br><span class="line"><span class="javascript">                nowPer = nowNum/imgsNum *<span class="number">100</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(nowPer + <span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (nowNum == imgsNum) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;加载完成&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h2><ol><li><p>按需加载HTML内容</p><ul><li>核心原理：利用js，在符合某种条件是，将script标签的内容去除，让HTML内容生效</li><li>核心代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;hide&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con&quot;</span>&gt;</span>点击我看效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;con&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hide = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hide&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        con.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            box.innerHTML = hide.innerHTML</span></span><br><span class="line"><span class="javascript">            con.onclick = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按需加载图片</p><ul><li>核心原理：利用切换图片标签的src属性，实现图片的按需加载</li><li>核心代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tit&quot;</span>&gt;</span>点我加载<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;con&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片1&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片1&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> imgs = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>).getElementsByTagName(<span class="string">&#x27;img&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tit = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tit&#x27;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        tit.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> imgLen = imgs.length</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgLen; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> relSrc = imgs[i].getAttribute(<span class="string">&#x27;data-src&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                imgs[i].setAttribute(<span class="string">&#x27;src&#x27;</span>,relSrc)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>按照整个屏幕进行加载</p><ul><li>核心原理：将加载的代码放置于textarea当中，再合适的时候使用DOM处理该内容</li><li>核心代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;add1&quot;</span>&gt;</span>//具体代码<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>利用Ajax实现页面懒加载</p><ul><li><p>核心原理</p><p>在符合某种条件时，触发懒加载</p><p>使用Ajax实现前后台数据交互，一部请求数据</p><p>使用DOM将Ajax异步获取的数据加载到HTML当中</p></li></ul></li></ol><h1 id="JavaScript代码性能优化"><a href="#JavaScript代码性能优化" class="headerlink" title="JavaScript代码性能优化"></a>JavaScript代码性能优化</h1><blockquote><p>学习目标</p><ul><li>掌握标签查找（遍历）此时对代码执行速度的影响</li><li>掌握大量DOM节点操做的处理方法</li><li>掌握DOM2级时间绑定方法</li><li>能够合理使用事件委托</li><li>了解利用css与css3属性实现动画的不同之处</li><li>掌握函数缓存</li><li>能使用惰性载入函数实现DOM2级的事件绑定</li><li>能使用函数柯里化实现DOM2级的事件绑定</li><li>能借助Canvas，优化图片上传方法</li></ul></blockquote><h2 id="标签查找（遍历）次数"><a href="#标签查找（遍历）次数" class="headerlink" title="标签查找（遍历）次数"></a>标签查找（遍历）次数</h2><ol><li><p>获取标签</p></li><li><p>遍历查找标签列表的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">&quot;rest&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> lists = test.document.getElementsByTsgName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> len = lists.length;</span><br><span class="line"><span class="keyword">for</span>(va i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;for中具体代码&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="大量DOM节点插入时的操作方法"><a href="#大量DOM节点插入时的操作方法" class="headerlink" title="大量DOM节点插入时的操作方法"></a>大量DOM节点插入时的操作方法</h2><ol><li><p>获取大量数据信息后，DOM节点动态创建方法</p><ul><li>方法1：没处理一条，即可创建一个DOM节点，并将DOM节点防止于DOM书当中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000</span>; i++) &#123;</span><br><span class="line">   list.innerHTML = <span class="string">&#x27;&lt;li&gt;&#x27;</span> + i + <span class="string">&#x27;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>方法2：将所有DOM节点处理完毕之后，一次性将DOM放置于DOM树当中(推荐远快于第一种)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000</span>; i++) &#123;</span><br><span class="line">    str += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + i + <span class="string">&#x27;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">list.innerHTML = str;</span><br></pre></td></tr></table></figure></li></ol><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ul><li><p>DOM0级 事件绑定问题：同标签 类型事件只能绑定一次</p></li><li><p>DOM2级 事件绑定： 同标签同类型事件可绑定多次</p></li><li><p>DOM2级 事件绑定方法</p><ul><li>addEventlistener(‘事件名’，函数，true/false);</li><li>attchEvent(‘on+事件名’,函数)；</li></ul></li></ul><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><ul><li><p>事件委托：减少功能函数的数量</p></li><li><p>事件委托基本原理</p><ul><li>采用DOM2级事件绑定方法</li><li>利用事件冒泡的基本原理</li><li>检测事件目标对象，执行响应功能函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统DOM0级事件绑定</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> listItems = list.getElementBytagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> listlen = listItems.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; listlen; i++) &#123;</span><br><span class="line">listItems[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; listlen; i++) &#123;</span><br><span class="line">            listItems[i].className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.className = <span class="string">&#x27;select&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 事件委托</span></span><br><span class="line">list.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = e.target;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; listlen; i++) &#123;</span><br><span class="line">        listItems[i].className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    target.className = <span class="string">&#x27;select&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//DOM2级事件绑定</span></span><br><span class="line">list.addEventlistener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = e.target;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; listlen; i++) &#123;</span><br><span class="line">        listItems[i].className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    target.className = <span class="string">&#x27;select&#x27;</span>;</span><br><span class="line">&#125;),<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ul><li>CSS3属性实现动画性能会比较好</li></ul><h2 id="函数缓存"><a href="#函数缓存" class="headerlink" title="函数缓存"></a>函数缓存</h2><ol><li>函数缓存的主要应用场景<ul><li>解决同参数的多次执行问题</li></ul></li><li>函数缓存的核心原理<ul><li>将一个函数对于给定参数的返回值缓存起来</li><li>用内存换取性能</li></ul></li></ol><h2 id="DOM2级事件兼容处理方法"><a href="#DOM2级事件兼容处理方法" class="headerlink" title="DOM2级事件兼容处理方法"></a>DOM2级事件兼容处理方法</h2><ol><li><p>传统实现方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>btn2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn2&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 传统事件绑定</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">eHandler</span>(<span class="params">ele, type, ftn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span></span><br><span class="line"><span class="javascript">                ele.addEventListener(type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    ftn.call(ele, e)</span></span><br><span class="line"><span class="javascript">                &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span></span><br><span class="line"><span class="javascript">                ele.attachEvent(<span class="string">&#x27;on&#x27;</span> + type, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    ftn.call(ele, e)</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        eHandler(btn1, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;元素被点击了&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        eHandler(btn2, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;第二个div被点击了&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>毒性载入函数</p><ul><li>核心原理：闭包</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>btn2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn2&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">//惰性载入函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">eHandler</span>(<span class="params">ele, type, ftn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;if语句被执行&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                eHandler = <span class="function"><span class="keyword">function</span>(<span class="params">ele, type, ftn</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    ele.addEventListener(type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        ftn.call(ele, e)</span></span><br><span class="line"><span class="javascript">                    &#125;,<span class="literal">false</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;IE if语句被执行&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                eHandler = <span class="function"><span class="keyword">function</span>(<span class="params">ele, type, ftn</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    ele.attachEvent(<span class="string">&#x27;on&#x27;</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        ftn.call(ele, e)</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> eHandler(ele, type, ftn)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        eHandler(btn1, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;元素被点击了&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        eHandler(btn2, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;第二个div被点击了&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>函数柯里化</p><ul><li>核心原理：闭包</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>btn2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn2&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">//函数柯里化</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> addEvent = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;是否运行多次&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">ele, type, ftn</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    ele.addEventListener(type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        ftn.call(ele, e)</span></span><br><span class="line"><span class="javascript">                    &#125;,<span class="literal">false</span>)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;是否运行多次&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">ele, type, ftn</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    ele.attachEvent(<span class="string">&#x27;on&#x27;</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        ftn.call(ele, e)</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        addEvent(btn1, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;元素被点击了&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        addEvent(btn2, <span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;第二个div被点击了&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><ol><li>传统方法实现图片上传<ul><li>传统实现方法 — 核心原理<ul><li>使用file类型的input标签</li><li>点击之后获取图片路径</li><li>将图片加载出来</li></ul></li></ul></li><li>传统实现方法存在的问题</li></ol><ul><li>加载慢</li></ul><ol start="3"><li><p>Canvas优化图片上传</p><ul><li>canvas实现方法 - 核心原理<ul><li>使用file类型的input标签</li><li>点击之后获取图片路径</li><li>通过canvas进行图片绘制</li><li>将canvas绘制的图片加载出来</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;pic&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileBtn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pic = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;pic&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> fileBtn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;fileBtn&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> context = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> relPic = <span class="keyword">new</span> Image()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        fileBtn.onchange = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            showPic(e)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showPic</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> fileUrl = fileBtn.files[<span class="number">0</span>]</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> fileType = fileUrl.type</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader()</span></span><br><span class="line"><span class="javascript">            reader.readAsDataURL(fileUrl)</span></span><br><span class="line"><span class="javascript">            reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> fileSrc = e.target.result</span></span><br><span class="line"><span class="javascript">                relPic.src = fileSrc</span></span><br><span class="line"><span class="javascript">                relPic.onload = getSize</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">getSize</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> w = <span class="built_in">this</span>.width</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> h = <span class="built_in">this</span>.height</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> imgSize = <span class="number">400</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> cw = w</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ch = h</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(cw &gt;= ch) &#123;</span></span><br><span class="line"><span class="javascript">                    cw = imgSize</span></span><br><span class="line"><span class="javascript">                    ch = cw / w * h</span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    ch = imgSize</span></span><br><span class="line"><span class="javascript">                    cw = ch / h * w</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                canvas.width = cw</span></span><br><span class="line"><span class="javascript">                canvas.height = ch</span></span><br><span class="line"><span class="javascript">                context.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>)</span></span><br><span class="line"><span class="javascript">                context.drawImage(<span class="built_in">this</span>, <span class="number">0</span>, <span class="number">0</span>, cw, ch)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> newImg = canvas.toDataURL(fileType, <span class="number">0.8</span>)</span></span><br><span class="line"><span class="javascript">                pic.setAttribute(<span class="string">&#x27;src&#x27;</span>, newImg)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><ol><li>避免全局作用域被污染</li><li>提升代码可读性</li><li>提升代码复用性</li><li>减少储存空间（函数）的占用</li></ol><h2 id="面向对象实现功能需求"><a href="#面向对象实现功能需求" class="headerlink" title="面向对象实现功能需求"></a>面向对象实现功能需求</h2><ol><li><p>面向对象案例功能需求</p><ul><li>创建一个people的基本信息</li><li>信息包括用户姓名、用户年龄、用户信息三项内容及一个方法（方法是对用户年龄进行判断，当用户年龄处于不同的范围时，设置不同的用户信息）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面向过程传统方法</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">28</span></span><br><span class="line"><span class="keyword">var</span> info</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">info = name + <span class="string">&#x27;未满18岁&#x27;</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">info = name + <span class="string">&#x27;当前的年龄为：&#x27;</span> + age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">changeInfo()</span><br><span class="line"><span class="built_in">console</span>.log(info)</span><br></pre></td></tr></table></figure></li><li><p>面向对象 — 使用对象实现初步优化</p><ul><li>传统实现代码“污染全局作用域”的问题</li><li>使用对象，解决全局作用域被污染的问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面向对象</span></span><br><span class="line"> <span class="keyword">var</span> peo = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">info</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">changeInfo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.age &lt; <span class="number">18</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.info = <span class="built_in">this</span>.name + <span class="string">&#x27;未满18周岁&#x27;</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.info = <span class="built_in">this</span>.name + <span class="string">&#x27;当前的年龄为：&#x27;</span> + <span class="built_in">this</span>.age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">peo.changeInfo()</span><br><span class="line"><span class="built_in">console</span>.log(peo.info)</span><br></pre></td></tr></table></figure></li><li><p>面向对象 — 工厂模式</p><ul><li>工厂模式<ul><li>入口——函数参数</li><li>加工——具体函数功能</li><li>出口——函数返回值</li></ul></li><li>工厂模式的不足之处 — 可读性与空间性问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> peo = &#123;&#125;;</span><br><span class="line">    peo.name = name</span><br><span class="line">    peo.age = age</span><br><span class="line">    peo.info = <span class="string">&quot;&quot;</span></span><br><span class="line">    peo.changeInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.info = <span class="built_in">this</span>.name + <span class="string">&#x27;未满18周岁&#x27;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.info = <span class="built_in">this</span>.name + <span class="string">&#x27;当前的年龄为：&#x27;</span> + <span class="built_in">this</span>.age</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> peo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> peo = user(<span class="string">&#x27;张三&#x27;</span>, <span class="number">28</span>)</span><br><span class="line">peo.changeInfo()</span><br><span class="line"><span class="built_in">console</span>.log(peo.info)</span><br></pre></td></tr></table></figure></li><li><p>面向对象 — 构造模式与原型模式</p><ul><li>构造模式核心原理<ul><li>new实例化对象</li><li>将构造函数的作用域赋给新对象（this）</li></ul></li><li>原型模式核心原理<ul><li>多个实例化对象的方法公用同一个空间</li><li>引用类型变量的相关问题</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">    <span class="built_in">this</span>.info = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">this</span>.changeInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.info = <span class="built_in">this</span>.name + <span class="string">&#x27;未满18周岁&#x27;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.info = <span class="built_in">this</span>.name + <span class="string">&#x27;当前的年龄为：&#x27;</span> + <span class="built_in">this</span>.age</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> peo = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>, <span class="number">28</span>)</span><br><span class="line">peo.changeInfo()</span><br><span class="line"><span class="built_in">console</span>.log(peo.info)</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">User.prototype.name = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">User.prototype.age = <span class="number">8</span></span><br><span class="line">User.prototype.info = <span class="string">&#x27;&#x27;</span></span><br><span class="line">User.prototype.changeInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.info = <span class="built_in">this</span>.name + <span class="string">&#x27;未满18周岁&#x27;</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = <span class="built_in">this</span>.name + <span class="string">&#x27;当前的年龄为：&#x27;</span> + <span class="built_in">this</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> peo = <span class="keyword">new</span> User()</span><br><span class="line">peo.name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">peo.age = <span class="number">28</span></span><br><span class="line">peo.changeInfo()</span><br><span class="line"><span class="built_in">console</span>.log(peo.info)</span><br></pre></td></tr></table></figure></li><li><p>面向对象 — 混合模式</p><ul><li>混合模式核心原理<ul><li>利用构造模式与原型模式各自的优势</li><li>构造模式利用参数为每个对象创建相应属性</li><li>原型模式实例化后对象的方法公用一个空间</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 混合模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">    <span class="built_in">this</span>.info = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">User.property.changeInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = <span class="built_in">this</span>.name + <span class="string">&#x27;未满18周岁&#x27;</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = <span class="built_in">this</span>.name + <span class="string">&#x27;当前的年龄为：&#x27;</span> + <span class="built_in">this</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> peo = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>, <span class="number">28</span>)</span><br><span class="line">peo.changeInfo()</span><br><span class="line"><span class="built_in">console</span>.log(peo.info)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法习题总结</title>
      <link href="/2020/06/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2020/06/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构练习题"><a href="#数据结构练习题" class="headerlink" title="数据结构练习题"></a>数据结构练习题</h1><h2 id="习题一绪论"><a href="#习题一绪论" class="headerlink" title="习题一绪论"></a>习题一绪论</h2><h3 id="1-1单项选择题"><a href="#1-1单项选择题" class="headerlink" title="1.1单项选择题"></a>1.1单项选择题</h3><ol><li><p>数据结构是一门研究非数值计算的程序设计问题中,数据元素的①（C.逻辑结构）、数据信息在计算机中的②（A.存储关系）以及一组相关的运算等的课程。 </p><p>​    ①A．操作对象  Ｂ．计算方法 Ｃ．逻辑结构 Ｄ．数据映象 </p><p>​    ②A．存储结构 Ｂ．关系 Ｃ．运算 Ｄ．算法 </p></li><li><p>数据结构DS(DataStruct)可以被形式地定义为DS=（D，R），其中D是① （B.数据元素）的有限集合，R是D上的② （D.关系）有限集合。 </p><p>​    ①A．算法 Ｂ．数据元素 Ｃ．数据操作 Ｄ．数据对象 </p><p>​    ②A．操作 Ｂ．映象 Ｃ．存储 Ｄ．关系 </p></li><li><p>在数据结构中，从逻辑上可以把数据结构分成 （C.线性结构和非线性结构）。 </p><p>​    A．动态结构和静态结构 Ｂ．紧凑结构和非紧凑结构 Ｃ．线性结构和非线性结构 Ｄ．内部结构和外部结构 </p></li><li><p>算法分析的目的是① （C.分析算法的效率以求改进），算法分析的两个主要方面是②（A.空间复杂性和时间复杂性） 。 </p><p>①A.找出数据结构的合理性        B.研究算法中的输入和输出的关系 </p><p>​    C.分析算法的效率以求改进    D.分析算法的易懂性和文档性 </p><p>②A.空间复杂性和时间复杂性    B.正确性和简明性 </p><p>​    C.可读性和文档性                    D.数据复杂性和程序复杂性</p></li><li><p>计算机算法指的是①（C.解决问题的有限运算系列），它必具备输入、输出和②（B.可行性、确定性和有穷性）等五个特性。 </p><p>①A.计算方法    B.排序方法     C.解决问题的有限运算序列    D.调度方法</p><p>②A.可行性、可移植性和可扩充性    B.可行性、确定性和有穷性 </p><p>​    C.确定性、有穷性和稳定性            D.易读性、稳定性和安全性  </p></li></ol><h3 id="1-2填空题（将正确的答案填在相应的空中）"><a href="#1-2填空题（将正确的答案填在相应的空中）" class="headerlink" title="1.2填空题（将正确的答案填在相应的空中）"></a>1.2填空题（将正确的答案填在相应的空中）</h3><ol><li><p>数据逻辑结构包括（线性结构）、（树形结构）和（图形结构）三种类型，树形结构和图形结构合称为（非线性结构） 。 </p></li><li><p>在线性结构中，第一个结点（没有）前驱结点，其余每个结点有且只有（1）个前驱结点；最后一个结点（没有）后续结点，其余每个结点有且只有（1）个后续结点。 </p></li><li><p>在树形结构中，树根结点没有（前驱）结点，其余每个结点有且只有（1）个直接前驱结点，叶子结点没有（后续）结点，其余每个结点的直接后续结点可以 （任意多个）。 </p></li><li><p>在图形结构中，每个结点的前驱结点数和后续结点数可以 （任意多个）。</p></li><li><p>线性结构中元素之间存在（一对一）关系，树形结构中元素之间存在（一对多）关系，图形结构中元素之间存在（多对多）关系。</p></li><li><p>算法的五个重要特性是（有穷性）（确定性）（可行性）（输入）（输出）。</p></li><li><p>分析下面算法（程序段），给出最大语句频度<u>n^2</u> ，该算法的时间复杂度是<u>O(n^2)</u>。 </p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n; j++)</span><br><span class="line">        A[i][j]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>8.分析下面算法（程序段），给出最大语句频度<u>n (n+1)/2</u>，该算法的时间复杂度是<u>O (n^2)</u>。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;i; j++)</span><br><span class="line">        A[i][j]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>9.分析下面算法（程序段），给出最大语句频度<u>n^3</u>，该算法的时间复杂度是<u>O(n^3)</u>。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line"></span><br><span class="line">s=s+B[i][j][k];</span><br><span class="line"></span><br><span class="line">sum=s;</span><br></pre></td></tr></table></figure><p>10.分析下面算法（程序段）给出最大语句频度<u>n^(1/2)</u>，该算法的时间复杂度是<u>O(n^(1/2))</u>。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i=s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (s&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">    i++;</span><br><span class="line">s+=i;   <span class="comment">//s=s+i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11.分析下面算法（程序段）给出最大语句频度<u>log2n</u>，该算法的时间复杂度是<u>O(log2n)</u>。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=n)</span><br><span class="line">    i=i*<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="1-3算法设计题"><a href="#1-3算法设计题" class="headerlink" title="1.3算法设计题"></a>1.3算法设计题</h3><ol><li><p>试写一算法,自大到小依次输出顺序读入的三个数X,Y和Z的值.</p></li><li><p>试写一算法,求出n个数据中的最大值。写出最大语句频度，该算法的时间复杂度。 </p></li></ol><blockquote><p>习题答案 </p><p>1.1     1. C , A  2. B,D  3. C  4. C, A  5. C,B </p><p>1.2     1.线性结构、树形结构、图形结构，非线性结构 </p><p>​            2.没有、1、没有、1</p><p>​            3.前驱、1、后续、任意多个 </p><p>​            4.任意多个 </p><p>​            5.一对一、一对多、多对多 </p><p>​            6.有穷性、确定性、可行性、输入、输出 </p><p>​            7.最大语句频度：n^2， 时间复杂度：. O (n^2)</p><p>​            8.最大语句频度：n (n+1)/2， 时间复杂度：.O (n^2)</p><p>​            9.最大语句频度：n^3， 时间复杂度：.O (n^3)</p><p>​            10.最大语句频度：n^(1/2)， 时间复杂度：.O (n^(1/2))</p><p>​            11.最大语句频度：log2n， 时间复杂度：.O (log2n )  </p></blockquote><h2 id="习题二线性表"><a href="#习题二线性表" class="headerlink" title="习题二线性表"></a>习题二线性表</h2><h3 id="2-1单项选择题"><a href="#2-1单项选择题" class="headerlink" title="2.1单项选择题"></a>2.1单项选择题</h3><ol><li><p>一个向量（即一批地址连续的存储单元）第一个元素的存储地址是100，每个元素的长度为2，则第5个元素的地址是（B.108）。 </p><p>A. 110   B. 108   C. 100  D. 120</p></li><li><p>线性表的顺序存储结构是一种（A．随机存取）的存储结构，而链式存储结构是一种（C．顺序存取）的存储结构。 </p><p>A．随机存取    B．索引存取    C．顺序存取    D．散列存取 </p></li><li><p>线性表的逻辑顺序与存储顺序总是一致的，这种说法（B.不正确）。 </p><p>A.正确    B.不正确</p></li><li><p>线性表若采用链式存储结构时，要求内存中可用存储单元的地址（D.连续或不连续都可以）。 </p><p>A.必须是连续的        B.部分地址必须是连续的</p><p> C.一定是不连续的    D.连续或不连续都可以</p></li><li><p>在以下的叙述中，正确的是（C. 线性表的链表存储结构适用于频繁插入/删除数据元素的情况 ）。 </p><p>A. 线性表的顺序存储结构优于链表存储结构 </p><p>B. 线性表的顺序存储结构适用于频繁插入/删除数据元素的情况</p><p>C. 线性表的链表存储结构适用于频繁插入/删除数据元素的情况 </p><p>D. 线性表的链表存储结构优于顺序存储结构 </p></li></ol><p>6.每种数据结构都具备三个基本运算：插入、删除和查找，这种说法（A.正确）。 </p><p>​    A.正确    B.不正确</p><ol start="7"><li><p>不带头结点的单链表head为空的判定条件是（A. head==NULL ）。 </p><p>A. head==NULL               B. head-&gt;next==NULL</p><p>C. head-&gt;next==head     D. head!=NULL</p></li><li><p>带头结点的单链表head为空的判定条件是（B. head-&gt;next==NULL）。 </p><p>A. head==NULL                B. head-&gt;next==NULL</p><p>C. head-&gt;next==head     D. head!=NULL</p></li><li><p>非空的循环单链表head的尾结点（由p所指向）满足（C. p-&gt;next==head）。 </p><p>A. p-&gt;next==NULL     B. p==NULL</p><p>C. p-&gt;next==head      D. p==head</p></li><li><p>在双向循环链表的p所指结点之后插入s所指结点的操作是（C. s-&gt;left=p; s-&gt;right=p-&gt;right; p-&gt;right=s; p-&gt;right-&gt;left=s;）。</p><p>A. p-&gt;right=s; s-&gt;left=p; p-&gt;right-&gt;left=s; s-&gt;right=p-&gt;right;</p><p>B. p-&gt;right=s; p-&gt;right-&gt;left=s; s-&gt;left=p; s-&gt;right=p-&gt;right;</p><p>C. s-&gt;left=p; s-&gt;right=p-&gt;right; p-&gt;right=s; p-&gt;right-&gt;left=s;</p><p>D. s-&gt;left=p; s-&gt;right=p-&gt;right; p-&gt;right-&gt;left=s; p-&gt;right=s;</p></li><li><p>在一个单链表中，已知q所指结点是p所指结点的前驱结点，若在q和p之间插入s结点，则执行（B. p-&gt;next=s-&gt;next;  s-&gt;next=p;）。</p><p>A. s-&gt;next=p-&gt;next; p-&gt;next=s;  </p><p>B. p-&gt;next=s-&gt;next;  s-&gt;next=p;</p><p>C. q-&gt;next=s;  s-&gt;next=p;</p><p>D. p-&gt;next=s;  s-&gt;next=q;</p></li><li><p>在一个单链表中，若p所指结点不是最后结点，在p之后插入s所指结点，则执行（B. s-&gt;next=p-&gt;next; p-&gt;next=s;）。 </p><p>A. s-&gt;next=p; p-&gt;next=s;   </p><p>B. s-&gt;next=p-&gt;next; p-&gt;next=s;</p><p>C. s-&gt;next=p-&gt;next; p=s;   </p><p>D. p-&gt;next=s; s-&gt;next=p;</p></li><li><p>在一个单链表中，若删除p所指结点的后续结点，则执行（A. p-&gt;next= p-&gt;next-&gt;next；）。 </p><p>A. p-&gt;next= p-&gt;next-&gt;next；</p><p>B. p= p-&gt;next; p-&gt;next= p-&gt;next-&gt;next； </p><p>C. p-&gt;next= p-&gt;next;     </p><p>D. p= p-&gt;next-&gt;next； </p></li><li><p>从一个具有n个结点的单链表中查找其值等于x结点时，在查找成功的情况下，需平均比较（D. (n+1)/2）个结点。 </p><p>A. n    B. n/2    C. (n-1)/2      D. (n+1)/2</p></li><li><p>在一个具有n个结点的有序单链表中插入一个新结点并仍然有序的时间复杂度是（B. O(n)）。 </p><p>A. O(1)   B. O(n)    C. O (n)     D. O (nlog2n)</p></li><li><p>给定有n个元素的向量，建立一个有序单链表的时间复杂度是（C. O (n)）。 </p><p>A. O(1)）B. O(n)    C. O (n)     D. O (n*log2n)</p></li></ol><h3 id="2-2填空题（将正确的答案填在相应的空中）"><a href="#2-2填空题（将正确的答案填在相应的空中）" class="headerlink" title="2.2填空题（将正确的答案填在相应的空中）"></a>2.2填空题（将正确的答案填在相应的空中）</h3><ol><li><p>单链表可以做<u>线性结表</u>的链接存储表示。 </p></li><li><p>在双链表中，每个结点有两个指针域，一个指向<u>前驱节点</u>，另一个指向<u>后继节点</u>。 </p></li><li><p>在一个单链表中p所指结点之前插入一个s (值为e)所指结点时，可执行如下操作： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q=head;</span><br><span class="line"><span class="keyword">while</span> (q-&gt;next!=p) q=q-&gt;next;</span><br><span class="line">s=newNode;  s-&gt;data=e;</span><br><span class="line">q-&gt;next=____;  <span class="comment">//填空 s</span></span><br><span class="line">s-&gt;next=____;  <span class="comment">//填空 p</span></span><br></pre></td></tr></table></figure></li><li><p>在一个单链表中删除p所指结点的后继结点时，应执行以下操作:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q= p-&gt;next;</span><br><span class="line">p-&gt;next=____;  <span class="comment">//填空 q-&gt;next</span></span><br><span class="line">delete____;  <span class="comment">//填空 q</span></span><br></pre></td></tr></table></figure></li><li><p>在一个单链表中p所指结点之后插入一个s所指结点时，应执行s-&gt;next=<u>p-&gt;next</u>和p-&gt;next=<u>s</u>的操作。</p></li><li><p>对于一个具有n个结点的单链表，在已知p所指结点后插入一个新结点的时间复杂度是<u>O(1)</u>;在给定值为x的结点后插入一个新结点的时间复杂度是<u>O(n)</u>。 </p></li></ol><h3 id="2-3算法设计题"><a href="#2-3算法设计题" class="headerlink" title="2.3算法设计题:"></a>2.3算法设计题:</h3><ol><li><p>设顺序表va中的数据元数递增有序。试写一算法，将x插入到顺序表的适当位置上，以保持该表的有序性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Insert_SqList</span><span class="params">(SqList &amp;va,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(va.length+<span class="number">1</span>&gt;maxsize) <span class="keyword">return</span> ERROR;</span><br><span class="line">    va.length++;</span><br><span class="line"><span class="keyword">for</span>(i=va.length<span class="number">-1</span>;va.elem[i]&gt;x&amp;&amp;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        va.elem[i+<span class="number">1</span>]=va.elem[i];</span><br><span class="line">    va.elem[i+<span class="number">1</span>]=x;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>试写一算法，实现顺序表的就地逆置，即利用原表的存储空间将线性表（a1,a2,….an）逆置为(an,an-1,….,a1)。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,tmp;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>, j=size<span class="number">-1</span>; i&lt;j; i++,j--)</span><br><span class="line">&#123;</span><br><span class="line">tmp=a[i];</span><br><span class="line">    a[i]=a[j];</span><br><span class="line">    a[j]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>已知线性表中的元素以值递增有序排列，并以单链表作存储结构。试写一算法，删除表中所有大于x且小于y的元素（若表中存在这样的元素）同时释放被删除结点空间。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(LinkList L,elemtype a,elemtype b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p= L;q=p-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(q!=L &amp;&amp; q-&gt;data&lt;a)</span><br><span class="line">    &#123;</span><br><span class="line">        p=q;</span><br><span class="line">q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">while</span>(q!=L &amp;&amp; q-&gt;data&lt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        r=q;</span><br><span class="line">q=q-&gt;next;<span class="built_in">free</span>(r);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(p!=q)p-&gt;next=q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>试写一算法，实现单链表的就地逆置(要求在原链表上进行)。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">converse</span><span class="params">(NODEPTR L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NODEPTR p,q;</span><br><span class="line"> p=L-&gt;next; q=p-&gt;next; </span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">while</span>(p)<span class="comment">/*对于当前结点p，用头插法将结点p插入到头结点之后*/</span> </span><br><span class="line">    &#123;</span><br><span class="line">  p-&gt;next=L-&gt;next;  </span><br><span class="line">        L-&gt;next=p;  </span><br><span class="line">        p=q;</span><br><span class="line">  q=q-&gt;next;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ol><blockquote><p>习题答案 </p><p>2.1    1. B  2. A, C  3. B  4. D  5. C  6. A  7. A  8. B 9. C  10. D</p><p>​        11.B  12.B  13.A   14.D   15.B  16.C</p><p>2.2    1. 线性结表</p><p>​          2.前驱结点、后继结点 </p><p>​          3.s, p</p><p>​          4.q-&gt;next, q</p><p>​          5.p-&gt;next, s      </p><p>​          6.  O (1) , O (n) </p></blockquote><h2 id="习题三栈和队列"><a href="#习题三栈和队列" class="headerlink" title="习题三栈和队列"></a>习题三栈和队列</h2><h3 id="3-1单项选择题"><a href="#3-1单项选择题" class="headerlink" title="3.1单项选择题"></a>3.1单项选择题</h3><ol><li><p>一个栈的入栈序列a，b，c，d，e，则栈的不可能的输出序列是（C. dceab）。 </p><p>A. edcba  B. decba  C. dceab  D. abcde</p></li><li><p>若已知一个栈的入栈序列是1，2，3，…，n，其输出序列为p1，p2，p3，…，pn，若p1=n，则pi为（C. n-i+1）。 </p><p>A. i    B. n=i   C. n-i+1   D.不确定 </p></li><li><p>栈结构通常采用的两种存储结构是（A.顺序存储结构和链式存储结构 ）。 </p><p>A.顺序存储结构和链式存储结构 </p><p>B. 散列方式和索引方式 </p><p>C. 链表存储结构和数组 </p><p>D. 线性存储结构和非线性存储结构 </p></li><li><p>判定一个顺序栈ST（最多元素为m0）为空的条件是（B. top==0）。 </p><p>A. top !=0  B. top==0   C. top !=m0  D. top==m0-1 </p></li><li><p>判定一个顺序栈ST（最多元素为m0）为栈满的条件是（D. top= =m0-1）。 </p><p>A. top！=0  B. top= =0   C. top！=m0  D. top= =m0-1</p></li><li><p>栈的特点是（B.先进后出），队列的特点是（A.先进先出）。 </p><p>A.先进先出    B.先进后出 </p></li><li><p>向一个栈顶指针为HS的链栈中插入一个s所指结点时，则执行（C.  s—＞next= HS; HS=s;）。 (不带空的头结点)</p><p>A. HS—＞next=s;</p><p>B. s—＞next= HS—＞next; HS—＞next=s;</p><p>C.  s—＞next= HS; HS=s;</p><p>D. s—＞next= HS; HS= HS—＞next;</p></li><li><p>从一个栈顶指针为HS的链栈中删除一个结点时，用x保存被删结点的值，则执行（B. x=HS—＞data;）。(不带空的头结点)</p><p>A. x=HS; HS= HS—＞next;      </p><p>B. x=HS—＞data;</p><p>C. HS= HS—＞next; x=HS—＞data;   </p><p>D. x=HS—＞data; HS= HS—＞next;</p></li><li><p>一个队列的数据入列序列是1，2，3，4，则队列的出队时输出序列是（B. 1，2，3，4）。 </p><p>A. 4，3，2，1     </p><p>B. 1，2，3，4</p><p>C. 1，4，3，2      </p><p>D. 3，2，4，1</p></li><li><p>判定一个循环队列QU（最多元素为m0）为空的条件是（C. front== rear）。</p><p>A. rear - front==m0   </p><p>B. rear-front-1==m0</p><p>C. front== rear     </p><p>D. front== rear+1</p></li><li><p>判定一个循环队列QU（最多元素为m0, m0= =Maxsize-1）为满队列的条件是（A. ((rear- front)+ Maxsize)% Maxsize ==m0）。 </p><p>A. ((rear- front)+ Maxsize)% Maxsize ==m0</p><p>B. rear-front-1==m0</p><p>C. front==rear</p><p>D. front== rear+1</p></li><li><p>循环队列用数组A[0，m-1]存放其元素值，已知其头尾指针分别是front和rear，则当前队列中的元素个数是（A. (rear-front+m)%m）。 </p><p>A. (rear-front+m)%m</p><p>B. rear-front+1</p><p>C.rear-front-1</p><p>D. rear-front</p></li><li><p>栈和队列的共同点是（C.只允许在端点处插入和删除元素）。 </p><p>A.都是先进后出</p><p>B.都是先进先出 </p><p>C.只允许在端点处插入和删除元素</p><p>D.没有共同点 </p></li></ol><h3 id="3-2填空题（将正确的答案填在相应的空中）"><a href="#3-2填空题（将正确的答案填在相应的空中）" class="headerlink" title="3.2填空题（将正确的答案填在相应的空中）"></a>3.2填空题（将正确的答案填在相应的空中）</h3><ol><li><p>向量、栈和队列都是<u>线性</u>结构，可以在向量的<u>任何</u>位置插入和删除元素；对于栈只能在<u>栈顶</u>插入和删除元素；对于队列只能在<u>队首</u>插入元素和<u>队尾</u>删除元素。 </p></li><li><p>向一个长度为n的向量的第i个元素（1≤i≤n+1）之前插入一个元素时，需向后移动<u>n-i+1</u>个元素。 </p></li><li><p>向一个长度为n的向量中删除第i个元素（1≤i≤n）时，需向前移动<u>n-i</u>个元素。</p></li><li><p>在具有n个单元的循环队列中，队满时共有<u>n-1</u>个元素。 </p></li></ol><blockquote><p>习题答案 </p><p>​    3.1    1. C  2. C  3. A  4. B  5.D  6. BA  7.C  8. B  9. C  10. C 11.A  12. A  13.C</p><p>​    3.2    1.线性、任何、栈顶、队尾、队首</p><p>​              2.n-i+1     </p><p>​              3.n-i</p><p>​              4.n-1</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 习题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器运行原理</title>
      <link href="/2020/06/25/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2020/06/25/%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="从用户在浏览器地址栏输入网址，到看整个页面，中间发生了那些事情？"><a href="#从用户在浏览器地址栏输入网址，到看整个页面，中间发生了那些事情？" class="headerlink" title="从用户在浏览器地址栏输入网址，到看整个页面，中间发生了那些事情？"></a>从用户在浏览器地址栏输入网址，到看整个页面，中间发生了那些事情？</h2><ul><li>HTTP请求阶段</li><li>HTTP响应阶段</li><li>浏览器渲染阶段</li></ul><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>进程(Process):是计算机中的程序关于某数据集合上的一次运行活动,是系统进行资源分配和调度的基本单位,是操作系统结构的基础。</li><li>线程(Thread):是操作系统能够进行运算调度的最小单位。</li><li>栈内存(Stack):在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配</li></ul><h2 id="运行过程图解："><a href="#运行过程图解：" class="headerlink" title="运行过程图解："></a>运行过程图解：</h2><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe@latest/2020/06/24/c00cc471a666c5444c4cf7a669ac5664.png" alt=""></p><h2 id="DOM的重绘和回流Repaint-amp-Reflow"><a href="#DOM的重绘和回流Repaint-amp-Reflow" class="headerlink" title="DOM的重绘和回流Repaint &amp; Reflow"></a>DOM的重绘和回流Repaint &amp; Reflow</h2><ul><li><p>重绘：元素样式的改变（但宽高、大小、位置等不变）</p><p>如 outline，visibility，color，background-color等</p></li><li><p>回流：元素的大小或位置发生了变化（当页面布局和几何信息发生变化的时候），触发了重新布局，导致渲染树重新计算布局和渲染</p></li></ul><p>注意：回流一定会触发重绘，而重绘不一定回流</p><h2 id="性能优化："><a href="#性能优化：" class="headerlink" title="性能优化："></a>性能优化：</h2><ol><li><p>减少HTTP的请求次数和大小</p><ul><li>资源合并压缩</li><li>图片懒加载</li><li>音视频走流文件</li><li>…</li></ul></li><li><p>避免DOM的回流</p><ul><li><p>放弃传统操作dom的时代，基于vue/react开始数据影响视图模式</p><p>mvvm/mvc/virtual dom/dom diff ……</p></li></ul><ul><li><p>分离读写操作（现代浏览器都有渲染队列机制）</p><p>offsetTop、offsetLeft、offsetWidth、offsetHeight、clientTop、clientLeft、clientWidth、clientHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、getComputedStyle、currenStyle…会重新渲染队列。</p></li><li><p>样式集中改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.style.cssText = <span class="string">&#x27;width:20px;height:20px;&#x27;</span></span><br><span class="line">div.className = <span class="string">&#x27;box&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>缓存布局信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div.style.left = div.offsetLeft + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">div.style.Top = div.offsetTop + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"><span class="comment">//改为</span></span><br><span class="line"><span class="keyword">var</span> curLeft = div.offsetLeft;</span><br><span class="line"><span class="keyword">var</span> curTop = div.offserTop;</span><br><span class="line">div.style.left = curleft + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">div.style.top = curTop + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>元素批量修改</p><p>文档碎片：createDocumentFragment</p><p>模板字符串拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let str = ``;</span><br><span class="line">for(let i=0;i&lt;5;i++)&#123;</span><br><span class="line">str+=`&lt;li&gt;$&#123;i&#125;&lt;\li&gt;`</span><br><span class="line">&#125;</span><br><span class="line">box.innerHTML=str;</span><br></pre></td></tr></table></figure></li><li><p>动画效果应用到position属性为absolute或fixed的元素上（脱离文档流）</p></li><li><p>CSS3硬件加速（GPU加速）</p><p>transform、opacity、filters…</p></li><li><p>牺牲平滑换取速度</p></li><li><p>避免table布局和使用css的JavaScript表达式</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《毛泽东思想和中国特色社会理论体系概论》知识点</title>
      <link href="/2020/06/21/maogai/"/>
      <url>/2020/06/21/maogai/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p>1938年，中共六届六中全会，毛泽东《论新阶段》首次提出马克思主义中国化科学命题</p></li><li><p>中共七大将毛泽东思想确立为党的指导思想写入党章。</p></li><li><p>毛泽东思想形成的时代背景是战争与革命成为时代主题</p></li><li><p>毛泽东思想形成的实践基础是中国共产党领导的革命和建设的实践</p></li><li><p>马克思主义中国化的两大理论成果是毛泽东思想和中国特色社会主义理论体系。</p></li><li><p>中国革命新道路理论理论的提出是毛泽东思想形成的标志。</p></li><li><p>人民军队建设的根本原则是党对军队的绝对领导</p></li><li><p>为为人民服务是人民军队的唯一宗旨。</p></li><li><p>毛泽东思想活的灵魂三个基本方面是：实事求是、群众路线、独立自主。</p></li><li><p>邓小平理论是中国特色社会主义理论的开创之作。</p></li><li><p>我国正处于并将长期处于社会主义初级阶段，是当代中国最大国情，也是建设中国特色社会主义总依据。</p></li><li><p>习近平新时代中国特色社会主义思想是马克思主义中国化最新成果。</p></li><li><p>毛泽东对党的思想路线作系统论述的两篇哲学文章是《实践论》和《矛盾论》</p></li><li><p>实事求是既是党的思想路线的核心，也是马克思主义中国化理论成果的精髓。</p></li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p><strong>一、马克思主义中国化的科学内涵是什么？</strong></p><p>1.紧密联系中国实际，运用马克思主义解决中国革命、建设和改革中的问题。</p><p>2.总结中国革命、建设和改革的实践经验和历史经验，坚持和发展马克思主义。</p><p>3.把马克思主义植根于中国优秀文化之中，赋予马克思主义以鲜明的中国特色。</p><p><strong>二、马克思主义中国化两大理论成果的关系是什么？</strong></p><p>在马克思主义的进程中产生了两大理论成果：毛泽东思想和中国特色社会主义理论体系。</p><p>1.毛泽东思想是中国特色社会主义理论体系的思想渊源。</p><p>2.中国特色社会主义理论体系在新的历史条件下进一步丰富和发展了毛泽东思想。</p><p>3.毛泽东思想和中国特色社会主义理论体系都是马克思列宁主义在中国的运用和发展。</p><p><strong>三、简要阐述毛泽东思想主要内容</strong></p><ul><li><p>新民主主义革命理论</p></li><li><p>社会主义革命和社会主义建设理论</p></li><li><p>革命军队建设和军事战略的理论</p></li><li><p>政策和策略的理论</p></li><li><p>思想政治工作和文化工作的理论</p></li><li><p>党的建设理论</p></li></ul><p><strong>四、概述党的思想路线主要内容。</strong></p><p>党的思想路线是一切从实际出发，理论联系实际，实事求是，在实践中检验真理和发展真理。</p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p>近代中国是一个半殖民地半封建的社会。</p></li><li><p>1948年，毛泽东在《晋绥干部会议上讲话》中完整表述了新民主主义革命总路线。</p></li><li><p>毛泽东初步界定共产党人思想路线基本含义的文章是《反对本本主义》。</p></li><li><p>中国革命的主要斗争形式是武装斗争。</p></li><li><p>近代中国社会是一个“两头小、中间大”的社会，“两头”是指什么？</p></li><li><p>近代中国人民两大历史任务是什么？</p></li><li><p>无产阶级领导权是中国革命的中心问题。</p></li><li><p>新民主主义革命主要内容是没收封建地主阶级的土地归农民所有。</p></li><li><p>中国共产党的三大优良作风是：理论联系实际、密切联系群众、批评与自我批评</p></li></ol><h2 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h2><p><strong>一．近代中国社会主要矛盾是什么？</strong></p><p>主要矛盾是：帝国主义和中华民族的矛盾；封建主义和人民大众的矛盾。</p><p>而帝国主义和中华民族的矛盾是最主要的矛盾。</p><p><strong>二．概述新民主主义革命总路线</strong></p><p>无产阶级领导的，人民大众的，反对帝国主义、封建主义和官僚资本主义的革命</p><p><strong>三.新民主主义革命政治纲领、经济纲领、文化纲领是什么？</strong></p><ul><li><p>新民主主义的政治纲领是——推翻帝国主义和封建主义的统治，建立一个无产阶级领导的、以工农联盟为基础的、各革命阶级联合专政的新民主主义的共和国。</p></li><li><p>新民主主义的经济纲领是——没收封建地主阶级的土地归农民所有，没收官僚资产阶级的垄断资本归新民主主义的国家所有，保护民族工商业。</p></li><li><p>新民主主义的文化纲领——无产阶级领导的人民大众的反帝反封建的文化，即民族的科学的大众的文化。</p></li></ul><p><strong>四．新民主主义革命对象、性质、动力、前途是什么？</strong></p><p>中国新民主主义革命的对象：1.帝国主义 2.封建主义 3.官僚资本资本主义，帝国主义是中国革命的主要对象。 </p><p>中国新民主主义革命的性质：资产阶级民主革命。</p><p>中国新民主主义革命的动力：包括无产阶级、农民阶级、城市小资产阶级和民族资产阶级。</p><p>中国新民主主义革命的前途：社会主义。</p><p><strong>五.中国革命走农村包围城市、武装夺取政权道路的必要性、可能性是什么？</strong></p><p>必要性：</p><p>由中国的具体国情所决定：</p><p>在半殖民地半封建的中国社会中，内无民主制度而受封建主义的压迫，外无民族独立而受帝国主义的压迫。</p><p>近代中国是一个农业大国，农民是无产阶级可靠的同盟军和主力军。</p><p>可能性：</p><p>同样是由中国的具体国情所决定</p><ul><li><p>社会政治经济发展极度不平衡</p></li><li><p>人民革命的愿望强烈</p></li></ul><p>全国革命形式的继续向前发展，为在农村建设革命根据地提供了客观条件。</p><p>相当力量正式红军的存在，为农村革命根据地的创立、巩固和发展提供了坚强后盾。</p><p>党的领导有力及其政策的不错误，为农村革命根据地建设和发展提供了重要的主观条件。</p><p><strong>六.新民主主义革命的三大法宝是什么？三大法宝之间的相互关系是什么？</strong></p><p>三大法宝：统一战线，武装斗争，党的建设。</p><p>三者关系：统一战线和武装斗争是中国革命的两个基本特点，是战胜敌人的两个基本武器。统一战线是实行武装斗争的统一战线，武装斗争是统一战线的中心支柱，党的组织则是掌握统一战线和武装斗争这两个武器以实行对敌冲锋陷阵的英勇战士</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p>在新民主主义社会经济成分中，社会主义国营经济居领导地位</p></li><li><p>在农业社会主义改造中具有完全社会主义性质的是高级社</p></li><li><p>社会主义改造的完成，标致社会主义制度在中国确立。</p></li></ol><h2 id="思考题-2"><a href="#思考题-2" class="headerlink" title="思考题"></a>思考题</h2><p><strong>一、过渡时期的总路线是什么？什么是“一化三改”？</strong></p><p>党在过渡时期的总路线的完整表述:“从中华人民共和国成立，到社会主义改造基本完成，这是一个过渡时期，党在这个过渡时期的总路线和总任务,是要在一个相当长的时期内,逐步实现国家的社会主义工业化,并逐步实现国家对农业,对手工业和对资本主义工商业的社会主义改造。”</p><p>党在过渡时期的总路线的主要内容被概括为“一化三改”</p><p>其中：</p><p>“一化”——即社会主义工业化</p><p>“三改”——即对个体农业，手工业和对资本主义工商业的社会主义改造。</p><p><strong>二、什么是和平赎买？</strong></p><p>和平赎买并不是国家直接买过来，而是在公私合营变为国有后让资本家在其中获得部分利润。</p><p><strong>三．社会主义改造的历史经验是什么？举例说明？</strong></p><p>1.坚持社会主义工业化建设与社会主义改造同时并举。</p><p>1953-1957年，第一个五年计划与三大改造完成。</p><p>2.采取积极引导、逐步过渡的方式。</p><p>我国对农业、手工业、资本主义工商业都进行着改造。</p><p>3.用和平方法进行改造。</p><p>资本主义工商业和平赎买。</p><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><h2 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p>毛泽东《论十大关系》发表，标志党探索社会主义建设道路的良好开端。</p></li><li><p>《论十大关系》确定的社会主义建设的基本方针是：调动一切积极因素，为社会主义建设服务</p></li><li><p>毛泽东系统论述社会主义社会矛盾理论的报告是《关于正确处理人民内部矛盾的问题》</p></li><li><p>关于社会主义发展阶段，毛泽东提出：社会主义可分为不发达的社会主义和比较发达的社会主义两个阶段。</p></li><li><p>陈云在所有制结构调整方面提出“三个主体、三个补充”。</p></li></ol><h2 id="思考题-3"><a href="#思考题-3" class="headerlink" title="思考题"></a>思考题</h2><p><strong>一，我国社会主义社会的基本矛盾是什么？</strong></p><p>社会主义社会的基本矛盾是生产力和生产关系，经济基础和上层建筑之间的矛盾。</p><p><strong>二，什么是“三个主体、三个补充”的思想？</strong></p><p>①在工商业经营方面，国家经济和集体经济是工商业的主体，一定数量的个体经济是国家经济和集体经济的补充；</p><p>②在生产计划方面，计划生产是工农业生产的主体，按照市场变化在国家计划许可范围内的自由生产是计划生产的补充；</p><p>③在社会主义的统一市场里，国家市场是它的主体，一定范围内的国家领导的自由市场是国家市场的补充。</p><p><strong>三，社会主义建设道路初步探索的意义是什么？</strong></p><p>1.巩固和发展了社会主义制度</p><p>2.为开创中国特色社会主义提供了宝贵经验、理论准备、物质基础。</p><p>3.丰富了科学社会主义的理论和实践。</p><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><h2 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p>社会主义初级阶段开始于1956年。</p></li><li><p>中共十三大第一次系统阐述社会主义初级阶段理论和党在初级阶段基本路线</p></li><li><p>中共十九大关于社会主义初级阶段基本路线中的奋斗目标是什么？</p></li><li><p>实现社会主义初级阶段奋斗目标的根本立足点自力更生、艰苦创业。</p></li><li><p>南京大屠杀死难者国家公祭日是12月13日。</p></li><li><p>中国人民抗日战争胜利纪念日是9月3日。</p></li><li><p>联合国规定的世界环境日是6月5日。 </p></li><li><p>我国宪法日是12月4日。</p></li></ol><h2 id="思考题-4"><a href="#思考题-4" class="headerlink" title="思考题"></a>思考题</h2><p><strong>一，党在社会主义初级阶段基本路线的主要内容是什么？</strong></p><p>1.以经济建设为中心，坚持四项基本原则，坚持改革开放。</p><p>2.建设“富强、民主、文明、和谐的社会主义现代化国家”</p><p>3.“一个中心，两个基本点”——是基本路线最主要的内容。</p><p>4.“领导和团结全国各族人民 “自力更生，艰苦创业”</p><p><strong>二，党在社会主义初级阶段科学含义是什么？十三大明确指出社会主义初级阶段的“科学含义”</strong></p><p>1.就社会性质而言，我国社会已经是社会主义社会，我们必须坚持而不能离开社会主义。</p><p>2.我国的社会主义还处在初级阶段，我们必须从这个实际出发而不能超越这个阶段特定含义。</p><p>这里所说的初级阶段，不是泛指任何国家进入社会主义都会经历的起始阶段，而是特指我国在生产力发展水平不高、商品经济不发达条件下建设社会主义必然要经历的特定历史阶段。</p><p><strong>三，党在社会主义初级阶段基本纲领是什么？</strong> </p><p>实现社会主义初级阶段的基本纲领——必须正确认识和处理最高纲领和最低纲领之间的辩证统一关系</p><p>1.实现共产主义，是无产阶级政党的最高纲领</p><p>2.中国共产党制定的民主革命纲领、向社会主义过渡纲领、建设中国特色社会主义的纲领，都是党在特定历史阶段的最低纲领</p><p>3.最高纲领与最低纲领既有区别，又有联系，辩证统一于实现共产主义奋斗的全部历史进程。</p><p><strong>四，中共十九大关于社会主义初级阶段主要矛盾表述是什么？</strong></p><p>十九大报告：中国社会主要矛盾已发生变化，但仍将长期处于社会主义初级阶段。</p><p>习近平说，我国社会主要矛盾已经转化为人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾。</p><p><strong>第六章</strong></p><p>知识点</p><ol><li><p>建设中国特色社会主义首要的基本理论问题是“什么是社会主义，怎样建设社会主义。”</p></li><li><p>邓小平对社会主义本质做的总结性的理论概括是在1992年南方谈话。</p></li><li><p>社会主义根本任务是解放和发展生产力</p></li><li><p>在当代中国，坚持发展是硬道理的本质要求就是坚持科学发展。</p></li><li><p>我国全面建成小康社会是在2020年，现在是全面建成小康社会的决胜阶段。</p></li></ol><p>思考题</p><p><strong>一，社会主义本质是什么？</strong></p><p>社会主义的本质，是解放生产力，发展生产力，消灭剥削，消灭两极分话，最终达到共同富裕。”</p><p>社会主义本质的科学内涵是什么？</p><p>1.解放和发展生产力纳入社会本质</p><p>2.突出强调消灭剥削，消除两极分化，最终达到共同富裕</p><p><strong>二，什么是三步走发展战略？</strong></p><p>1.第一步，从1981年到1990年，实现国民生产总值比1980年翻一番，解决人民的温饱问题；</p><p>2.第二步，从199年到20世纪末，使国民生产总值再翻一番，达到小康水平；</p><p>3.第三步，到21世纪中叶，国民生产总值再翻两番，达到中等发达国家水平，基本实现现代化。</p><p><strong>三，中国梦的核心内容是什么？实现中国梦的路径是什么？</strong></p><p>核心内容：国家富强、民族振兴、人民幸福</p><p>路径：</p><p>中国梦的实现途径——走中国道路、弘扬中国精神、凝聚中国力量</p><p>1.走中国道路——就是走中国特色社会主义道路；</p><p>2.弘扬中国精神——就是弘扬以爱国主义为核心的民族精神和以改革创新为核心的时代精神：</p><p>3.凝聚中国力量——就是要凝聚全国各族人民大团结的力量；</p><p>4.实干才能梦想成真。</p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毛概 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2020/06/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="复杂性分析"><a href="#复杂性分析" class="headerlink" title="复杂性分析"></a>复杂性分析</h1><p>对各种操作的时间复杂性的分析。</p><p>主要是链表，树，排序等简单一些的分析。 分析的时候，从简单的入手，学会方法。后续的各种都可能让你分析时间复杂度。</p><h1 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h1><ol><li><p>链表</p><ul><li><p>线性链表（顺序表和单链表）</p></li><li><p>循环链表</p></li><li><p>双向链表</p></li></ul></li><li><p>队列（循环队列）</p></li><li><p>栈</p></li></ol><ul><li><p>链表主要操作：找某一个元素，插入一个（在哪个位置增加），删除一个（在哪个位置删除）。 </p></li><li><p>栈：查找，插入（位置固定），删除（位置固定） </p></li><li><p>队列：查找，插入（位置固定），删除（位置固定）</p></li></ul><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p><strong>基本概念</strong></p><p>​        二叉树是每个节点最多有两个子树的有序树。二叉树常被用于实现二叉查找树和二叉堆。值得注意的是，二叉树不是树的特殊情形。 </p><p>​        二叉树是每个结点最多有两个子树的有序树。通常根的子树被称作“左子树”（leftsubtree）和“右子树”（right subtree）。二叉树常被用作二叉查找树和二叉堆或是二叉排序树。二叉树的每个结点至多只有二棵子树(不存在出度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。</p><p>​        二叉树不是树的一种特殊情形，尽管其与树有许多相似之处，但树和二叉树有两个主要差别： </p><ol><li><p>树中结点的最大度数没有限制，而二叉树结点的最大度数为2；</p></li><li><p>树的结点无左、右之分，而二叉树的结点有左、右之分。 </p></li></ol><p>二叉树是递归定义的，其结点有左右子树之分，逻辑上二叉树有五种基本形态： </p><p>空二叉树——如图(a)</p><ul><li><p>只有一个根结点的二叉树——如图(b)；</p></li><li><p>只有左子树——如图(c)； </p></li><li><p>只有右子树——如图(d)； </p></li><li><p>完全二叉树——如图(e)</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe@latest/2020/06/21/300ec1fed9160ca3fd5b41aa5000fcc1.png" alt=""></p><p>注意：尽管二叉树与树有许多相似之处，但二叉树不是树的特殊情形。</p><p><strong>性质</strong></p><ol><li><p>在非空二叉树中，第i层的结点总数不超过, i&gt;=1； </p></li><li><p>深度为h的二叉树最多有2^h-1个结点(h&gt;=1)，最少有h个结点；</p></li><li><p>对于任意一棵二叉树，如果其叶结点数为N0，而度数为2的结点总数为N2，则N0=N2+1；</p></li><li><p>具有n个结点的完全二叉树的深度为</p></li><li><p>有N个结点的完全二叉树各结点如果用顺序方式存储，则结点之间有如下关系： 若I为结点编号则 如果I&gt;1，则其父结点的编号为I/2； 如果2<em>I&lt;=N，则其左儿子（即左子树的根结点）的编号为2</em>I；若2<em>I&gt;N，则无左儿子； 如果2</em>I+1&lt;=N，则其右儿子的结点编号为2<em>I+1；若2</em>I+1&gt;N，则无右儿子。 </p></li><li><p>给定N个节点，能构成h(N)种不同的二叉树。h(N)为卡特兰数的第N项。h(n)=C(2*n，n)/(n+1)。(设有i个枝点，I为所有枝点的道路长度总和，J为叶的道路长度总和J=I+2i </p></li></ol><p><strong>存储结构</strong></p><p>顺序存储表示 </p><p> <img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe@latest/2020/06/21/83d3b13536268a30ea2c0e2fa3011526.png" alt=""></p><p>二叉树可以用数组或线性表来存储，而且如果这是满二叉树，这种方法不会浪费空间。用这种紧凑排列，如果一个结点的索引为i，它的子结点能在索引2i+1和2i+2找到，并且它的父节点（如果有）能在索引floor((i-1)/2)找到（假设根节点的索引为0）。这种方法更有利于紧凑存储和更好的访问的局部性，特别是在前序遍历中。然而，它需要连续的存储空间，这样在存储高度为h的n个结点组成的一般普通树时将会浪费很多空间。一种最极坏的情况下如果深度为h的二叉树每个节点只有右孩子需要占用2的h次幂减1，而实际却只有h个结点，空间的浪费太大，这是顺序存储结构的一大缺点。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉树的顺序存储表示*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TREE_SIZE 100 <span class="comment">/*二叉树的最大节点数*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> TElemType SqBiTree[MAX_TREE_SIZE]; <span class="comment">/* 0号单元存储根节点*/</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> level,order; <span class="comment">/*节点的层，本层序号(按满二叉树计算) */</span></span><br><span class="line">&#125;position;</span><br></pre></td></tr></table></figure><p><strong>二叉链表存储表示</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二叉樹的二叉鏈表存儲表示*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">TElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span> <span class="comment">/*左右孩子指針*/</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure><p><strong>遍历算法</strong></p><p> 二叉树的遍历三种方式，如下： </p><ol><li><p>前序遍历（DLR），首先访问根结点，然后遍历左子树，最后遍历右子树。简记根-左-右。 </p></li><li><p>中序遍历（LDR），首先遍历左子树，然后访问根结点，最后遍历右子树。简记左-根-右。 </p></li><li><p>后序遍历（LRD），首先遍历左子树，然后遍历右子树，最后访问根结点。简记左-右-根。</p></li></ol><p><strong>深度优先遍历</strong></p><p>在深度优先中，我们希望从根结点访问最远的结点。和图的深度优先搜索不同的是，不需记住访问过的每一个结点，因为树中不会有环。 </p><p><strong>广度优先遍历</strong> </p><p>和深度优先遍历不同，广度优先遍历会先访问离根节点最近的节点。 </p><p>完全二叉树，满二叉树 </p><ol><li><p>满二叉树：一棵深度为k，且有<strong>2k-1</strong>个节点称之为满二叉树 </p></li><li><p>完全二叉树：深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树</p></li></ol><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>树（tree）是包含n（n&gt;0）个结点的有穷集，其中：</p><ol><li><p>每个元素称为结点（node）；</p></li><li><p>有一个特定的结点被称为根结点或树根（root）。</p></li><li><p>除根结点之外的其余数据元素被分为m（m≥0）个互不相交的集合T1，T2，、、、,Tm-1，其中每一个集合Ti（1&lt;=i&lt;=m）本身也是一棵树，被称作原树的子树（subtree）。 </p></li></ol><p><strong>树也可以这样定义</strong>：树是由根结点和若干颗子树构成的。树是由一个集合以及在该集合上定义的一种关系构成的。集合中的 元素称为树的结点，所定义的关系称为父子关系。父子关系在树的结点之间建立了一个层次结构。在这种层次结构中有一个结点具有特殊的地位，这个结点称为该树 的根结点，或称为树根。 </p><p>我们可以形式地给出树的递归定义如下:</p><p>单个结点是一棵树，树根就是该结点本身。 </p><p>​        设T1,T2,..,Tk是树，它们的根结点分别为n1,n2,..,nk。用一个新结点n作为 n1,n2,..,nk的父亲，则得到一棵新树，结点n就是新树的根。我们称n1,n2,..,nk为一组兄弟结点，它们都是结点n的子结点。我们还称 T1,T2,..,Tk为结点n的子树。 空集合也是树，称为空树。空树中没有结点。 </p><p> <img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe@latest/2020/06/21/2eab75f392660b1272a2bc94cdc4d68d.png" alt=""></p><p><strong>术语</strong> </p><p><strong>1.</strong> <strong>节点的度</strong>：一个节点含有的子树的个数称为该节点的度；</p><p><strong>2.</strong> <strong>树的度</strong>：一棵树中，最大的节点的度称为树的度；</p><p><strong>3.</strong> <strong>叶节点或终端节点</strong>：度为零的节点；</p><p><strong>4.</strong> <strong>非终端节点或分支节点</strong>：度不为零的节点； </p><p><strong>5.</strong> <strong>父亲节点或父节点</strong>：若一个节点含有子节点，则这个节点称为其子节点的父节点；</p><p><strong>6.</strong> <strong>孩子节点或子节点</strong>：一个节点含有的子树的根节点称为该节点的子节点；</p><p><strong>7.</strong> <strong>兄弟节点</strong>：具有相同父节点的节点互称为兄弟节点； </p><p><strong>8.</strong> <strong>节点的层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推； </p><p><strong>9.</strong> <strong>树的高度或深度</strong>：树中节点的最大层次； </p><p><strong>10.</strong> <strong>堂兄弟节点</strong>：父节点在同一层的节点互为堂兄弟； </p><p><strong>11.</strong> <strong>节点的祖先</strong>：从根到该节点所经分支上的所有节点； </p><p><strong>12.</strong> <strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙。</p><p><strong>13.</strong> <strong>森林</strong>：由m（m&gt;=0）棵互不相交的树的集合称为森林； </p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p><strong>父节点表示法</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*树节点的定义*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TREE_SIZE 100typedef struct</span></span><br><span class="line">&#123;</span><br><span class="line">TElemType data;</span><br><span class="line"><span class="keyword">int</span> parent; <span class="comment">/*父节点位置域*/</span></span><br><span class="line">&#125;PTNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">PTNode nodes[MAX_TREE_SIZE];</span><br><span class="line"><span class="keyword">int</span> n; <span class="comment">/*节点数*/</span></span><br><span class="line">&#125;PTree;</span><br></pre></td></tr></table></figure><p><strong>孩子链表表示法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*树的孩子链表存储表示*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> </span></span><br><span class="line"><span class="class">&#123;</span> <span class="comment">//孩子节点 </span></span><br><span class="line"><span class="keyword">int</span> child;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; *ChildPtr;<span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data；<span class="comment">//节点的数据元素</span></span><br><span class="line">ChildPtr firstchild；<span class="comment">//孩子链表头指针</span></span><br><span class="line">&#125; CTBox;<span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">CTBox nodes[MAX_TREE_SIZE]；</span><br><span class="line"><span class="keyword">int</span> n, r；<span class="comment">//节点数和根节点的位置</span></span><br><span class="line">&#125; CTree;</span><br></pre></td></tr></table></figure><h1 id="森林"><a href="#森林" class="headerlink" title="森林"></a>森林</h1><p>森林(forest)是m(m≥0)棵互不相交的树的集合。任何一棵树，删除了根结点就变成了森林。</p><h1 id="森林、树与二叉树的转换-将树转换为二叉树"><a href="#森林、树与二叉树的转换-将树转换为二叉树" class="headerlink" title="森林、树与二叉树的转换 将树转换为二叉树"></a>森林、树与二叉树的转换 将树转换为二叉树</h1><p> 树中每个结点最多只有一个最左边的孩子(长子)和一个右邻的兄弟。按照这种关系很自</p><p>然地就能将树转换成相应的二叉树：</p><ol><li><p>在所有兄弟结点之间加一连线； </p></li><li><p>对每个结点，除了保留与其长子的连线外，去掉该结点与其它孩子的连线。</p></li></ol><p>注意：由于树根没有兄弟，故树转化为二叉树后，二叉树的根结点的右子树必为空。 </p><p><strong>将一个森林转换为二叉树</strong></p><p>具体方法是： </p><ol><li><p>将森林中的每棵树变为二叉树 </p></li><li><p>因为转换所得的二叉树的根结点的右子树均为空，故可将各二叉树的根结点视为兄弟从左至右连在一起，就形成了一棵二叉树。 </p></li></ol><p><strong>二叉树到树、森林的转换</strong> </p><p>把二叉树转换到树和森林自然的方式是：若结点x是双亲y的左孩子，则把x的右孩子，右孩子的右孩子,都与y用连线连起来，最后去掉所有双亲到右孩子的连线。 </p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="二元组的定义"><a href="#二元组的定义" class="headerlink" title="二元组的定义"></a>二元组的定义</h2><p>图G是一个有序二元组(V,E)，其中V称为顶集(VerticesSet)，E称为边集(Edgesset)，E与V不相交。它们亦可写成V(G)和E(G)。 E的元素都是二元组，用(x,y)表示，其中x,y∈V。 </p><h2 id="三元组的定义"><a href="#三元组的定义" class="headerlink" title="三元组的定义"></a>三元组的定义</h2><p>图G是指一个三元组(V,E,I)，其中V称为顶集，E称为边集，E与V不相交；I称为关联函数，I将E中的每一个元素映射到 。如果e被映射到(u,v)，那么称边e连接顶点u,v，而u,v则称作e的端点，u,v此时关于e相邻。同时，若两条边i,j有一个公共顶点u，则称i,j关于u相邻。 </p><h2 id="有-无向图"><a href="#有-无向图" class="headerlink" title="有/无向图"></a>有/无向图</h2><p>如果给图的每条边规定一个方向，那么得到的图称为有向图。在有向图中，与一个节点相关联的边有出边和入边之分。相反，边没有方向的图称为无向图。</p><h2 id="简单图"><a href="#简单图" class="headerlink" title="简单图"></a>简单图</h2><p>一个图如果 </p><ol><li><p>没有两条边，它们所关联的两个点都相同（在有向图中，没有两条边的起点终点都分别相同）；</p></li><li><p>每条边所关联的是两个不同的顶点 </p></li></ol><p>则称为简单图（Simplegraph）。简单的有向图和无向图都可以使用以上的“二元组的定义”，但形如必须是对称的，即如果(x,y)∈E，那么(y，x)∈E。 </p><p><strong>基本术语</strong></p><p><strong>阶（Order）</strong>：图G中顶集V的大小称作图G的阶。 </p><p><strong>子图（Sub-Graph）</strong>：当图G’=(V’,E’)其中V‘包含于V，E’包含于E，则G’称作图G=(V,E)的子图。每个图都是本身的子图。 </p><p><strong>生成子图（Spanning Sub-Graph）</strong>：指满足条件V(G’) = V(G)的G的子图G。 <strong>导出子图（Induced Subgraph）</strong>：以图G的顶点集V的非空子集V1为顶点集，以两端点均在V1中的全体边为边集的G的子图，称为V1导出的导出子图；以图G的边集E的 非空子集E1为边集，以E1中边关联的顶点的全体为顶点集的G的子图，称为E1导出的导出子图。 </p><p><strong>度（Degree）</strong>：一个顶点的度是指与该顶点相关联的边的条数，顶点v的度记作d(v)。 </p><p><strong>入度（In-degree）和出度（Out-degree）</strong>：对于有向图来说，一个顶点的度可细分为入度和出度。一个顶点的入度是指与其关联的各边之中，以其为终点的边数；出度则是相对的概念，指以该顶点为起点的边数。</p><p><strong>自环（Loop）</strong>：若一条边的两个顶点为同一顶点，则此边称作自环。 </p><p><strong>路径（Path）</strong>：从u到v的一条路径是指一个序列v0,e1,v1,e2,v2,…ek,vk，其中ei的顶点为vi及vi-1，k称作路径的长度。如果它的起止顶点相同，该路径是“闭”的，反之，则称为“开”的。一条路径称为一简单路径(simplepath)，如果路径中除起始与终止顶点可以重合外，所有顶点两两不等。</p><p><strong>行迹（Trace）</strong>：如果路径P(u,v)中的边各不相同，则该路径称为u到v的一条行迹。 </p><p><strong>轨道（Track）</strong>：如果路径P(u,v)中的顶点各不相同，则该路径称为u到v的一条轨道。 </p><p>闭的行迹称作回路（Circuit），闭的轨称作圈（Cycle）。</p><p>（另一种定义是：walk对应上述的path，path对应上述的track。Trail对应trace。） </p><p><strong>桥（Bridge）：</strong>若去掉一条边，便会使得整个图不连通，该边称为桥。 </p><h2 id="图的存储表示"><a href="#图的存储表示" class="headerlink" title="图的存储表示"></a>图的存储表示</h2><p><strong>1.数组（邻接矩阵）存储表示（有向或无向）</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> VRType adj;<span class="comment">//顶点关系类型。对无权图，用1(是)或e(否)表示相邻否;对带权图，则为权值</span></span><br><span class="line">InfoType info; <span class="comment">//该弧相关信息的指针(可无)</span></span><br><span class="line">&#125;ArcCe1l, AdjMatrix[MAX_ VERTEX NUM][MAX_ VERTEX_ NUM]; <span class="comment">// 二维数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MGraph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">VertexType vexs[MAX_ VERTEX_ NUM];<span class="comment">//顶点向量</span></span><br><span class="line">AdjMatrix arcs;<span class="comment">//邻接矩阵</span></span><br><span class="line">Int vexnum, arcnum;<span class="comment">//图的当前顶点教和呱数</span></span><br><span class="line">GraphKind kind;<span class="comment">//图的种类标志</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2.邻接表存储表示</strong> </p><p>邻接表是图的一种链式存储结构。 </p><p>邻接表中，对图中每个顶点建立一个单链表，第i个单链表中的结点表示依附于顶点Vi的边（对有向图是以顶点Vi为尾的弧）。 邻接表中的表结点和头结点结构：</p><p>有向图的邻接表和逆邻接表 </p><ol><li><p>在有向图的邻接表中，第i个单链表链接的边都是顶点i发出的边。</p></li><li><p>为了求第i个顶点的入度，需要遍历整个邻接表。因此可以建立逆邻接表。</p></li><li><p>在有向图的逆邻接表中，第i个单链表链接的边都是进入顶点i的边。 </p></li></ol><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><p>图的遍历方法有深度优先搜索法和广度（宽度）优先搜索法。 </p><p><strong>深度优先搜索法</strong>是树的先根遍历的推广，它的基本思想是：从图G的某个顶点v0出发，访问v0，然后选择一个与v0相邻且没被访问过的 顶点vi访问，再从vi出发选择一个与vi相邻且未被访问的顶点vj进行访问，依次继续。如果当前被访问过的顶点的所有邻接顶点都已被访问，则退回到已被 访问的顶点序列中最后一个拥有未被访问的相邻顶点的顶点w，从w出发按同样的方法向前遍历，直到图中所有顶点都被访问。 </p><p><strong>广度优先搜索</strong>是树的按层次遍历的推广，它的基本思想是：首先访问初始点vi，并将其标记为已访问过，接着访问vi的所有未被访问过的邻 接点vi1,vi2,„,vi t，并均标记已访问过，然后再按照vi1,vi2,„, vi t的次序，访问每一个顶点的所有未被访问过的邻接点，并均标记为已访问过，依次类推，直到图中所有和初始点vi有路径相通的顶点都被访问过为止。 </p><p><strong>图的连通性问题</strong> </p><p>无向图的连通分量和生成树   </p><p>有向图的强连通分量 </p><p>最小生成树 </p><p>边赋以权值的图称为网或带权图，带权图的生成树也是带权的，生成树T各边的权值总和称为该树的权。</p><p> 最小生成树（MST）：权值最小的生成树。 </p><p> 生成树和最小生成树的应用：要连通n个城市需要n－1条边线路。可以把边上的权值解释为线路的造价。则最小生成树表示使其造价最小的生成树。</p><p> 构造网的最小生成树必须解决下面两个问题：</p><p>1、尽可能选取权值小的边，但不能构成回路；</p><p>2、选取n－1条恰当的边以连通n个顶点；</p><p>MST性质：假设G＝(V,E)是一个连通网，U是顶点V的一个非空子集。若(u,v)是一条具有最小权值的边，其中u∈U，v∈V－U，则必存在一棵包含边(u,v)的最小生成树。 </p><h1 id="顺序表的查找"><a href="#顺序表的查找" class="headerlink" title="顺序表的查找"></a>顺序表的查找</h1><p>顺序表的存储 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span> </span><br><span class="line"></span><br><span class="line">ElemType*elem;  <span class="comment">//定义了顺序表中元素类型的数组指针，指向顺序表存储空间的基址 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length;    <span class="comment">//顺序表的长度(也即元素个数) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> listsize;   <span class="comment">//当前分配给顺序表的存储容量 </span></span><br><span class="line"></span><br><span class="line">&#125;SqList; </span><br></pre></td></tr></table></figure><p><strong>顺序查找</strong></p><p>顺序表可以看做第一部分的单链表和顺序表，这样的话查找问题就可以解决了。 主要是：平均查找长度的计算  </p><p>有序表的查找（理解有序表和顺序表的不同） </p><p>有序表就是因为存储的数据是有续的，所以可以进行折半查找。 </p><p>顺序表可以是单链表存储和顺序表存储。 </p><p>而有序表的存储必须是顺序表存储。这样才能找到中点。  </p><p><strong>折半查找</strong></p><p><strong>索引顺序表的查找</strong></p><p><strong>二叉排序树</strong></p><p><strong>定义</strong></p><p>二叉排序树（Binary Sort Tree）又称二叉查找树（Binary Search Tree），亦称二叉搜索树。 它或者是一棵空树；或者是具有下列性质的二叉树： （1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值； （2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值； （3）左、右子树也分别为二叉排序树； </p><p><strong>查找</strong></p><p>步骤： </p><p>若根结点的关键字值等于查找的关键字，成功。 </p><p>否则，若小于根结点的关键字值，递归查左子树。 </p><p>若大于根结点的关键字值，递归查右子树。 </p><p>若子树为空，查找不成功。 </p><p><strong>插入</strong></p><p>二叉排序树是一种动态树表。其特点是：树的结构通常不是一次生成的，而是在查找过程中，当树中不存在关键字等于给定值的节点时再进行插入。新插入的结点一定是一个新添加的叶子节点，并且是查找不成功时查找路径上访问的最后一个结点的左孩子或右孩子结点。 </p><p>首先执行查找算法，找出被插结点的父亲结点。 </p><p>判断被插结点是其父亲结点的左、右儿子。将被插结点作为叶子结点插入。 若二叉树为空。则首先单独生成根结点。 </p><p><strong>删除</strong></p><p>在二叉排序树删去一个结点，分三种情况讨论： </p><ol><li><p>若*p结点为叶子结点，即PL(左子树)和PR(右子树)均为空树。由于删去叶子结点不破坏整棵树的结构，则只需修改其双亲结点的指针即可。</p></li><li><p>若*p结点只有左子树PL或右子树PR，此时只要令PL或PR直接成为其双亲结点<em>f的左子树（当</em>p是左子树）或右子树（当*p是右子树）即可，作此修改也不破坏二叉排序树的特性。</p></li><li><p>若*p结点的左子树和右子树均不空。在删去*p之后，为保持其它元素之间的相对位置不变，可按中序遍历保持有序进行调整，可以有两种做法： </p></li></ol><p>其一是令<em>p的左子树为</em>f的左/右(依<em>p是</em>f的左子树还是右子树而定)子树，<em>s为</em>p左子树的最右下的结点，而<em>p的右子树为</em>s的右子树； </p><p>其二是令<em>p的直接前驱（或直接后继）替代</em>p，然后再从二叉排序树中删去它的直接前驱（或直接后继）即让<em>f的左子树(如果有的话)成为</em>p左子树的最左下结点(如果有的话)，再让<em>f成为</em>p的左右结点的父结点。 </p><p>性能分析 </p><p>每个结点的C(i)为该结点的层次数。最坏情况下，当先后插入的关键字有序时，构成的二叉排序树蜕变为单支树，树的深度为，其平均查找长度为(n+1)/2(和顺序查找相同），最好的情况是二叉排序树的形态和折半查找的判定树相同，其平均查找长度和log 2 (n)成正比 </p><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://files.alexhchu.com/2020/06/21/58b908782baae.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES5_6_7</title>
      <link href="/2020/06/09/ES5-6-7/"/>
      <url>/2020/06/09/ES5-6-7/</url>
      
        <content type="html"><![CDATA[<h1 id="理解ES"><a href="#理解ES" class="headerlink" title="理解ES"></a>理解ES</h1><ol><li><p>全称: ECMAScript</p></li><li><p>js语言的规范</p></li><li><p>我们用的js是它的实现</p></li><li><p>js的组成</p><ul><li>ECMAScript(js基础)</li><li>扩展–&gt;浏览器端<ul><li>BOM</li><li>DOM</li></ul></li><li>扩展–&gt;服务器端<ul><li>Node.js</li></ul></li></ul></li></ol><h1 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h1><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><ul><li>运行模式: 正常(混杂)模式与严格模式</li><li>应用上严格式: ‘strict mode’;</li><li>作用: <ul><li>使得Javascript在更严格的条件下运行</li><li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为</li><li>消除代码运行的一些不安全之处，保证代码运行的安全</li><li>需要记住的几个变化<ul><li>声明定义变量必须用var</li><li>禁止自定义的函数中的this关键字指向全局对象</li><li>创建eval作用域, 更安全</li></ul></li></ul></li></ul><h2 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h2><ul><li>作用: 用于在json对象/数组与js对象/数组相互转换</li><li>JSON.stringify(obj/arr)<br>js对象(数组)转换为json对象(数组)</li><li>JSON.parse(json)<br>json对象(数组)转换为js对象(数组)</li></ul><h2 id="Object扩展"><a href="#Object扩展" class="headerlink" title="Object扩展"></a>Object扩展</h2><ul><li>Object.create(prototype[, descriptors]) : 创建一个新的对象<ul><li>以指定对象为原型创建新的对象</li><li>指定新的属性, 并对属性进行描述<ul><li>value : 指定值</li><li>writable : 标识当前属性值是否是可修改的, 默认为true</li><li><strong>get方法</strong> : 用来得到当前属性值的回调函数</li><li><strong>set方法</strong> : 用来监视当前属性值变化的回调函数</li></ul></li></ul></li><li>Object.defineProperties(object, descriptors) : 为指定对象定义扩展多个属性</li></ul><h2 id="Array扩展"><a href="#Array扩展" class="headerlink" title="Array扩展"></a>Array扩展</h2><ul><li>Array.prototype.indexOf(value) : 得到值在数组中的第一个下标</li><li>Array.prototype.lastIndexOf(value) : 得到值在数组中的最后一个下标</li><li><strong>Array.prototype.forEach(function(item, index){}) : 遍历数组</strong></li><li><strong>Array.prototype.map(function(item, index){}) : 遍历数组返回一个新的数组</strong></li><li><strong>Array.prototype.filter(function(item, index){}) : 遍历过滤出一个子数组</strong></li></ul><h2 id="Function扩展"><a href="#Function扩展" class="headerlink" title="Function扩展"></a>Function扩展</h2><ul><li>Function.prototype.bind(obj)<ul><li>将函数内的this绑定为obj, 并将函数返回</li></ul></li><li>面试题: 区别bind()与call()和apply()?<ul><li>fn.bind(obj) : 指定函数中的this, 并返回函数</li><li>fn.call(obj) : 指定函数中的this,并调用函数</li></ul></li></ul><h2 id="Date扩展"><a href="#Date扩展" class="headerlink" title="Date扩展"></a>Date扩展</h2><ul><li>Date.now() : 得到当前时间值</li></ul><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="2个新的关键字"><a href="#2个新的关键字" class="headerlink" title="2个新的关键字"></a>2个新的关键字</h2><ul><li>let/const</li><li>块作用域</li><li>没有变量提升</li><li>不能重复定义</li><li>值不可变</li></ul><h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><ul><li>将包含多个数据的对象(数组)一次赋值给多个变量</li><li>数据源: 对象/数组</li><li>目标: {a, b}/[a, b]</li></ul><h2 id="各种数据类型的扩展"><a href="#各种数据类型的扩展" class="headerlink" title="各种数据类型的扩展"></a>各种数据类型的扩展</h2><ul><li><p>字符串</p><ul><li><strong>模板字符串</strong> <ul><li>作用: 简化字符串的拼接</li><li>模板字符串必须用``</li><li>变化的部分使用${xxx}定义</li></ul></li><li>contains(str) : 判断是否包含指定的字符串</li><li>startsWith(str) : 判断是否以指定字符串开头</li><li>endsWith(str) : 判断是否以指定字符串结尾</li><li>repeat(count) : 重复指定次数</li></ul></li><li><p>对象</p><ul><li><p><strong>简化的对象写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">    setName (name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Object.assign(target, source1, source2..) : 将源对象的属性复制到目标对象上</p></li><li><p>Object.is(v1, v2) : 判断2个数据是否完全相等</p></li><li><p><strong>proto</strong>属性 : 隐式原型属性</p></li></ul></li><li><p>数组</p><ul><li>Array.from(v) : 将伪数组对象或可遍历对象转换为真数组</li><li>Array.of(v1, v2, v3) : 将一系列值转换成数组</li><li>find(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素</li><li>findIndex(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素下标</li></ul></li><li><p>函数</p><ul><li><strong>箭头函数</strong><ul><li>用来定义匿名函数</li><li>基本语法:<ul><li>没有参数: () =&gt; console.log(‘xxxx’)</li><li>一个参数: i =&gt; i+2</li><li>大于一个参数: (i,j) =&gt; i+j</li><li>函数体不用大括号: 默认返回结果</li><li>函数体如果有多个语句, 需要用{}包围</li></ul></li><li>使用场景: 多用来定义回调函数</li></ul></li><li><strong>形参的默认值</strong><ul><li>定义形参时指定其默认的值</li></ul></li><li><strong>rest(可变)参数</strong><ul><li>通过形参左侧的…来表达, 取代arguments的使用</li></ul></li><li><strong>扩展运算符(…)</strong><ul><li>可以分解出数组或对象中的数据</li></ul></li></ul></li></ul><h2 id="set-Map容器结构"><a href="#set-Map容器结构" class="headerlink" title="set/Map容器结构"></a>set/Map容器结构</h2><ul><li>容器: 能保存多个数据的对象, 同时必须具备操作内部数据的方法</li><li>任意对象都可以作为容器使用, 但有的对象不太适合作为容器使用(如函数)</li><li><strong>Set的特点</strong>: 保存多个value, value是不重复 ====&gt;数组元素去重</li><li><strong>Map的特点</strong>: 保存多个key–value, key是不重复, value是可以重复的</li><li>API<ul><li>Set()/Set(arr) //arr是一维数组</li><li>add(value)</li><li>delete(value)</li><li>clear();</li><li>has(value)</li><li>size</li><li></li><li>Map()/Map(arr) //arr是二维数组</li><li>set(key, value)</li><li>delete(key)</li><li>clear()</li><li>has(key)</li><li>size</li></ul></li></ul><h2 id="for–of循环"><a href="#for–of循环" class="headerlink" title="for–of循环"></a>for–of循环</h2><ul><li>可以遍历任何容器</li><li>数组</li><li>对象</li><li>伪/类对象</li><li>字符串</li><li>可迭代的对象</li></ul><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a><strong>Promise</strong></h2><ul><li><p>解决<code>回调地狱</code>(回调函数的层层嵌套, 编码是不断向右扩展, 阅读性很差)</p></li><li><p>能以同步编码的方式实现异步调用</p></li><li><p>在es6之前原生的js中是没这种实现的, 一些第三方框架(jQuery)实现了promise</p></li><li><p>ES6中定义实现API: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建promise对象</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123; </span><br><span class="line">  <span class="comment">// 做异步的操作 </span></span><br><span class="line">  <span class="keyword">if</span>(成功) &#123; <span class="comment">// 调用成功的回调</span></span><br><span class="line">    resolve(result); </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 调用失败的回调</span></span><br><span class="line">    reject(errorMsg); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 2. 调用promise对象的then()</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  result =&gt; <span class="built_in">console</span>.log(result), </span></span></span><br><span class="line"><span class="params"><span class="function">  errorMsg =&gt; alert(errorMsg)</span></span></span><br><span class="line"><span class="params"><span class="function"></span>))</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h2><ul><li>用 class 定义一类</li><li>用 constructor() 定义构造方法(相当于构造函数)</li><li>一般方法: xxx () {}</li><li>用extends来定义子类</li><li>用super()来父类的构造方法</li><li>子类方法自定义: 将从父类中继承来的方法重新实现一遍</li><li>js中没有方法重载(方法名相同, 但参数不同)的语法</li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h1 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h1><ul><li><p>指数运算符: **</p></li><li><p>Array.prototype.includes(value) : 判断数组中是否包含指定value</p></li><li><p><strong>区别方法的2种称谓</strong></p><ul><li>静态(工具)方法<ul><li>Fun.xxx = function(){}</li></ul></li><li>实例方法<ul><li>所有实例对象 : Fun.prototype.xxx = function(){} //xxx针对Fun的所有实例对象</li><li>某个实例对象 : fun.xxx = function(){} //xxx只是针对fun对象</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ECMAscript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES5 </tag>
            
            <tag> ES6 </tag>
            
            <tag> ES7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="/2020/06/09/Webpack/"/>
      <url>/2020/06/09/Webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="了解Webpack相关"><a href="#了解Webpack相关" class="headerlink" title="了解Webpack相关"></a>了解Webpack相关</h1><ul><li>什么是webpack<ul><li>Webpack是一个模块打包器(bundler)。</li><li>在Webpack看来, 前端的所有资源文件(js/css/img/less/…)都会作为模块处理</li><li>它将根据模块的依赖关系进行静态分析，生成对应的静态资源</li></ul></li><li>理解Loader<ul><li>Webpack 本身只能加载JS模块，如果要加载其他类型的文件(模块)，就需要使用对应的loader 进行转换/加载</li><li>Loader 本身也是运行在 node.js 环境中的 JavaScript 模块</li><li>它本身是一个函数，接受源文件作为参数，返回转换的结果</li><li>loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 json-loader。</li></ul></li><li>配置文件(默认)<ul><li>webpack.config.js : 是一个node模块，返回一个 json 格式的配置信息对象</li></ul></li><li>插件<ul><li>插件件可以完成一些loader不能完成的功能。</li><li>插件的使用一般是在 webpack 的配置信息 plugins 选项中指定。</li><li>Webpack 本身内置了一些常用的插件，还可以通过 npm 安装第三方插件</li></ul></li></ul><ul><li><p>学习文档 : </p><ul><li>webpack官方入门: <a href="http://webpack.github.io/docs/tutorials/getting-started/">http://webpack.github.io/docs/tutorials/getting-started/</a></li><li>Webpack中文指南: <a href="http://zhaoda.net/webpack-handbook/index.html">http://zhaoda.net/webpack-handbook/index.html</a></li></ul></li><li><p>你将学到:</p><ul><li>How to install webpack</li><li>How to use webpack</li><li>How to use loaders</li><li>How to use the development server</li><li>How to use image</li></ul></li><li><p>初始化项目: package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack_test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>安装webpack</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack@1 -g  //全局安装</span><br><span class="line">npm install webpack@1 --save-dev  //局部安装</span><br></pre></td></tr></table></figure></li><li><p>开始编译</p><ul><li><p>创建入口src/js/ : entry.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;entry.js is work&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建主页面 build/: index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/build.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编译js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/entry.js build/js/build.js  </span><br></pre></td></tr></table></figure></li><li><p>查看页面效果</p></li></ul></li><li><p>第二个js</p><ul><li><p>创建第二个js: src/js/content.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">&quot; &lt;br&gt; It works from content.js&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>更新入口js : entry.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="built_in">document</span>.write(<span class="string">&quot;entry.js is works.&quot;</span>);</span><br><span class="line">* <span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">&quot;./content.js&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>编译js:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/entry.js build/js/build.js</span><br></pre></td></tr></table></figure></li><li><p>查看页面效果</p></li></ul></li><li><p>第一个加载器(loader)</p><ul><li><p>安装样式的loader</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></li><li><p>创建样式文件: src/css/test.css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更新入口js : entry.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="built_in">require</span>(<span class="string">&quot;style-loader!css-loader!../css/test.css&quot;</span>);</span><br><span class="line">* <span class="built_in">document</span>.write(<span class="string">&quot;entry.js is works.&quot;</span>);</span><br><span class="line">* <span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">&quot;./content.js&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>编译js, 并查看页面效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/entry.js build/js/bundle.js</span><br></pre></td></tr></table></figure></li></ul></li><li><p>绑定加载器</p><ul><li><p>更新入口js : entry.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">require</span>(<span class="string">&quot;style-loader!css-loader!./test.css&quot;</span>);</span><br><span class="line">+ <span class="built_in">require</span>(<span class="string">&quot;./test.css&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>编译:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/entry.js build/js/bundle.js --module-bind css=style-loader!css-loader</span><br></pre></td></tr></table></figure></li><li><p>查看页面效果</p></li></ul></li><li><p>使用webpack配置文件</p><ul><li><p>创建webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/js/entry.js&quot;</span>,<span class="comment">//入口路径配置</span></span><br><span class="line">  <span class="attr">output</span>: &#123;<span class="comment">//出口配置</span></span><br><span class="line">      <span class="attr">path</span>: __dirname + <span class="string">&#x27;/build/js&#x27;</span>,<span class="comment">//输出路径</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span><span class="comment">//输出文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">loaders</span>: [<span class="comment">//模块加载器配置</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, loader: <span class="string">&quot;style!css&quot;</span>&#125;  <span class="comment">//所有css文件声明使用css-loader和style-loader加载器</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br><span class="line">webpack --progress   //编译显示进度</span><br></pre></td></tr></table></figure></li><li><p>问题—每次修改模块文件内容的重新手动打包，刷新</p></li><li><p>自动编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack --watch  //编译并启动监视(但需要刷新浏览器)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>浏览器自动刷新(热加载)—-解决手动刷新浏览器问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server@1 -g</span><br><span class="line">webpack-dev-server</span><br><span class="line">  访问: http://localhost:8080/webpack-dev-server/</span><br><span class="line">      ; http://localhost:8080</span><br><span class="line">  !!!发现问题----访问的是文件夹路径而不是页面</span><br><span class="line">    devServer:&#123;</span><br><span class="line">          contentBase: &#x27;./build&#x27;,//内置服务器动态加载页面所在的目录</span><br><span class="line">          historyApiFallback:true,//不跳转</span><br><span class="line">          inline:true</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    contentBase : 默认webpack-dev-server为根文件夹提供内置的服务，如果其他目录下的文件</span><br><span class="line">                  提供服务需要在此设置目录(我们设置为build文件夹)</span><br><span class="line">    historyApiFallback : 开发单页面的时候非常有用，它依赖于H5的 history API，当</span><br><span class="line">                        设置为true的时候所有的跳转都指向index.html；</span><br><span class="line">    port：可以设置端口号，不设置时候默认为 8080</span><br><span class="line">    inline ： 设置为true的时候回自动刷新(有的版本需要配合hot : true使用)</span><br><span class="line">    </span><br><span class="line">  webpack-dev-server</span><br><span class="line">  访问: http://localhost:8080</span><br><span class="line">  </span><br><span class="line"> 问题：页面没有热加载，自动刷新，因为index的src引入的硬盘中的build文件而不是webpack-dev-server服务器内存中的build</span><br><span class="line">特点:</span><br><span class="line">  自动编译并刷新界面</span><br><span class="line">  不生成编译后的文件, 直接在内存中编译处理, 并启动服务器运行项目</span><br></pre></td></tr></table></figure></li></ul></li><li><p>加载图片</p><ul><li><p>安装依赖的loader</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader file-loader --save-dev</span><br><span class="line">url-loader比file-loader功能更加完善是对file-loader的上层封装,但二者需配合使用</span><br></pre></td></tr></table></figure></li><li><p>添加config中loader的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; test: /\.(png|jpg)$/, loader: &quot;url-loader?limit=8192&quot; &#125;  //如果图片小于limit就会进行Base64编码</span><br></pre></td></tr></table></figure></li><li><p>拷入2张图片: </p><ul><li>小图: img/logo.png</li><li>大图: img/big.jpg</li></ul></li><li><p>定义引用图片的样式: test.css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#box1&#123;</span><br><span class="line">  background-image: url(../img/logo.jpg);</span><br><span class="line">  height: 200px;</span><br><span class="line">  width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">#box2&#123;</span><br><span class="line">  background-image: url(../img/big.jpg);</span><br><span class="line">  height: 200px;</span><br><span class="line">  width: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在页面引用样式或图片: index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编译并浏览</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server</span><br></pre></td></tr></table></figure></li><li><p>图片打包问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、图片大于8kb的时候无法打包到js文件中，</span><br><span class="line">2、index.html引入js的时候发现没有打包进去的图片路径不对</span><br><span class="line">3、解决方法： </span><br><span class="line">    * //publicPath : &#x27;./js/&#x27;,//webpack的绝对路径,设置服务index.html资源的路径</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置npm script命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;webpack-dev-server&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">npm start: 编译运行项目</span><br><span class="line">npm build: 编译打包</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="webpack快速入门教程"><a href="#webpack快速入门教程" class="headerlink" title="webpack快速入门教程"></a>webpack快速入门教程</h2></li></ul><h3 id="1、了解Webpack相关"><a href="#1、了解Webpack相关" class="headerlink" title="1、了解Webpack相关"></a>1、了解Webpack相关</h3><pre><code>* 什么是webpack    * Webpack是一个模块打包器(bundler)。            * 在Webpack看来, 前端的所有资源文件(js/json/css/img/less/...)都会作为模块处理        * 它将根据模块的依赖关系进行静态分析，生成对应的静态资源</code></pre><ul><li>理解Loader<ul><li>Webpack 本身只能加载JS/JSON模块，如果要加载其他类型的文件(模块)，就需要使用对应的loader 进行转换/加载<ul><li>Loader 本身也是运行在 node.js 环境中的 JavaScript 模块</li><li>它本身是一个函数，接受源文件作为参数，返回转换的结果</li><li>loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 json-loader。</li></ul></li></ul></li><li>配置文件(默认)<ul><li>webpack.config.js : 是一个node模块，返回一个 json 格式的配置信息对象</li><li>插件<ul><li>插件件可以完成一些loader不能完成的功能。</li><li>插件的使用一般是在 webpack 的配置信息 plugins 选项中指定。</li><li>CleanWebpackPlugin: 自动清除指定文件夹资源</li><li>HtmlWebpackPlugin: 自动生成HTML文件并</li><li>UglifyJSPlugin: 压缩js文件</li></ul></li></ul></li></ul><h3 id="2、学习文档"><a href="#2、学习文档" class="headerlink" title="2、学习文档 :"></a>2、学习文档 :</h3><ul><li><p>webpack官网: <a href="http://webpack.github.io/">http://webpack.github.io/</a></p></li><li><p>webpack2文档(英文): <a href="https://webpack.js.org/">https://webpack.js.org/</a></p></li><li><p>webpack2文档(中文): <a href="https://doc.webpack-china.org/">https://doc.webpack-china.org/</a><br>###3、开启项目</p></li><li><p>初始化项目：</p><ul><li><p>生成package.json文件</p><ul><li><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack_test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>安装webpack</p><ul><li>npm install webpack -g  //全局安装</li><li>npm install webpack –save-dev  //局部安装<br>###4、编译打包应用</li></ul></li><li><p>创建入口src/js/ : entry.js</p><ul><li>document.write(“entry.js is work”);</li></ul></li><li><p>创建主页面: dist/index.html</p><ul><li><script type="text/javascript" src="bundle.js"></script></li></ul></li><li><p>编译js</p><ul><li>webpack src/js/entry.js dist/bundle.js  </li></ul></li><li><p>查看页面效果</p></li></ul><h3 id="5、添加js-json文件"><a href="#5、添加js-json文件" class="headerlink" title="5、添加js/json文件"></a>5、添加js/json文件</h3><ul><li><p>创建第二个js: src/js/math.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export function square(x) &#123;</span><br><span class="line">  return x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function cube(x) &#123;</span><br><span class="line">  return x * x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建json文件: src/json/data.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更新入口js : entry.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123;cube&#125; from &#x27;./math&#x27;</span><br><span class="line">import data from &#x27;../json/data.json&#x27;</span><br><span class="line">//注意data会自动被转换为原生的js对象或者数组</span><br><span class="line">document.write(&quot;entry.js is work &lt;br/&gt;&quot;);</span><br><span class="line">document.write(cube(2) + &#x27;&lt;br/&gt;&#x27;);</span><br><span class="line">document.write(JSON.stringify(data) + &#x27;&lt;br/&gt;&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>编译js:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/entry.js dist/bundle.js</span><br></pre></td></tr></table></figure></li><li><p>查看页面效果</p></li></ul><h3 id="6、使用webpack配置文件"><a href="#6、使用webpack配置文件" class="headerlink" title="6、使用webpack配置文件"></a>6、使用webpack配置文件</h3><ul><li><p>创建webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">//path内置的模块，用来设置路径。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/js/entry.js&#x27;</span>,   <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;                     <span class="comment">// 输出配置</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,      <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)   <span class="comment">//输出文件路径配置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>配置npm命令: package.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>打包应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>###7、打包css和图片文件</p><ul><li><p>安装样式的loader</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader --save-dev</span><br><span class="line">npm install file-loader url-loader --save-dev</span><br><span class="line">补充：url-loader是对象file-loader的上层封装，使用时需配合file-loader使用。</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>配置loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">limit</span>: <span class="number">8192</span>      </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>向应用中添加2张图片:</p><ul><li>小图: img/logo.png</li><li>大图: img/big.jpg</li></ul></li><li><p>创建样式文件: src/css/test.css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background: url(&#x27;../img/logo.jpg&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更新入口js : entry.js</p></li></ul><ul><li>import ‘../css/test.css’</li></ul><ul><li><p>添加css样式</p><p>#box1{<br>  width: 300px;<br>  height: 300px;<br>  background-image: url(“../image/logo.jpg”);<br>}<br>#box2{<br>  width: 300px;<br>  height: 300px;<br>  background-image: url(“../image/big.jpg”);<br>}</p></li><li><p>index.html添加元素</p><div id="box1"></div><div id="box2"></div></li><li><p>执行打包命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li><li><p>发现问题：</p><ul><li>大图无法打包到entry.js文件中，index.html不在生成资源目录下。</li><li>页面加载图片会在所在目录位置查找，导致页面加载图片时候大图路径无法找到</li><li>解决办法：<ul><li>使用publicPath : ‘dist/js/‘ //设置为index.html提供资源的路径,设置完后找所有的资源都会去当前目录下找。</li><li>将index.html放在dist/js/也可以解决。<br>###8、自动编译打包</li></ul></li><li>利用webpack开发服务器工具: webpack-dev-server</li><li>下载<ul><li>npm install –save-dev webpack-dev-server</li></ul></li><li>webpack配置<br>devServer: {<br>  contentBase: ‘./dist’<br>},</li><li>package配置<ul><li>“start”: “webpack-dev-server –open”</li></ul></li><li>编译打包应用并运行<ul><li>npm start<br>###9、使用webpack插件</li></ul></li></ul></li><li><p>常用的插件</p><ul><li>使用html-webpack-plugin根据模板html生成引入script的页面</li><li>使用clean-webpack-plugin清除dist文件夹</li><li>使用uglifyjs-webpack-plugin压缩打包的js文件</li></ul></li><li><p>下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev  html-webpack-plugin clean-webpack-plugin</span><br></pre></td></tr></table></figure></li><li><p>webpack配置</p><p>const HtmlWebpackPlugin = require(‘html-webpack-plugin’); //自动生成html文件的插件<br>  const CleanWebpackPlugin = require(‘clean-webpack-plugin’); //清除之前打包的文件<br>plugins: [<br>  new HtmlWebpackPlugin({template: ‘./index.html’}),<br>  new CleanWebpackPlugin([‘dist’]),<br>]</p></li><li><p>创建页面: index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包文件将自动通过script标签注入到此处--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>打包运行项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>love</title>
      <link href="/2020/05/20/love/"/>
      <url>/2020/05/20/love/</url>
      
        <content type="html"><![CDATA[<div class="note no-icon flat"><p>2020年5月20日，我来撒最后一波狗粮。</p></div><blockquote><p>我的爱人,我会牵着你的手，走到满头白发的那天,<br>我会守护你生命里的精彩，并陪伴你一路精彩下去。<br>你的幸福快乐，是我一生的追求。<br>我会每一天带着笑脸。和你说早安,<br>我会每一晚与你道声晚安再入梦乡,<br>我会带你去所有你想去的地方,<br>陪你闹看你笑<br>历经你生命中所有的点点滴滴。<br>我期待这一生与你一起走过,<br>我期待与你慢慢变老,<br>等我们老到哪儿也去不了,<br>还能满载着生的幸福快乐!<br>我会为我们的未来撑起一片天空,<br>为我们的将来担负起一生的责任,<br>愿意为你去做每一件能让你开心快乐的事。<br>所有我们经历的点点滴滴<br>都是我们一辈子最美的回忆。<br>我愿意爱你直到老去! </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;–yours,小二<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2020-5-20<br><img src="https://cdn.jsdelivr.net/gh/wangzy813/CDN@2.0/img/love.png" alt="520小网页"></p></blockquote><h2 id="内容说明"><a href="#内容说明" class="headerlink" title="内容说明"></a>内容说明</h2><div class="note success flat"><p>温馨提示：以上是本人搬运的520表白小网页，网页可以从本人博客头部菜单list下的love进入或者<a href="https://wangxe.top/html/love1/">直链进入</a>,这里还有<a href="https://wangxe.top/html/love1/sys/">朋友定制版</a>。<font color=red>资源来自于网络</font></p></div>]]></content>
      
      
      <categories>
          
          <category> 网页 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 520 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp</title>
      <link href="/2020/05/05/gulp/"/>
      <url>/2020/05/05/gulp/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Gulp介绍</p><ul><li>中文主页: <a href="http://www.gulpjs.com.cn/">http://www.gulpjs.com.cn/</a></li><li>gulp是与grunt功能类似的<strong>前端项目构建</strong>工具, 也是基于Nodejs的自动<strong>任务运行器</strong></li><li>能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的<br>合并、压缩、检查、监听文件变化、浏览器自动刷新、测试等任务</li><li>gulp更高效(异步多任务), 更易于使用, 插件高质量</li></ul></li><li><p>安装 nodejs, 查看版本: node -v</p></li><li><p>创建一个简单的应用gulp_test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|- dist</span><br><span class="line">|- src</span><br><span class="line">  |- js</span><br><span class="line">  |- css</span><br><span class="line">  |- less</span><br><span class="line">|- index.html</span><br><span class="line">|- gulpfile.js-----gulp配置文件</span><br><span class="line">|- package.json</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;gulp_test&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;1.0.0&quot;</span><br><span class="line">  &#125; </span><br></pre></td></tr></table></figure></li><li><p>安装gulp:</p><ul><li><p>全局安装gulp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure></li><li><p>局部安装gulp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置编码: gulpfile.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//引入gulp模块</span><br><span class="line">var gulp = require(&#x27;gulp&#x27;);</span><br><span class="line">//定义默认任务</span><br><span class="line">gulp.task(&#x27;任务名&#x27;, function() &#123;</span><br><span class="line">  // 将你的任务的任务代码放在这</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&#x27;default&#x27;, [&#x27;任务&#x27;])//异步执行</span><br></pre></td></tr></table></figure></li><li><p>构建命令: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用gulp插件</p><ul><li><p>相关插件:</p><ul><li>gulp-concat : 合并文件(js/css)</li><li>gulp-uglify : 压缩js文件</li><li>gulp-rename : 文件重命名</li><li>gulp-less : 编译less</li><li>gulp-clean-css : 压缩css</li><li>gulp-livereload : 实时自动编译刷新</li></ul></li><li><p>重要API</p><ul><li>gulp.src(filePath/pathArr) : <ul><li>指向指定路径的所有文件, 返回文件流对象</li><li>用于读取文件</li></ul></li><li>gulp.dest(dirPath/pathArr)<ul><li>指向指定的所有文件夹</li><li>用于向文件夹中输出文件</li></ul></li><li>gulp.task(name, [deps], fn) <ul><li>定义一个任务</li></ul></li><li>gulp.watch() <ul><li>监视文件的变化</li></ul></li></ul></li><li><p>处理js</p><ul><li><p>创建js文件</p><ul><li><p>src/js/test1.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">  function add(num1, num2) &#123;</span><br><span class="line">    var num3 = 0;</span><br><span class="line">    num1 = num2 + num3;</span><br><span class="line">    return num1 + num2;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(add(10, 30));</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>src/js/test2.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">  var arr = [2,3,4].map(function (item, index) &#123;</span><br><span class="line">      return item+1;</span><br><span class="line">  &#125;);</span><br><span class="line">  console.log(arr);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>下载插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-concat gulp-uglify gulp-rename --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var concat = require(&#x27;gulp-concat&#x27;);</span><br><span class="line">var uglify = require(&#x27;gulp-uglify&#x27;);</span><br><span class="line">var rename = require(&#x27;gulp-rename&#x27;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;minifyjs&#x27;, function() &#123;</span><br><span class="line">    return gulp.src(&#x27;src/js/*.js&#x27;) //操作的源文件</span><br><span class="line">        .pipe(concat(&#x27;built.js&#x27;)) //合并到临时文件     </span><br><span class="line">        .pipe(gulp.dest(&#x27;dist/js&#x27;)) //生成到目标文件夹</span><br><span class="line">        .pipe(rename(&#123;suffix: &#x27;.min&#x27;&#125;)) //重命名  </span><br><span class="line">        .pipe(uglify())    //压缩</span><br><span class="line">        .pipe(gulp.dest(&#x27;dist/js&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;default&#x27;, [&#x27;minifyjs&#x27;]);</span><br></pre></td></tr></table></figure></li><li><p>页面引入js浏览测试 : index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;dist/js/built.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>打包测试: gulp</p></li></ul></li><li><p>处理css</p><ul><li><p>创建less/css文件</p><ul><li><p>src/css/test1.css</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#div1 &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src/css/test2.css</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#div2 &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src/less/test3.less</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@base: yellow;</span><br><span class="line">.index1 &#123; color: @base; &#125;</span><br><span class="line">.index2 &#123; color: green; &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>下载插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-less gulp-clean-css --save-dev </span><br></pre></td></tr></table></figure></li><li><p>配置编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var less = require(&#x27;gulp-less&#x27;);</span><br><span class="line">var cleanCSS = require(&#x27;gulp-clean-css&#x27;);</span><br><span class="line"></span><br><span class="line">//less处理任务</span><br><span class="line">gulp.task(&#x27;lessTask&#x27;, function () &#123;</span><br><span class="line">  return gulp.src(&#x27;src/less/*.less&#x27;)</span><br><span class="line">      .pipe(less()) </span><br><span class="line">      </span><br><span class="line">      .pipe(gulp.dest(&#x27;src/css&#x27;));</span><br><span class="line">&#125;)</span><br><span class="line">//css处理任务, 指定依赖的任务</span><br><span class="line">gulp.task(&#x27;cssTask&#x27;,[&#x27;lessTask&#x27;], function () &#123;</span><br><span class="line"></span><br><span class="line">  return gulp.src(&#x27;src/css/*.css&#x27;)</span><br><span class="line">      .pipe(concat(&#x27;built.css&#x27;))</span><br><span class="line">      .pipe(gulp.dest(&#x27;dist/css&#x27;))</span><br><span class="line">      .pipe(rename(&#123;suffix: &#x27;.min&#x27;&#125;))</span><br><span class="line">      .pipe(cleanCSS(&#123;compatibility: &#x27;ie8&#x27;&#125;))</span><br><span class="line">      .pipe(gulp.dest(&#x27;dist/css&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;default&#x27;, [&#x27;minifyjs&#x27;, &#x27;cssTask&#x27;]);</span><br></pre></td></tr></table></figure></li><li><p>页面引入css浏览测试 : index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;dist/css/built.min.css&quot;&gt;</span><br><span class="line">&lt;div id=&quot;div1&quot; class=&quot;index1&quot;&gt;div1111111&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;div2&quot; class=&quot;index2&quot;&gt;div2222222&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>打包测试: gulp</p></li></ul></li><li><p>处理html</p><ul><li><p>下载插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlmin --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var htmlmin = require(&#x27;gulp-htmlmin&#x27;);</span><br><span class="line">//压缩html任务</span><br><span class="line">gulp.task(&#x27;htmlMinify&#x27;, function() &#123;</span><br><span class="line">    return gulp.src(&#x27;index.html&#x27;)</span><br><span class="line">        .pipe(htmlmin(&#123;collapseWhitespace: true&#125;))</span><br><span class="line">        .pipe(gulp.dest(&#x27;dist&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&#x27;default&#x27;, [&#x27;minifyjs&#x27;, &#x27;cssTask&#x27;, &#x27;htmlMinify&#x27;]);</span><br></pre></td></tr></table></figure></li><li><p>修改页面引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/built.min.css&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/built.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>打包测试: gulp    </p></li></ul></li><li><p>自动编译</p><ul><li><p>下载插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-livereload --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置编码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var livereload = require(&#x27;gulp-livereload&#x27;);</span><br><span class="line">          </span><br><span class="line">//所有的pipe</span><br><span class="line">.pipe(livereload());</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;watch&#x27;, [&#x27;default&#x27;], function () &#123;    </span><br><span class="line">  //开启监视</span><br><span class="line">  livereload.listen();</span><br><span class="line">  //监视指定的文件, 并指定对应的处理任务</span><br><span class="line">  gulp.watch(&#x27;src/js/*.js&#x27;, [&#x27;minifyjs&#x27;])</span><br><span class="line">  gulp.watch([&#x27;src/css/*.css&#x27;,&#x27;src/less/*.less&#x27;], [&#x27;cssTask&#x27;,&#x27;lessTask&#x27;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>热加载(实时加载)</p><ul><li>下载插件：gulp-connect</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、 npm install gulp-connect --save-dev</span><br><span class="line">2、 注册 热加载的任务 server，注意依赖build任务 </span><br><span class="line">3、注册热加载的任务</span><br><span class="line">    //配置加载的选项</span><br><span class="line">    connect.server(&#123;</span><br><span class="line">          root : &#x27;dist/&#x27;,//提供服务的根路径</span><br><span class="line">          livereload : true,//是否实时刷新</span><br><span class="line">          port : 5000//开启端口号</span><br><span class="line">     &#125;);</span><br><span class="line">     // 自动开启链接</span><br><span class="line">     open(&#x27;http://localhost:5000&#x27;);//npm install open --save-dev</span><br><span class="line">     // 监视目标文件</span><br><span class="line">    gulp.watch(&#x27;src/js/*.js&#x27;, [&#x27;js&#x27;]);</span><br><span class="line">    gulp.watch([&#x27;src/css/*.css&#x27;, &#x27;src/css/*.less&#x27;], [&#x27;cssMin&#x27;, &#x27;less&#x27;]);</span><br></pre></td></tr></table></figure></li><li><p>扩展</p><ul><li><p>打包加载gulp插件</p></li><li><p>前提：将插件下载好。</p></li><li><p>下载打包插件： gulp-load-plugins</p></li><li><p>npm install gulp-load-plugins –save-dev</p></li><li><p>引入： var $ = require(‘gulp-load-plugins’)();！！！引入的插件是个方法，必须记住调用。</p></li><li><p>神来之笔：其他的插件不用再引入了</p></li><li><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 所有的插件用 $ 引出，其他插件的方法名统一为插件的功能名字(即插件名字的最后一部分)：如：concat,connect,cssmin...</span><br><span class="line">gulp.task(&#x27;lib&#x27;, function() &#123;</span><br><span class="line">  gulp.src(&#x27;bower_components/**/*.js&#x27;)</span><br><span class="line">  .pipe(gulp.dest(app.devPath + &#x27;vendor&#x27;))</span><br><span class="line">  .pipe(gulp.dest(app.prdPath + &#x27;vendor&#x27;))</span><br><span class="line">  .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 压缩工具 </category>
          
          <category> gulp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angularjs</title>
      <link href="/2020/05/03/angularjs/"/>
      <url>/2020/05/03/angularjs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>AngularJS诞生于2009年，由Misko Hevery 等人创建，后为Google所收购。是一款优秀的前端JS框架，已经被用于Google的多款产品当中。AngularJS有着诸多特性，最为核心的是：MVC（Model–view–controller）、模块化、自动化双向数据绑定、语义化标签、依赖注入等等。<br>AngularJS是一个 JavaScript框架。它是一个以 JavaScript 编写的库。它可通过script标签添加到HTML页面。<br>AngularJS通过 指令扩展了 HTML，且通过 表达式 绑定数据到HTML。<br>AngularJS是以一个JavaScript文件形式发布的，可通过script标签添加到网页中。<br>——源自百度百科</p></blockquote><h1 id="指令、表达式、语句"><a href="#指令、表达式、语句" class="headerlink" title="指令、表达式、语句"></a>指令、表达式、语句</h1><p>ng-app(指令) : 告诉angular核心它管理当前标签所包含的整个区域,并且会自动创建$rootScope根作用域对象</p><p> ng-model : 将当前输入框的值与谁关联(属性名:属性值), 并作为当前作用域对象($rootScope)的属性</p><p> { {} } (表达式) : 显示数据,从作用域对象的指定属性名上取</p><ol><li><p>表达式：通常有一个返回值，可以放在任何需要值得地方，比如函数调用的参数，一个变量名，一个运算，</p></li><li><p>语句：通常表示一个完整的执行单位，一段完整的js可执行的代码，有的语句也可以用表达式来执行，叫做表达式语句。</p></li><li><p>区别：语句用封号结尾，有些语句我们没有加封号，比如console.log虽然我们没有加封号，但也是语句，因为js引擎会自动解析并且加上封号。 js引擎在解析的时候会自动的加上封号</p></li><li><p>特例：if语句，就不用加封号 可也是完整的语句。</p></li></ol><p>示例一：</p><ul><li>angular实现内容同步</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>内容：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../js/angular-1.2.29/angular.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h1><ol><li><p>数据绑定: 数据从一个地方A转移(传递)到另一个地方B, 而且这个操作由框架来完成</p></li><li><p>双向数据绑定: 数据可以从View(视图层)流向Model（模型）, 也可以从Model流向View</p></li></ol><ul><li><p>视图(View): 也就是我们的页面(主要是Andular指令和表达式)</p></li><li><p>模型(Model) : 作用域对象(当前为$rootScope), 它可以包含一些属性或方法</p></li><li><p>当改变View中的数据, Model对象的对应属性也会随之改变: ng-model指令 数据从View==&gt;Model</p></li><li><p>当Model域对象的属性发生改变时, 页面对应数据随之更新: { {} }表达式 数据从Model==&gt;View</p></li><li><p>ng-model是双向数据绑定, 而{ {} }是单向数据绑定</p></li></ul><ol start="3"><li>ng-init 用来初始化当前作用域变量。</li></ol><p>示例二：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">&quot;&quot;</span> <span class="attr">ng-init</span>=<span class="string">&quot;name=&#x27;tom&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名1：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名2：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../js/angular-1.2.29/angular.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="作用域对象和控制器"><a href="#作用域对象和控制器" class="headerlink" title="作用域对象和控制器"></a>作用域对象和控制器</h1><ol><li>作用域对象   :</li></ol><ul><li><p>一个js实例对象, ng-app指令默认会创建一个根作用域对象($rootScope)</p></li><li><p>它的属性和方法与页面中的指令或表达式是关联的</p></li></ul><ol start="2"><li>控制器:</li></ol><ul><li><p>用来控制AngularJS应用数据的 实例对象</p></li><li><p>ng-controller : 指定控制器构造函数, Angular会自动new此函数创建控制器对象</p></li><li><p>同时Angular还有创建一个新的域对象$scope, 它是$rootScope的子对象</p></li><li><p>在控制器函数中声明$scope形参, Angular会自动将$scope传入</p></li></ul><p>实例三：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">&quot;&quot;</span> <span class="attr">ng-init</span>=<span class="string">&quot;age=12&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">&quot;MyController&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;名&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的姓名为: &#123;&#123;firstName+&#x27;-&#x27;+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的姓名2为: &#123;&#123;getName()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123;firstName&#125;&#125; <span class="comment">&lt;!--不能显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../js/angular-1.2.29/angular.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">MyController</span> (<span class="params">$scope</span>) </span>&#123;<span class="comment">//必须是$scope</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// alert(this instanceof MyController);//说明是new调用</span></span></span><br><span class="line"><span class="javascript">    $scope.firstName = <span class="string">&#x27;KB&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    $scope.lastName = <span class="string">&#x27;Brent&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//给域对象指定方法</span></span></span><br><span class="line"><span class="javascript">    $scope.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> $scope.firstName + <span class="string">&quot;  &quot;</span> + $scope.lastName;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($scope.age);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><ul><li><p>依赖对象：完成某个特定的功能需要某个对象才能实现，这个对象就是依赖对象。</p></li><li><p>依赖注入：依赖的对象以形参的形式被注入进来使用，这种方式就是依赖注入。</p></li><li><p>angular的 ‘$scope’对象就是依赖对象，并且是依赖注入的形式进行使用。</p><p> ！！！形参必须是特定的名称, 否则Angular无法注入抛异常</p></li><li><p>回调函数的event的就是依赖对象</p></li><li><p>回调函数有形参就是依赖注入</p></li></ul><p>声明式和命令式的区别</p><ol><li><p>命令式：命令程序执行的时候每一步都是按照自己的指令，更注重执行的过程</p></li><li><p>声明式：更注重执行的结果。</p><ul><li><p>命令式更注重的执行的过程</p></li><li><p>声明式更注重的执行的结果</p></li><li><p>声明式是对命令式的局部包装</p></li><li><p>解答题与填空题的区别</p></li></ul></li></ol><p>示例四</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">&quot;MyController&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;名&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的姓名为: &#123;&#123;firstName+&#x27;-&#x27;+lastName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的姓名2为: &#123;&#123;getName()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123;firstName&#125;&#125; <span class="comment">&lt;!--不能显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../js/angular-1.2.29/angular.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">MyController</span> (<span class="params">$scope</span>) </span>&#123;<span class="comment">//必须是$scope, $scope就是依赖对象, 被angular动态注入的</span></span></span><br><span class="line"><span class="javascript">    $scope.firstName = <span class="string">&#x27;KB&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    $scope.lastName = <span class="string">&#x27;Brent&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//给域对象指定方法</span></span></span><br><span class="line"><span class="javascript">    $scope.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> $scope.firstName + <span class="string">&quot;  &quot;</span> + $scope.lastName;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($scope.age);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//声明式和命令式的区别</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.命令式：命令程序执行的时候每一步都是按照自己的指令，更注重执行的过程</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.声明式：更注重执行的结果。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//命令式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> newArr = [];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> num = arr[i]*<span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">      newArr.push(num);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(newArr);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//声明式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> newArr2 = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> item*<span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(newArr2);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//命令式更注重的执行的过程</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//声明式更注重的执行的结果</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//声明式是对命令式的局部包装</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//解答题与填空题的区别</span></span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(event.clientX);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="模块和控制器"><a href="#模块和控制器" class="headerlink" title="模块和控制器"></a>模块和控制器</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">&quot;MyApp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">&quot;MyCtrl&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;empName&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>员工名:&#123;&#123;empName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">&quot;MyCtrl1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;empName&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>员工:&#123;&#123;empName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../js/angular-1.5.5/angular.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//    console.log(angular,typeof angular);</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//    //创建当前应用的模块对象</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//      var module = angular.module(&#x27;MyApp&#x27;,[]);</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//      module.controller(&#x27;MyCtrl&#x27;,function ($scope) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//            $scope.empName = &#x27;Tom&#x27;;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//      &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//    module.controller(&#x27;MyCtrl1&#x27;,function ($scope) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//        $scope.empName = &#x27;Jack&#x27;;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//    &#125;)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//方法链调用</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//    angular.module(&#x27;MyApp&#x27;,[])//模块对象的方法执行完返回的就是模块对象本身</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//            .controller(&#x27;MyCtrl&#x27;,function ($scope) &#123;//$scope写法问题（js代码压缩时会把所有的局部变量压缩成abcd等）</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//                $scope.empName = &#x27;Tom&#x27;;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//            &#125;).controller(&#x27;MyCtrl1&#x27;,function ($scope) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//                $scope.empName = &#x27;Jack&#x27;;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//            &#125;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">    上面写法的问题：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        1、形参只能写固定的变量名$scope;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        2、一旦文件压缩，将不能使用，会报错。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     */</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//改进</span></span></span><br><span class="line"><span class="javascript">    angular.module(<span class="string">&#x27;MyApp&#x27;</span>,[])</span></span><br><span class="line"><span class="javascript">            .controller(<span class="string">&#x27;MyCtrl&#x27;</span>,[<span class="string">&#x27;$scope&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                a.empName = <span class="string">&#x27;tom&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;])</span></span><br><span class="line"><span class="javascript">            .controller(<span class="string">&#x27;MyCtrl1&#x27;</span>,[<span class="string">&#x27;$scope&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                b.empName = <span class="string">&#x27;Jack&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;])</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><ol><li>使用Angular表达式:</li></ol><ul><li><p>语法: { {expression} }</p></li><li><p>作用: 显示表达式的结果数据</p></li><li><p>注意: 表达式中引用的变量必须是当前域对象有的属性(包括其原型属性)</p></li></ul><ol start="2"><li>操作的数据</li></ol><ul><li><p>基本类型数据: number/string/boolean</p></li><li><p>undefined, Infinity, NaN, null解析为空串: “”, 不显示任何效果</p></li><li><p>对象的属性或方法</p></li><li><p>数组</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;&#x27;尚硅谷&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;undefined&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;&#x27;atguigu&#x27;+3&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;4+3&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;true&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-init</span>=<span class="string">&quot;a=3;b=4&quot;</span>&gt;</span>&#123;&#123;a+b&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-init</span>=<span class="string">&quot;p=&#123;name:&#x27;Tom&#x27;,age:12&#125;;arr=[true, 3, &#x27;atguigu&#x27;]&quot;</span>&gt;</span>&#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;----&#123;&#123;arr[2]&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&quot;../../js/angular-1.5.5/angular.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="常用指令一"><a href="#常用指令一" class="headerlink" title="常用指令一"></a>常用指令一</h2><ol><li>Angular指令</li></ol><ul><li><p>Angular为HTML页面扩展的: 自定义标签属性或标签</p></li><li><p>与Angular的作用域对象(scope)交互,扩展页面的动态表现力</p></li></ul><ol start="2"><li>常用指令(一)</li></ol><ul><li><p>ng-app: 指定模块名，angular管理的区域</p><ul><li><p>ng-model： 双向绑定，输入相关标签</p></li><li><p>ng-init： 初始化数据</p></li><li><p>ng-click： 调用作用域对象的方法（点击时）</p></li><li><p>ng-controller: 指定控制器构造函数名，内部会自动创建一个新的子作用域（外部的）</p></li><li><p>ng-bind： 解决使用{ {} }显示数据闪屏（在很短时间内显示{ {} }）</p></li><li><p>ng-repeat： 遍历数组显示数据， 数组有几个元素就会产生几个新的作用域</p></li><li><p>$index, $first, $last, $middle, $odd, $even</p></li><li><p>ng-show: 布尔类型， 如果为true才显示</p></li><li><p>ng-hide: 布尔类型， 如果为true就隐藏</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">&quot;myApp&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">&quot;MyCtrl&quot;</span> <span class="attr">ng-init</span>=<span class="string">&quot;age=12&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>价格计算器(自动)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;count1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;price1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>总计：&#123;&#123;count1 * price1&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>价格计算器(手动)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;count2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        价格：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">ng-model</span>=<span class="string">&quot;price2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">&quot;getTotalPrice()&quot;</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>总计：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    * ng-repeat： 遍历数组显示数据， 数组有几个元素就会产生几个新的作用域</span></span><br><span class="line"><span class="comment">        * $index, $first, $last, $middle, $odd, $even</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>人员信息列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">&quot;person in persons&quot;</span>&gt;</span>偶数行：&#123;&#123;$even&#125;&#125;,奇数行&#123;&#123;$odd&#125;&#125;,中间的：&#123;&#123;$middle&#125;&#125;,最后一个：&#123;&#123;$last&#125;&#125;,第一个：&#123;&#123;$first&#125;&#125;,第&#123;&#123;$index + 1&#125;&#125;个，&#123;&#123;person.name&#125;&#125;----&#123;&#123;person.age&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    * ng-bind： 解决使用&#123;&#123;&#125;&#125;显示数据闪屏（在很短时间内显示&#123;&#123;&#125;&#125;）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当使用ng-bind的时候表达式不在生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind</span>=<span class="string">&quot;count2&quot;</span>&gt;</span>&#123;&#123;&#x27;asdfdsfds&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;count2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      * ng-show: 布尔类型， 如果为true才显示</span></span><br><span class="line"><span class="comment">      * ng-hide: 布尔类型， 如果为true就隐藏</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;button ng-click=&quot;switch()&quot;&gt;切换&lt;/button&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;p ng-show=&quot;isLike&quot;&gt;我爱范冰冰&lt;/p&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;p ng-hide=&quot;isLike&quot;&gt;范冰冰爱我&lt;/p&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">&quot;switch()&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-show</span>=<span class="string">&quot;isLike&quot;</span>&gt;</span>我喜欢贾静雯<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-hide</span>=<span class="string">&quot;isLike&quot;</span>&gt;</span>贾静雯喜欢我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;../../js/angular-1.5.5/angular.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     *  * ng-app: 指定模块名，angular管理的区域</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * ng-model： 双向绑定，输入相关标签</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * ng-init： 初始化数据</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * ng-click： 调用作用域对象的方法（点击时）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * ng-controller: 指定控制器构造函数名，内部会自动创建一个新的子作用域（外部的）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     * */</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建模块对象</span></span></span><br><span class="line"><span class="javascript">    angular.module(<span class="string">&#x27;myApp&#x27;</span>, [])</span></span><br><span class="line"><span class="javascript">            .controller(<span class="string">&#x27;MyCtrl&#x27;</span>, [<span class="string">&#x27;$scope&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                $scope.count1 = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                $scope.price1 = <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">                $scope.count2 = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                $scope.price2 = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">                $scope.totalPrice = $scope.count1 * $scope.price1;</span></span><br><span class="line"><span class="javascript">                $scope.getTotalPrice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $scope.totalPrice =  <span class="built_in">this</span>.count2 * <span class="built_in">this</span>.count2;</span></span><br><span class="line"><span class="javascript">                &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                $scope.persons = [</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">name</span> : <span class="string">&#x27;kobe&#x27;</span>, <span class="attr">age</span> : <span class="number">39</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">name</span> : <span class="string">&#x27;anverson&#x27;</span>, <span class="attr">age</span> : <span class="number">41</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">name</span> : <span class="string">&#x27;weide&#x27;</span>, <span class="attr">age</span> : <span class="number">38</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">name</span> : <span class="string">&#x27;tim&#x27;</span>, <span class="attr">age</span> : <span class="number">40</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">name</span> : <span class="string">&#x27;curry&#x27;</span>, <span class="attr">age</span> : <span class="number">29</span>&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                ];</span></span><br><span class="line"><span class="javascript">                $scope.isLike = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                $scope.switch = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $scope.isLike = !$scope.isLike;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;])</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用指令二"><a href="#常用指令二" class="headerlink" title="常用指令二"></a>常用指令二</h2><ul><li>ng-class: 动态引用定义的样式 {aClass:true, bClass:false}</li><li>ng-style: 动态引用通过js指定的样式对象  {color:’red’, background:’blue’}</li><li>ng-click: 点击监听, 值为函数调用, 可以传$event</li><li>ng-mouseenter: 鼠标移入监听, 值为函数调用, 可以传$event</li><li>ng-mouseleave: 鼠标移出监听, 值为函数调用, 可以传$event</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">style&gt;</span><br><span class="line">  .evenB &#123;</span><br><span class="line">    background-color: grey;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .oddB &#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">&quot;myApp&quot;</span> <span class="attr">ng-controller</span>=<span class="string">&quot;MyController&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 100px;background-color: red&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">ng-mouseover</span>=<span class="string">&quot;over()&quot;</span> <span class="attr">ng-mouseleave</span>=<span class="string">&quot;leave()&quot;</span> <span class="attr">ng-style</span>=<span class="string">&quot;myStyle&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">&quot;p in persons&quot;</span> <span class="attr">ng-class</span>=<span class="string">&quot;&#123;evenB:$even, oddB:$odd&#125;&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&quot;../../js/angular-1.5.5/angular.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  angular.module(<span class="string">&#x27;myApp&#x27;</span>, [])</span></span><br><span class="line"><span class="javascript">      .controller(<span class="string">&#x27;MyController&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $scope.over = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          $scope.myStyle = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">background</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="javascript">          &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        $scope.leave = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          $scope.myStyle = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">background</span>: <span class="string">&#x27;green&#x27;</span></span></span><br><span class="line"><span class="javascript">          &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $scope.persons = [</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom2&#x27;</span>, <span class="attr">age</span>: <span class="number">13</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom3&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom4&#x27;</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom5&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span>&#125;</span></span><br><span class="line"><span class="javascript">        ];</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="1.png" alt="angularjs"></p>]]></content>
      
      
      <categories>
          
          <category> UI框架 </category>
          
          <category> angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs-2</title>
      <link href="/2020/04/30/nodejs-2/"/>
      <url>/2020/04/30/nodejs-2/</url>
      
        <content type="html"><![CDATA[<h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><ul><li>包（package）<ul><li>将多个模块组合为一个完整的功能，就是一个包</li><li>包结构<br>bin<ul><li>二进制的可执行文件，一般都是一些工具包中才有<br>lib</li></ul></li><li>js文件<br>doc</li><li>文档<br>test</li><li>测试代码<br>package.json</li><li>包的描述文件</li></ul></li></ul><ul><li><p>package.json    </p><ul><li>它是一个json格式的文件，在它里面保存了包各种相关的信息<br>name 包名<br>version 版本<br>dependencies 依赖<br>main 包的主要的文件<br>bin 可执行文件</li></ul></li><li><p>npm（Node Package Manager node的包管理器）</p><ul><li>通过npm可以对node中的包进行上传、下载、搜索等操作</li><li>npm会在安装完node以后，自动安装</li><li>npm的常用指令<br>npm -v 查看npm的版本<br>npm version 查看所有模块的版本<br>npm init 初始化项目（创建package.json）<br>npm i/install 包名 安装指定的包<br>npm i/install 包名 –save 安装指定的包并添加依赖<br>npm i/install 包名 -g 全局安装（一般都是一些工具）<br>npm i/install 安装当前项目所依赖的包<br>npm s/search 包名 搜索包<br>npm r/remove 包名 删除一个包</li></ul></li></ul><h1 id="文件系统（File-System）"><a href="#文件系统（File-System）" class="headerlink" title="文件系统（File System）"></a>文件系统（File System）</h1><ul><li>Buffer（缓冲区）<ul><li>Buffer和数组的结构的非常类似，Buffer是用来存储二进制数据的<ul><li>Buffer的方法<ul><li>Buffer.from(字符串)<ul><li>将一个字符串中内容保存到一个buffer中</li></ul></li><li>buf.toString()<ul><li>将buffer转换为一个字符串</li></ul></li><li>Buffer.alloc(size)<ul><li>创建一个指定大小的buffer对象</li></ul></li><li>Buffer.allocUnsafe(size)<ul><li>创建一个指定大小的buffer对象，可以包含敏感数据</li></ul></li></ul></li></ul></li></ul></li></ul><ul><li><p>fs模块</p><ul><li><p>在Node通过fs模块来对系统中的文件进行操作，fs模块是node中已经继承好了，不需要在使用npm下载，直接引入即可</p></li><li><p>引入fs<br>var fs = require(“fs”);</p></li><li><p>fs模块中的大部分操作都提供了两种方法，同步方法和异步方法<br>同步方法带sync<br>异步方法没有sync，都需要回调函数</p></li><li><p>写入文件<br>1.同步写入<br>2.异步写入<br>3.简单写入<br>4.流式写入</p></li><li><p>读取文件<br>1.同步读取<br>2.异步读取<br>3.简单读取<br>4.流式读取</p></li><li><p>方法</p><ul><li><p>打开文件<br>fs.open(path, flags[, mode], callback)<br>fs.openSync(path, flags[, mode])</p></li><li><p>读写文件<br>fs.write(fd, string[, position[, encoding]], callback)<br>fs.writeSync(fd, string[, position[, encoding]])</p><p>fs.read(fd, buffer, offset, length, position, callback)<br>fs.readSync(fd, buffer, offset, length, position)</p></li><li><p>关闭文件<br>fs.close(fd,callback)<br>fs.closeSync(fd);</p></li><li><p>简单文件读取和写入<br>fs.writeFile(file, data[, options], callback)<br>fs.writeFileSync(file, data[, options])</p><p>fs.readFile(path[, options], callback)<br>fs.readFileSync(path[, options])</p></li><li><p>流式文件读取和写入</p><p>流式读取和写入适用于一些比较大的文件<br>fs.createWriteStream(path[, options])<br>fs.createReadStream(path[, options])</p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs-1</title>
      <link href="/2020/04/30/nodejs-1/"/>
      <url>/2020/04/30/nodejs-1/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行窗口-小黑屏-、CMD窗口、终端、shell"><a href="#命令行窗口-小黑屏-、CMD窗口、终端、shell" class="headerlink" title="命令行窗口(小黑屏)、CMD窗口、终端、shell"></a>命令行窗口(小黑屏)、CMD窗口、终端、shell</h1><ul><li><p>开始菜单 –&gt; 运行 –&gt; CMD –&gt; 回车</p><ul><li><p>常用的指令：<br>dir 列出当前目录下的所有文件<br>cd 目录名 进入到指定的目录<br>md 目录名 创建一个文件夹<br>rd 目录名 删除一个文件夹    </p></li><li><p>目录<br>. 表示当前目录<br>.. 表示上一级目录</p></li><li><p>环境变量（windows系统中变量）<br>path</p><pre><code>C:\work\jdk\jdk1.7.0_75/bin;%CATALINA_HOME%/bin;C:\work\soft\tools\AppServ\Apache24\bin;C:\work\soft\tools\AppServ\php5;C:\Users\lilichao\AppData\Local\Programs\Fiddler;C:\work\environment\Egret\Egret Wing 3\bin;C:\Users\lilichao\AppData\Roaming\npm;C:\Program Files\MongoDB\Server\3.2\bin;C:\Users\lilichao\Desktop\hello</code></pre><ul><li>当我们在命令行窗口打开一个文件，或调用一个程序时，<br>系统会首先在当前目录下寻找文件程序，如果找到了则直接打开<br>如果没有找到则会依次到环境变量path的路径中寻找，直到找到为止<br>如果没找到则报错</li></ul></li></ul></li></ul><ul><li>所以我们可以将一些经常需要访问的程序和文件的路径添加到path中，<br>这样我们就可以在任意位置来访问这些文件和程序了</li></ul><h1 id="I-O-Input-Output"><a href="#I-O-Input-Output" class="headerlink" title="I/O (Input/Output)"></a>I/O (Input/Output)</h1><ul><li>I/O操作指的是对磁盘的读写操作</li></ul><h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><ul><li><p>Node是对ES标准一个实现，Node也是一个JS引擎</p></li><li><p>通过Node可以使js代码在服务器端执行</p></li><li><p>Node仅仅对ES标准进行了实现，所以在Node中不包含DOM 和 BOM    </p></li><li><p>Node中可以使用所有的内建对象<br>String Number Boolean Math Date RegExp Function Object Array<br>而BOM和DOM都不能使用<br>  但是可以使用 console 也可以使用定时器（setTimeout() setInterval()）</p></li><li><p>Node可以在后台来编写服务器</p></li><li><p>Node编写服务器都是单线程的服务器</p><ul><li><p>进程</p><ul><li>进程就是一个一个的工作计划（工厂中的车间）</li><li>线程<ul><li>线程是计算机最小的运算单位（工厂中的工人）<br>线程是干活的</li></ul></li></ul></li><li><p>传统的服务器都是多线程的</p><ul><li>每进来一个请求，就创建一个线程去处理请求</li></ul></li><li><p>Node的服务器单线程的</p><ul><li>Node处理请求时是单线程，但是在后台拥有一个I/O线程池</li></ul></li></ul></li></ul><h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><ul><li>node是一款对ES标准实现的JS引擎</li><li>通过node可以使js在服务器中运行</li><li>node就是一款使用js编写的web服务器</li><li>node底层是使用c++的编写的</li><li>node的中js引擎使用的chrome的v8引擎</li><li>node的特点：<br>1.非阻塞、异步的I/O<br>2.事件和回调函数<br>3.单线程（主线程单线程，后台I/O线程池）<br>4.跨平台</li></ul><ul><li><p>模块化</p><ul><li><p>ES5中没有原生支持模块化，我们只能通过script标签引入js文件来实现模块化</p><ul><li><p>在node中为了对模块管理，引入了CommonJS规范</p><ul><li><p>模块的引用</p><ul><li>使用 require()函数来引入一个模块</li><li>例子：<br>var 变量 = require(“模块的标识”);</li></ul></li><li><p>模块的定义</p><ul><li><p>在node中一个js文件就是一个模块</p></li><li><p>默认情况下在js文件中编写的内容，都是运行在一个独立的函数中，<br>外部的模块无法访问</p></li><li><p>导出变量和函数</p><ul><li><p>使用 exports </p><ul><li>例子：<br>exports.属性 = 属性值;<br>exports.方法 = 函数;</li></ul></li><li><p>使用module.exports</p><ul><li>例子：<br>module.exports.属性 = 属性值;<br>module.exports.方法 = 函数;<br>module.exports = {};</li></ul></li></ul></li></ul></li><li><p>模块的标识</p><ul><li><p>模块的标识就是模块的名字或路径<br>我们node通过模块的标识来寻找模块的<br>对于核心模块（npm中下载的模块），直接使用模块的名字对其进行引入</p><pre><code>var fs = require(&quot;fs&quot;);var express = require(&quot;express&quot;);</code></pre><p>对于自定义的文件模块，需要通过文件的路径来对模块进行引入</p><pre><code>路径可以是绝对路径，如果是相对路径必须以./或 ../开头var router = require(&quot;./router&quot;);</code></pre></li></ul></li></ul></li></ul></li></ul></li></ul><h1 id="npm的命令"><a href="#npm的命令" class="headerlink" title="npm的命令"></a>npm的命令</h1><ul><li>npm -v 查看npm的版本</li><li>npm version 查看所有模块的版本</li><li>npm search 包名 搜索包</li><li>npm install / i 包名 安装包</li><li>npm remove / r 包名 删除包</li><li>npm install 包名 –save 安装包并添加到依赖中 *</li><li>npm install 下载当前项目所依赖的包</li><li>npm install 包名 -g 全局安装包（全局安装的包一般都是一些工具）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jq-2</title>
      <link href="/2020/04/29/jQ-2/"/>
      <url>/2020/04/29/jQ-2/</url>
      
        <content type="html"><![CDATA[<div class="note default flat"><p>jQuery是优秀的JavaScript框架，能使用户能更方便地处理HTML、documents、events、实现动画效果，并且方便地为网站提供Ajax交互。在世界前10000个访问最多的网站中，有超过 55 %在使用jQuery。</p></div><h1 id="val和each和size"><a href="#val和each和size" class="headerlink" title="val和each和size"></a>val和each和size</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">              val() value  获取/设置表单元素的值</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              size() 输出，获取网页元素的个数</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              each() 遍历</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// alert($(&quot;input&quot;).val()); //JQ取值只能去第一个符合条件元素的值</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;input&quot;).val(&quot;hello world&quot;); //JQ赋值批量操作，会对所有获取到的元素进行赋值。</span></span></span><br><span class="line"><span class="javascript">              <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  css()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  attr()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  html()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  【注】都是批量操作。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">/* alert($(&#x27;input&#x27;).size());</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              alert($(&quot;input&quot;).length); */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;input&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="comment">// alert(item + &quot;, &quot; + index);</span></span></span><br><span class="line"><span class="javascript">                  <span class="comment">// item.value = index;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                  $(item).val(index);</span></span><br><span class="line"><span class="javascript">              &#125;)</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">      </span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span> = <span class="string">&#x27;aaa&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span> = <span class="string">&#x27;bbb&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span> = <span class="string">&#x27;ccc&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jQ特效函数"><a href="#jQ特效函数" class="headerlink" title="jQ特效函数"></a>jQ特效函数</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">          <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>; <span class="attribute">height</span>: <span class="number">200px</span>;&#125;</span></span><br><span class="line"><span class="css">          <span class="selector-id">#div1</span>&#123;<span class="attribute">background-color</span>: red&#125;</span></span><br><span class="line"><span class="css">          <span class="selector-id">#div2</span>&#123;<span class="attribute">background-color</span>: blue&#125;</span></span><br><span class="line"><span class="css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">              hover(funcOver, funcOut)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              hide() 隐藏</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  第一个参数：动画持续的毫秒数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  第二个参数：回调函数，动画结束的时候执行的</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              show() 显示</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              【注】动画效果是，从左上角收起和从左上角展开</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              slideDown()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              slideUp()   动画效果是卷闸效果。</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              fadeIn()   淡入</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              fadeOut()  淡出</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              fadeTo(动画持续时间,  透明度0~1, 回调函数);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          */</span></span></span><br><span class="line"><span class="javascript">         $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">             $(<span class="string">&quot;#div1&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="comment">// $(this).html(&quot;移入&quot;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                 <span class="comment">/*  $(&quot;#div2&quot;).hide(2000, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                      $(&quot;#div1&quot;).html(&quot;移入&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  &#125;); */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                 <span class="comment">/*  $(&quot;#div2&quot;).slideUp(2000, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                      $(&quot;#div1&quot;).html(&quot;移入&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  &#125;); */</span></span></span><br><span class="line"><span class="javascript">                  <span class="comment">/* $(&quot;#div2&quot;).fadeOut(2000, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                      $(&quot;#div1&quot;).html(&quot;移入&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  &#125;); */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                  $(<span class="string">&quot;#div2&quot;</span>).fadeTo(<span class="number">2000</span>, <span class="number">0.5</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                      $(<span class="string">&quot;#div1&quot;</span>).html(<span class="string">&quot;移入&quot;</span>)</span></span><br><span class="line"><span class="javascript">                  &#125;);</span></span><br><span class="line"><span class="javascript">             &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="comment">// $(this).html(&quot;移出&quot;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                  <span class="comment">/* $(&quot;#div2&quot;).show(2000, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                      $(&quot;#div1&quot;).html(&quot;移出&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  &#125;); */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                 <span class="comment">/*  $(&quot;#div2&quot;).slideDown(2000, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                      $(&quot;#div1&quot;).html(&quot;移出&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  &#125;); */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                 <span class="comment">/*  $(&quot;#div2&quot;).fadeIn(2000, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                      $(&quot;#div1&quot;).html(&quot;移出&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  &#125;); */</span></span></span><br><span class="line"><span class="javascript">                  $(<span class="string">&quot;#div2&quot;</span>).fadeTo(<span class="number">2000</span>, <span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                      $(<span class="string">&quot;#div1&quot;</span>).html(<span class="string">&quot;移出&quot;</span>)</span></span><br><span class="line"><span class="javascript">                  &#125;);</span></span><br><span class="line"><span class="javascript">             &#125;)</span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jQ-animate"><a href="#jQ-animate" class="headerlink" title="jQ_animate"></a>jQ_animate</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">          <span class="comment">/* div&#123;width: 100px; height: 100px; background-color: orange&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">          #div1&#123; position: absolute; top: 300px&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">          #div2&#123;background-color: blue&#125;</span></span></span><br><span class="line"><span class="comment"><span class="css">          .box&#123;background-color: green&#125; */</span></span></span><br><span class="line"><span class="css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;jquery-ui.min.css&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-ui.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">              hover(funcOver, funcOut)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              hide() 隐藏</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  第一个参数：动画持续的毫秒数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  第二个参数：回调函数，动画结束的时候执行的</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              show() 显示</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              【注】动画效果是，从左上角收起和从左上角展开</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              slideDown()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              slideUp()   动画效果是卷闸效果。</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              fadeIn()   淡入</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              fadeOut()  淡出</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              fadeTo(动画持续时间,  透明度0~1, 回调函数);</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              animate</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  默认的运动形式是 慢快慢</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                      匀速   &quot;linear&quot;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                      慢快慢  &quot;swing&quot;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              拓展更多animate的运动形式：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  引入 jquery-ui</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          */</span></span></span><br><span class="line"><span class="javascript">         $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="comment">/* $(&quot;#div1&quot;).hover(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 $(&quot;#div2&quot;).animate(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     width: 300,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     height: 300,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     opacity: 0.5</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 &#125;, 4000, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     $(&quot;#div1&quot;).html(&quot;移入&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             &#125;, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              $(&quot;#div2&quot;).animate(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     width: 200,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     height: 200,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     opacity: 1</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 &#125;, 4000, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     $(&quot;#div1&quot;).html(&quot;移出&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             &#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">//    https://www.jqueryui.org.cn/demo/5735.html 查找动画特效</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             $(<span class="string">&quot;#div1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/*  $(&quot;#div1&quot;).animate(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     width: 300,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     height: 300</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 &#125;, 4000, &quot;easeOutBounce&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 $(&quot;#div2&quot;).animate(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     width: 300,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     height: 300</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 &#125;, 4000) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                 <span class="comment">/* $(this).animate(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     top: 500</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 &#125;, 2000, &quot;easeOutQuart&quot;) */</span></span></span><br><span class="line"><span class="javascript">             &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  有了JQueryUI以后 addClass和removeClass就变成了增强版的方法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                 $(<span class="string">&quot;#div1&quot;</span>).addClass(<span class="string">&quot;box&quot;</span>, <span class="number">4000</span>);</span></span><br><span class="line"><span class="javascript">             &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                 $(<span class="string">&quot;#div1&quot;</span>).removeClass(<span class="string">&quot;box&quot;</span>, <span class="number">4000</span>);</span></span><br><span class="line"><span class="javascript">             &#125;)</span></span><br><span class="line"><span class="javascript">             $( <span class="string">&quot;#datepicker&quot;</span> ).datepicker();</span></span><br><span class="line"><span class="javascript">             $( <span class="string">&quot;#tabs&quot;</span> ).tabs();</span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;datepicker&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tabs&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tabs-1&quot;</span>&gt;</span>Nunc tincidunt<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tabs-2&quot;</span>&gt;</span>Proin dolor<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tabs-3&quot;</span>&gt;</span>Aenean lacinia<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tabs-1&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Proin elit arcu, rutrum commodo, vehicula tempus, commodo a, risus. Curabitur nec arcu. Donec sollicitudin mi sit amet mauris. Nam elementum quam ullamcorper ante. Etiam aliquet massa et lorem. Mauris dapibus lacus auctor risus. Aenean tempor ullamcorper leo. Vivamus sed magna quis ligula eleifend adipiscing. Duis orci. Aliquam sodales tortor vitae ipsum. Aliquam nulla. Duis aliquam molestie erat. Ut et mauris vel pede varius sollicitudin. Sed ut dolor nec orci tincidunt interdum. Phasellus ipsum. Nunc tristique tempus lectus.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tabs-2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Morbi tincidunt, dui sit amet facilisis feugiat, odio metus gravida ante, ut pharetra massa metus id nunc. Duis scelerisque molestie turpis. Sed fringilla, massa eget luctus malesuada, metus eros molestie lectus, ut tempus eros massa ut dolor. Aenean aliquet fringilla sem. Suspendisse sed ligula in ligula suscipit aliquam. Praesent in eros vestibulum mi adipiscing adipiscing. Morbi facilisis. Curabitur ornare consequat nunc. Aenean vel metus. Ut posuere viverra nulla. Aliquam erat volutpat. Pellentesque convallis. Maecenas feugiat, tellus pellentesque pretium posuere, felis lorem euismod felis, eu ornare leo nisi vel felis. Mauris consectetur tortor et purus.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tabs-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Mauris eleifend est et turpis. Duis id erat. Suspendisse potenti. Aliquam vulputate, pede vel vehicula accumsan, mi neque rutrum erat, eu congue orci lorem eget lorem. Vestibulum non ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce sodales. Quisque eu urna vel enim commodo pellentesque. Praesent eu risus hendrerit ligula tempus pretium. Curabitur lorem enim, pretium nec, feugiat nec, luctus a, lacus.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Duis cursus. Maecenas ligula eros, blandit nec, pharetra at, semper at, magna. Nullam ac lacus. Nulla facilisi. Praesent viverra justo vitae neque. Praesent blandit adipiscing velit. Suspendisse potenti. Donec mattis, pede vel pharetra blandit, magna ligula faucibus eros, id euismod lacus dolor eget odio. Nam scelerisque. Donec non libero sed nulla mattis commodo. Ut sagittis. Donec nisi lectus, feugiat porttitor, tempor ac, tempor vitae, pede. Aenean vehicula velit eu tellus interdum rutrum. Maecenas commodo. Pellentesque nec elit. Fusce in lacus. Vivamus a libero vitae lectus hendrerit hendrerit.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>添加class<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除class<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">         <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background-color</span>: orange&#125;</span></span><br><span class="line"><span class="css">         <span class="selector-id">#div2</span>&#123;<span class="attribute">background-color</span>: blue&#125;</span></span><br><span class="line"><span class="css">         <span class="selector-class">.box</span>&#123;<span class="attribute">background-color</span>: green&#125;</span></span><br><span class="line"><span class="css">     </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">         <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">             停止动画的函数</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">             delay()  延迟</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript">         $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="comment">/* $(&quot;#div1&quot;).hover(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     // 小技巧：</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     //     我们可以在每次调用animate之前先去调用一次stop关闭上一次定时器</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                </span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 $(this).stop(true).animate(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     width: 300,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     height: 300</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 &#125;, 2000)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             &#125;, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 $(this).stop(true).animate(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     width: 100,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     height: 100</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 &#125;, 2000)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             &#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             $(<span class="string">&quot;#div1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                 $(<span class="string">&quot;#div1&quot;</span>).animate(&#123;<span class="attr">width</span>: <span class="number">300</span>&#125;, <span class="number">2000</span>).delay(<span class="number">4000</span>).animate(&#123;<span class="attr">height</span>: <span class="number">300</span>&#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="javascript">             &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             $(<span class="string">&quot;#div2&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                 <span class="comment">// $(&quot;#div1&quot;).stop(); //停止第一个动画，当时后续动画正常运动</span></span></span><br><span class="line"><span class="javascript">                 <span class="comment">// $(&quot;#div1&quot;).stop(true); //停止所有动画</span></span></span><br><span class="line"><span class="javascript">                 <span class="comment">// $(&quot;#div1&quot;).stop(true, true); //停止所有动画，并且将当前正在进行的动画，直接//到达目的值</span></span></span><br><span class="line"><span class="javascript">                 $(<span class="string">&quot;#div1&quot;</span>).finish(); <span class="comment">//停止所有动画,并且将所有的动画都到达目的值</span></span></span><br><span class="line"><span class="javascript">             &#125;)</span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jQ-remove和detach"><a href="#jQ-remove和detach" class="headerlink" title="jQ_remove和detach"></a>jQ_remove和detach</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">          <span class="selector-id">#div1</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background-color</span>: red;&#125;</span></span><br><span class="line"><span class="css">          <span class="selector-id">#div2</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>; <span class="attribute">height</span>: <span class="number">200px</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid black;&#125;</span></span><br><span class="line"><span class="css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">              remove() 删除元素节点</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  【注】并不会保留这个元素节点上之前的事件和行为</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              detach() 删除元素节点</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  【注】会保留这个元素节点上之前的事件和行为</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          */</span></span></span><br><span class="line"><span class="javascript">         $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;#div1&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;orange&#x27;</span>);</span></span><br><span class="line"><span class="javascript">              &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;blue&#x27;</span>);</span></span><br><span class="line"><span class="javascript">              &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">//remove 返回值就是我们删除这个节点</span></span></span><br><span class="line"><span class="javascript">              <span class="comment">//    var node = $(&quot;#div1&quot;).remove();</span></span></span><br><span class="line"><span class="javascript">                 <span class="keyword">var</span> node = $(<span class="string">&quot;#div1&quot;</span>).detach();</span></span><br><span class="line"><span class="javascript">                 node.appendTo($(<span class="string">&quot;#div2&quot;</span>));</span></span><br><span class="line"><span class="javascript">             &#125;)</span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div1&#x27;</span> <span class="attr">title</span> = <span class="string">&#x27;hello&#x27;</span> <span class="attr">class</span> = <span class="string">&#x27;box&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="ready"><a href="#ready" class="headerlink" title="ready"></a>ready</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">            ready  事件</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            $(document).ready()  事件触发在当前的document加载完成以后执行。</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            window</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            document加载完毕肯定是在window加载完毕之前。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        */</span></span></span><br><span class="line"><span class="javascript">       <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           alert(<span class="string">&quot;我是onload&quot;</span>)</span></span><br><span class="line"><span class="javascript">       &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//相当于window.onload</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="text"><a href="#text" class="headerlink" title="text"></a>text</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">         <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">             JQuery  标签间的内容  html() 相当于innerHTML</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             JQuery  标签间纯文本  text() 相当于innerText</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">         $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/*  alert($(&quot;#div1&quot;).html()); //&lt;em&gt;em&lt;/em&gt;div文本&lt;strong&gt;strong&lt;/strong&gt;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             alert($(&quot;#div1&quot;).text()); //emdiv文本strong */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             <span class="comment">// $(&quot;#div1&quot;).html(&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;);</span></span></span><br><span class="line"><span class="javascript">             $(<span class="string">&quot;#div1&quot;</span>).text(<span class="string">&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div1&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>em<span class="tag">&lt;/<span class="name">em</span>&gt;</span>div文本<span class="tag">&lt;<span class="name">strong</span>&gt;</span>strong<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">              节点操作的方法</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              【注】下述所有的方法的参数都是选择器</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              siblings()   用来除当前节点外，所有的兄弟节点</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              nextAll() prevAll()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              parentsUntil() nextUntil() prevUntil()</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">          */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">          $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;#p1&quot;).siblings().css(&quot;backgroundColor&quot;, &#x27;blue&#x27;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;#p1&quot;).nextAll().css(&quot;backgroundColor&quot;, &#x27;red&#x27;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;#p1&quot;).prevAll(&quot;h1&quot;).css(&quot;backgroundColor&quot;, &#x27;red&#x27;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;#p1&quot;).nextUntil(&quot;strong&quot;).css(&quot;backgroundColor&quot;, &#x27;orange&#x27;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;#p1&quot;).prevUntil(&quot;h1&quot;).css(&quot;backgroundColor&quot;, &#x27;orange&#x27;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;#p1&quot;</span>).parentsUntil(<span class="string">&quot;body&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;green&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div1&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span> = <span class="string">&#x27;p1&#x27;</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">em</span>&gt;</span>em<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>strong<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="parents和closest"><a href="#parents和closest" class="headerlink" title="parents和closest"></a>parents和closest</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">              parent()  获取父节点</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              parents() 获取父节点们  参数选择器</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              closest() 必须传入参数，参数也是选择器，只获取第一个符合条件的元素，从自己开始去查找的</span></span></span><br><span class="line"><span class="comment"><span class="javascript">           */</span></span></span><br><span class="line"><span class="javascript">           $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;#div2&quot;).parent().css(&quot;backgroundColor&quot;, &#x27;red&#x27;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;#div2&quot;).parents(&quot;.box&quot;).css(&quot;backgroundColor&quot;, &#x27;red&#x27;);</span></span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;#div2&quot;</span>).closest(<span class="string">&quot;#div1&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="javascript">           &#125;)</span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span> = <span class="string">&#x27;box&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div1&#x27;</span> <span class="attr">class</span> = <span class="string">&#x27;box&#x27;</span>&gt;</span></span><br><span class="line">          div1</span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div2&#x27;</span> <span class="attr">class</span> = <span class="string">&#x27;box&#x27;</span>&gt;</span></span><br><span class="line">              div2</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="wrap"><a href="#wrap" class="headerlink" title="wrap"></a>wrap</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">          /* </span></span></span><br><span class="line"><span class="xml"><span class="handlebars">              wrap()   每一个获取到的元素节点单独包装</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">              wrapAll() 整体包装</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">              wrapInner() 内部包装</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">              unwrap()  删除包装  删除上面一层包装，不包括body节点</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">           */</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">           $(function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">               //我们给页面上所有的span节点加一个包装，直接JQ创建节点的代码</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">              //  $(&quot;span&quot;).wrap(&quot;<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">&#x27;box&#x27;</span> <span class="attr">title</span> = <span class="string">&#x27;hello&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">              // $(&quot;span&quot;).wrapAll(&quot;<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">&#x27;box&#x27;</span> <span class="attr">title</span> = <span class="string">&#x27;hello&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">              // $(&quot;span&quot;).wrapInner(&quot;<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span> = <span class="string">&#x27;box&#x27;</span> <span class="attr">title</span> = <span class="string">&#x27;hello&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">              $(&quot;span&quot;).unwrap(); //没有参数</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">           &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">      </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">          <span class="selector-id">#div1</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background-color</span>: red;&#125;</span></span><br><span class="line"><span class="css">          <span class="selector-id">#div2</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>; <span class="attribute">height</span>: <span class="number">200px</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid black;&#125;</span></span><br><span class="line"><span class="css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">              clone()  默认只会克隆节点本身，并不会克隆我们元素节点的行为和事件</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              clone(true) 既会克隆节点本身，还会克隆元素节点的行为和事件</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          */</span></span></span><br><span class="line"><span class="javascript">         $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;#div1&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;orange&#x27;</span>);</span></span><br><span class="line"><span class="javascript">              &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;blue&#x27;</span>);</span></span><br><span class="line"><span class="javascript">              &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                 <span class="keyword">var</span> node = $(<span class="string">&quot;#div1&quot;</span>).clone(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                 node.appendTo($(<span class="string">&quot;#div2&quot;</span>));</span></span><br><span class="line"><span class="javascript">             &#125;)</span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>删除节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div1&#x27;</span> <span class="attr">title</span> = <span class="string">&#x27;hello&#x27;</span> <span class="attr">class</span> = <span class="string">&#x27;box&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;div2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="add和slice"><a href="#add和slice" class="headerlink" title="add和slice"></a>add和slice</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">            add() 可以将多个选择器拼接在一起</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            slice()  slice(start, end) [start, end)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            获取指定范围内获取到的元素节点。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/* $(&quot;div&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .css(&quot;backgroundColor&quot;, &#x27;red&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .click(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                alert(&quot;单击&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .mouseover(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $(this).css(&quot;backgroundColor&quot;, &#x27;orange&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .mouseout(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $(this).css(&quot;backgroundColor&quot;, &#x27;blue&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            $(&quot;span&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .css(&quot;backgroundColor&quot;, &#x27;red&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .click(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                alert(&quot;单击&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .mouseover(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $(this).css(&quot;backgroundColor&quot;, &#x27;orange&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .mouseout(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $(this).css(&quot;backgroundColor&quot;, &#x27;blue&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            $(&quot;ul li&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .css(&quot;backgroundColor&quot;, &#x27;red&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .click(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                alert(&quot;单击&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .mouseover(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $(this).css(&quot;backgroundColor&quot;, &#x27;orange&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .mouseout(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $(this).css(&quot;backgroundColor&quot;, &#x27;blue&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $(&quot;div&quot;).add(&quot;span&quot;).add(&quot;ul li&quot;)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">/* $(&quot;div,span,ul li&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .css(&quot;backgroundColor&quot;, &#x27;red&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .click(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                alert(&quot;单击&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .mouseover(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $(this).css(&quot;backgroundColor&quot;, &#x27;orange&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            .mouseout(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $(this).css(&quot;backgroundColor&quot;, &#x27;blue&#x27;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;ul li&quot;</span>).slice(<span class="number">1</span>, <span class="number">4</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;red&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="数据串联化"><a href="#数据串联化" class="headerlink" title="数据串联化"></a>数据串联化</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">              serialize()   将我们表单中的数据拼接成querystring（查询字符串） name1=value1&amp;name2=value2</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              search      ?name1=value1&amp;name2=value2</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              querystring  name1=value1&amp;name2=value2</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              serializeArray()  将表单数据拼接成数组</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">           */</span></span></span><br><span class="line"><span class="javascript">           $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">//  alert($(&quot;input&quot;).serialize()); //a=1&amp;b=2&amp;c=3</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log($(<span class="string">&quot;input&quot;</span>).serializeArray())</span></span><br><span class="line"><span class="javascript">           &#125;)</span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&#x27;a&#x27;</span> <span class="attr">value</span> = <span class="string">&#x27;1&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&#x27;b&#x27;</span> <span class="attr">value</span> = <span class="string">&#x27;2&#x27;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&#x27;c&#x27;</span> <span class="attr">value</span> = <span class="string">&#x27;3&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="时间细化"><a href="#时间细化" class="headerlink" title="时间细化"></a>时间细化</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">              • trigger()  主动触发</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              • ev.data </span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              ev.target(兼容后触发对象) </span></span></span><br><span class="line"><span class="comment"><span class="javascript">              ev.type(输出事件类型)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">           */</span></span></span><br><span class="line"><span class="javascript">           $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">/* $(&quot;button&quot;).click(function(ev)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  alert(ev.type);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  alert(ev.target);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              &#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">//配合on使用 </span></span></span><br><span class="line"><span class="javascript">              <span class="comment">/* $(&quot;button&quot;).on(&quot;click&quot;, &#123;username: &quot;钢铁侠&quot;, age: 18&#125;, function(ev)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  alert(ev.data); //拿到传入的参数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  alert(ev.data.username);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  alert(ev.data.age);</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  alert(1);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">              $(&quot;button&quot;).on(&quot;click&quot;, function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  alert(1);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              &#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  trigger() 可以触发官方定义的事件以外</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                            还可以触发我们自定义的事件</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  音乐播放器</span></span></span><br><span class="line"><span class="comment"><span class="javascript">               */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;button&quot;).trigger(&quot;click&quot;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;#play&quot;</span>).on(<span class="string">&quot;play&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  alert(<span class="string">&quot;开始播放音乐&quot;</span>);</span></span><br><span class="line"><span class="javascript">              &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;#play&quot;</span>).on(<span class="string">&quot;next&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  alert(<span class="string">&quot;切换到下一首歌曲&quot;</span>);</span></span><br><span class="line"><span class="javascript">              &#125;)</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  $(<span class="string">&quot;#play&quot;</span>).trigger(<span class="string">&quot;play&quot;</span>);</span></span><br><span class="line"><span class="javascript">              &#125;)</span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  $(<span class="string">&quot;#play&quot;</span>).trigger(<span class="string">&quot;next&quot;</span>);</span></span><br><span class="line"><span class="javascript">              &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">           &#125;)</span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>下一首<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">&#x27;play&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jQ的工具方法"><a href="#jQ的工具方法" class="headerlink" title="jQ的工具方法"></a>jQ的工具方法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">               </span></span></span><br><span class="line"><span class="comment"><span class="javascript">            JQ的工具方法和我们自己封装的js方法没有任何区别。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $()下的常用方法(都没用了，ECMA5和ECMA6类似功能的函数)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">                JQ的方法调用：$().xxx() $().yyy()  必须JQ对象调用这个函数</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                JQ的工具方法：$.xxx() $.yyy()</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    • type()  输出当前数据类型   typeof</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    • trim()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    • inArray()    indexOf()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    • proxy()    功能类似于bind  $.proxy()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    • noConflict()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    • $.parseJSON()   JSON.parse()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    • makeArray()    将伪数组转成数组。 Array.from()</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">/* var arr = [10, 20, 30];</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         var str = new String();</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         var d = new Date(); */</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">/*  alert(typeof arr);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         alert(typeof str);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         alert(typeof d); */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">         <span class="comment">/* alert($.type(arr));</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         alert($.type(str));</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         alert($.type(d)); */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">         <span class="comment">/* var str = &quot;   he  l lo   &quot;;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         alert(&quot;|&quot; + str + &quot;|&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         alert(&quot;|&quot; + str.trim() + &quot;|&quot;); */</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//  alert(&quot;|&quot; + $.trim(str) + &quot;|&quot;);</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">       <span class="comment">/*  var arr = [10, 20, 30, 40];</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        alert($.inArray(30, arr)); */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/* var qian = $.noConflict(); //给$函数起一个别名</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        var $ = 10;</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">        qian(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            qian(document).click(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                alert(1);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">        &#125;) */</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// nodes.push(&quot;hello&quot;); //伪数组</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// nodes = $.makeArray(nodes);</span></span></span><br><span class="line"><span class="javascript">            nodes = <span class="built_in">Array</span>.from(nodes);</span></span><br><span class="line"><span class="javascript">            nodes.push(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="javascript">            alert(nodes);</span></span><br><span class="line"><span class="javascript">        &#125; </span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jQ插件方法"><a href="#jQ插件方法" class="headerlink" title="jQ插件方法"></a>jQ插件方法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background-color</span>: orange; <span class="attribute">position</span>: absolute;;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>,<span class="selector-tag">em</span>&#123;<span class="attribute">position</span>: absolute;&#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">            $.extend()   拓展工具方法   $.xxx() $.yyy()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            $.fn.extend()  拓展JQ方法 $().xxx() $().yyy()</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">            JQ插件方法，如果我们想要给JQ新增函数，通过上述两个插件方法拓展函数库。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">         $.extend(&#123;</span></span><br><span class="line"><span class="javascript">             <span class="attr">aaa</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                 alert(<span class="string">&quot;这是一个工具方法&quot;</span>);</span></span><br><span class="line"><span class="javascript">             &#125;</span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript">         $.fn.extend(&#123;</span></span><br><span class="line"><span class="javascript">             <span class="attr">aaa</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                 alert(<span class="string">&quot;这是一个JQ方法&quot;</span>);</span></span><br><span class="line"><span class="javascript">             &#125;,</span></span><br><span class="line"><span class="javascript">             <span class="attr">drag</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//  this.css(&quot;backgroundColor&quot;, &#x27;red&#x27;);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//this = $(&quot;div,p,em&quot;);  </span></span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">this</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> offsetX = ev.clientX - $(<span class="built_in">this</span>).offset().left;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> offsetY = ev.clientY - $(<span class="built_in">this</span>).offset().top;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        $(_this).css(&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">left</span>: ev.clientX - offsetX,</span></span><br><span class="line"><span class="javascript">                            <span class="attr">top</span>: ev.clientY - offsetY</span></span><br><span class="line"><span class="javascript">                        &#125;)</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">document</span>).mouseup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="built_in">document</span>).off(<span class="string">&quot;mousemove&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">             &#125;</span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">         $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/*  $.aaa();</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             $(&quot;div&quot;).aaa(); */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             alert($(<span class="string">&quot;div&quot;</span>).drag == $(<span class="string">&quot;p&quot;</span>).drag);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;div,p,em&quot;</span>).drag().css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;blue&#x27;</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;yellow&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">             </span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>em<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="get"><a href="#get" class="headerlink" title="get"></a>get</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">          $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  可以将前面的JQ对象转成JS对象</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  get()传入下标，获取指定的元素。</span></span></span><br><span class="line"><span class="comment"><span class="javascript">               */</span></span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;div&quot;).get(1).innerHTML = &#x27;hello world&#x27;;</span></span></span><br><span class="line"><span class="javascript">              <span class="comment">// $(&quot;div&quot;)[1].innerHTML = &#x27;hello world&#x27;;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">              <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  alert(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">              &#125;</span></span><br><span class="line"><span class="javascript">              show.call(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JQuery-cookie"><a href="#JQuery-cookie" class="headerlink" title="JQuery_cookie"></a>JQuery_cookie</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery.cookie.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $.cookie()</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">                具体调用的格式</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $.cookie(name) 通过name取值</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $.cookie(name, value) 设置name和value</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $.cookie(name, value &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    可选项</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                    raw: true  value不进行编码</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        默认false value要进行编码的</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                $.cookie(name, null); 删除cookie</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             <span class="comment">/* $.cookie(&quot;变种人&quot;, &quot;X教授&quot;, &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 expires: 7,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 raw: true</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">             $.cookie(&quot;赛亚人&quot;, &quot;贝吉塔&quot;, &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 expires: 30</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">             $.cookie(&quot;海贼王&quot;, &quot;路飞&quot;, &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 expires: 1000</span></span></span><br><span class="line"><span class="comment"><span class="javascript">             &#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             alert($.cookie(<span class="string">&quot;变种人&quot;</span>));</span></span><br><span class="line"><span class="javascript">             alert($.cookie(<span class="string">&quot;赛亚人&quot;</span>));</span></span><br><span class="line"><span class="javascript">             alert($.cookie(<span class="string">&quot;海贼王&quot;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">             $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                 $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                     $.cookie(<span class="string">&quot;赛亚人&quot;</span>, <span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">                     alert($.cookie(<span class="string">&quot;赛亚人&quot;</span>));</span></span><br><span class="line"><span class="javascript">                 &#125;)</span></span><br><span class="line"><span class="javascript">             &#125;)</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&#x27;btn1&#x27;</span>&gt;</span>删除cookie<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="02JQuery-ajax"><a href="#02JQuery-ajax" class="headerlink" title="02JQuery_ajax"></a>02JQuery_ajax</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&#x27;jquery-1.10.1.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="javascript">            $().load()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            $.get()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">            $.post()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">         $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">             $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                 <span class="comment">/* $.ajax(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     type: &quot;get&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     url: &quot;1.txt&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     data: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript"></span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     success: function(data, statusText, xhr)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                         </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                            // statusText success  error</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                            // xhr ajax对象</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                         </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        alert(data + &quot;, &quot; + statusText);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     error: function(msg)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                         alert(msg);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                     &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 &#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                 $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                     <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="javascript">                     <span class="attr">url</span>: <span class="string">&quot;https://api.asilu.com/weather/&quot;</span>,</span></span><br><span class="line"><span class="javascript">                     <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">                         <span class="attr">city</span>: <span class="string">&quot;青岛&quot;</span></span></span><br><span class="line"><span class="javascript">                     &#125;,</span></span><br><span class="line"><span class="javascript">                     <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,</span></span><br><span class="line"><span class="javascript">                     <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data, statusText</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// alert(data + &quot;, &quot; + statusText);</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">                        </span></span><br><span class="line"><span class="javascript">                     &#125;,</span></span><br><span class="line"><span class="javascript">                     <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                         alert(msg);</span></span><br><span class="line"><span class="javascript">                     &#125;</span></span><br><span class="line"><span class="javascript">                 &#125;)</span></span><br><span class="line"><span class="javascript">             &#125;)</span></span><br><span class="line"><span class="javascript">         &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span> = <span class="string">&#x27;btn1&#x27;</span>&gt;</span>下载数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> jQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> jQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQ-1</title>
      <link href="/2020/04/28/jQ-1/"/>
      <url>/2020/04/28/jQ-1/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery对象和DOM对象"><a href="#jQuery对象和DOM对象" class="headerlink" title="jQuery对象和DOM对象"></a>jQuery对象和DOM对象</h1><ul><li>jQuery对象是通过jQuery($())包装DOM对象后产生的对象。</li><li>jQuery对象是jQuery独有的。</li><li>jQuery对象无法使用DOM对象的任何方法，同样DOM对象无法使用jQuery里的任何方法</li><li>约定：如果获取的是jQuery对象，那么要在变量前加上$.<ul><li>var $variable = jQuery对象</li><li>var variable = DOM 对象</li></ul></li></ul><ol><li><p>由jQuery转换为DOM对象</p><ol><li><p>获取一个jQuery对象</p><p>var $btn = $(“button”);</p></li><li><p>jQuery 对象是一个数组对象。</p><p>alert($btn.length);</p></li><li><p>可以通过数组的下标转为转为DOM对象</p><p>alert(“$btn[0].firstChild.nodeValue”);</p></li></ol></li><li><p>由DOM对象转为jQuery对象</p><ol><li><p>选取一个DOM对象</p><p>var btn = document。getElementById(“btn”);</p></li><li><p>使用$()进行包装</p><p>alert($(btn).text());</p></li></ol></li></ol><h1 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h1><ol><li><p>使用id选择器选择id=btn1的元素：$(“#btn1”)</p></li><li><p>为选择的jQuery对象添加onclick响应函数：</p><p>$(“#btn1”).click(function(){}），响应函数写在function(){}的中括号中。</p></li><li><p>id==$(“#btn1”)，class==$(“.btn1”),div==$(“div”),所有==$(“*”)</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">&quot;我是一个按钮&quot;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h1 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h1><ol><li><p>body 内所有div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;body div&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>body 内所有子div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;body &gt; div&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>id为one的下一个div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#one + div&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>id为tow后的所有的div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;two ~ div&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>id为two的所有div兄弟div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#two&quot;</span>).siblings(div).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure><p>//一下选择器选择的是紧邻id为#one 的span元素，若该span和one不相邻，选择器无效。id为one的下一个span</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;one + span&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>id为one的下一个span</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#one&quot;</span>).nextAll(<span class="string">&quot;span:first&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>id为two前面的所有div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#two&quot;</span>).prevAll(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h1 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h1><h2 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h2><table><thead><tr><th align="center">选择器</th><th align="center">描述</th><th align="center">返回</th></tr></thead><tbody><tr><td align="center">:first</td><td align="center">选取第一个元素</td><td align="center">单个新元素组成的集合</td></tr><tr><td align="center">:last</td><td align="center">选取最后一个元素</td><td align="center">集合元素</td></tr><tr><td align="center">:not(selector)</td><td align="center">去除所有与给定选择器匹配的元素</td><td align="center">集合元素</td></tr><tr><td align="center">:even</td><td align="center">选取索引是偶数的所有元素，索引从0开始</td><td align="center">集合元素</td></tr><tr><td align="center">:odd</td><td align="center">选取索引是奇数的所有元素，索引从0开始</td><td align="center">集合元素</td></tr><tr><td align="center">:eq(index)</td><td align="center">选取索引等于index的元素，索引从0开始</td><td align="center">集合元素</td></tr><tr><td align="center">:gt(index)</td><td align="center">选取索引大于index的元素，索引从0开始</td><td align="center">集合元素</td></tr><tr><td align="center">:lt(index)</td><td align="center">选取索引小于index的元素，索引从0开始</td><td align="center">集合元素</td></tr><tr><td align="center">:header</td><td align="center">选取所有的标题元素，如：h1，h2等</td><td align="center">集合元素</td></tr><tr><td align="center">:animated</td><td align="center">选取当前正在执行动画的所有元素</td><td align="center">集合元素</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div:xxx(&#x27;xxx&#x27;)&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h2><ul><li><p>内容过滤选择器的过滤规则主要体现在她所包含的子元素和文本内容上</p><table><thead><tr><th align="left">选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td align="left">:contains(text)</td><td>选取含有文本内容为text的元素</td><td>集合元素</td></tr><tr><td align="left">:empty</td><td>选取不包含子元素或者文本的空元素</td><td>集合元素</td></tr><tr><td align="left">:has(selector)</td><td>选取含有选择器所匹配的元素的与元素</td><td>集合元素</td></tr><tr><td align="left">:parent</td><td>选取含有子元素或者文本元素</td><td>集合元素</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div:xxxx(&#x27;xxx&#x27;)&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="可见性过滤选择器"><a href="#可见性过滤选择器" class="headerlink" title="可见性过滤选择器"></a>可见性过滤选择器</h2><ul><li>可见性过滤选择器是根据元素的可见和不可见转台来选择相应的元素</li></ul><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:hidden</td><td>选取所有不可见的元素</td><td>集合元素</td></tr><tr><td>:visible</td><td>选取所有可见的元素</td><td>集合元素</td></tr></tbody></table><ul><li>可见选择器:hidden 不仅包含样式为dispaly为none的元素，也包含文本隐藏域（<input type="hidden">）和visible:hidden值类的元素</li></ul><blockquote><p>show(time):可以是不可兼得元素变为可见，time 表示时间，单位为毫秒</p><p>jQuery的很多方法支持方法的连缀，即一个方法的返回值来使调用改方法的jQuery对象：可以继续调用改方法的其他方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div:hidden&quot;</span>).show(<span class="number">2000</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;input:hidden&quot;</span>).attr(<span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">//或者 val() 方法可以返回摸一个表单元素的value属性值</span></span><br><span class="line">$(<span class="string">&quot;input:hidden&quot;</span>.val());</span><br></pre></td></tr></table></figure><h2 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>[attribute]</td><td>选取拥有此属性的元素</td><td>集合元素</td></tr><tr><td>[attribute=value]</td><td>选取指定属性的值为value的元素</td><td>集合元素</td></tr><tr><td>[attribute!=value]</td><td>选取指定属性的值不等于value的元素</td><td>集合元素</td></tr><tr><td>[attribute^=value]</td><td>选取指定属性的值以value开始的元素</td><td>集合元素</td></tr><tr><td>[attribute$=value]</td><td>选取指定属性的值以value结束的元素</td><td>集合元素</td></tr><tr><td>[attribute*=value]</td><td>选取指定属性的值含有value的元素</td><td>集合元素</td></tr><tr><td>[selector1] [selector2]…[selectorN]</td><td>用属性选择器合并程一个符合属性选择器，满足多个条件。没选择一次，缩小一次范围</td><td>集合元素</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择含有title属性的div</span></span><br><span class="line">$(<span class="string">&quot;div[title]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br><span class="line"><span class="comment">//选择title属性为test的div</span></span><br><span class="line">$(<span class="string">&quot;div[title=&#x27;test&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br><span class="line"><span class="comment">//选取的元素中包含没有title的div 元素</span></span><br><span class="line">$(<span class="string">&quot;div[title!=&#x27;test&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br><span class="line"><span class="comment">//选取的元素中title值以te开始的div 元素</span></span><br><span class="line">$(<span class="string">&quot;div[title^=&#x27;te&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br><span class="line"><span class="comment">//选取的元素中title值以est结尾的div 元素</span></span><br><span class="line">$(<span class="string">&quot;div[title$=&#x27;est&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br><span class="line"><span class="comment">//选取的元素中title值有es的div 元素</span></span><br><span class="line">$(<span class="string">&quot;div[title*=&#x27;es&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br><span class="line"><span class="comment">//先选取的元素中有id的div元素，然后在结果中选取属性title值有es的div 元素</span></span><br><span class="line">$(<span class="string">&quot;div[id][title*=&#x27;es&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br><span class="line"><span class="comment">//先选取的元素中有title的div元素，然后在结果中选取属性title值没有test的div 元素</span></span><br><span class="line">$(<span class="string">&quot;div[id][title!=&#x27;test&#x27;]&quot;</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;#000000&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:nth-child(index/even/odd/equation)</td><td>选取每个父元素下的第index个子元素或者奇偶元素（index从1算起）</td><td>集合元素</td></tr><tr><td>:first-child</td><td>选取每个父元素的第一个子元素</td><td>集合元素</td></tr><tr><td>:last-child</td><td>选取每个父元素的最后一个子元素</td><td>集合元素</td></tr><tr><td>:only-child</td><td>如果某个元素是它父元素中卫衣的子元素，那么将被匹配。</td><td>集合元素</td></tr></tbody></table><p>nth-child()选择器详解如下：</p><ul><li>:nth-child(even/odd):能选取每个父元素下的索引值为偶（奇）数的元素</li><li>:nth-child(2):能选取每个父元素下的索引值为2的元素</li><li>:nth-child(3n):能选取每个父元素下的索引值是3的倍数的元素</li><li>:nth-child(3n+1):能选取每个父元素下的索引值是3n+1的元素</li></ul><h2 id="表单对象属性过滤选择器"><a href="#表单对象属性过滤选择器" class="headerlink" title="表单对象属性过滤选择器"></a>表单对象属性过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:enabled</td><td>选取所有可用元素</td><td>集合元素</td></tr><tr><td>:disabled</td><td>选取所有不可用元素</td><td>集合元素</td></tr><tr><td>:checked</td><td>选取所有被选中的元素（单选框，复选框）</td><td>集合元素</td></tr><tr><td>:selected</td><td>选取所有被选中选项元素（下拉菜单）</td><td>集合元素</td></tr></tbody></table><h2 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>:input</td><td>选取所有的input,textarea,select,和button元素</td><td>集合元素</td></tr><tr><td>:text</td><td>选取所有的单行文本框</td><td>集合元素</td></tr><tr><td>:password</td><td>选取所有的密码框</td><td>集合元素</td></tr><tr><td>:radio</td><td>选取所有的单选框</td><td>集合元素</td></tr><tr><td>:checkbox</td><td>选取所有的多选框</td><td>集合元素</td></tr><tr><td>:submit</td><td>选取所有的提交按钮</td><td>集合元素</td></tr><tr><td>:image</td><td>选取所有的图像按钮</td><td>集合元素</td></tr><tr><td>:reset</td><td>选取所有的重置按钮</td><td>集合元素</td></tr><tr><td>:button</td><td>选取所有的按钮</td><td>集合元素</td></tr><tr><td>:file</td><td>选取所有的上传域</td><td>集合元素</td></tr><tr><td>:hidden</td><td>选取所有的不可见元素</td><td>集合元素</td></tr></tbody></table><h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><ol><li>操作文本节点<ul><li>读写，通过jQuery对象的text()方法</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert($(<span class="string">&quot;#id&quot;</span>).text());</span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>).text(<span class="string">&quot;修改内容&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>操作属性节点<ul><li>通过jQuery对象的attr()方法。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注：直接操作value属性值可以使用更便捷的val()方法。</span></span><br><span class="line">alert($(<span class="string">&quot;:text[name=&#x27;username&#x27;]&quot;</span>).attr(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">$(<span class="string">&quot;:text[name=&#x27;username&#x27;]&quot;</span>).attr(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;修改值&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>创建节点</p><ul><li><p>使用$(html)方法即可，元素节点，文本节点，属性节点都可以<code>$(&quot;&lt;li id=&#39;id&#39;&gt;xxx&lt;/li&gt;&quot;)</code></p></li><li><p>添加节点</p><ul><li><p>.appendTo和append：主语和宾语的位置不同</p><p><code>$(&quot;&lt;li id=&quot;id&quot;&gt;xxx&lt;/li&gt;&quot;).appendTo($(&quot;#id&quot;));</code></p><p><code>$(&quot;&lt;li id=&quot;id&quot;&gt;xxx&lt;/li&gt;&quot;).append($(&quot;#id&quot;));</code></p></li><li><p>.prependTo和prepend：主语和宾语的位置不同</p><p><code>$(&quot;&lt;li id=&quot;id&quot;&gt;xxx&lt;/li&gt;&quot;).prependTo($(&quot;#id&quot;));</code></p><p> <code>$(&quot;&lt;li id=&quot;id&quot;&gt;xxx&lt;/li&gt;&quot;).prepend($(&quot;#id&quot;));</code></p></li></ul></li><li><p>jQuery创建节点并插入节点到指定节点中</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//1.创建一个&lt;li id=&quot;id&quot;&gt;xxx&lt;/li&gt;</span></span><br><span class="line">    <span class="comment">//2.并把其加入到#id-1的子节点</span></span><br><span class="line">    $(<span class="string">&quot;&lt;li id=&quot;</span>id<span class="string">&quot;&gt;xxx&lt;/li&gt;&quot;</span>).appendTo($(<span class="string">&quot;#id&quot;</span>));</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>插入节点</li></ol><ul><li>插入节点为某个节点的子节点</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>append()</td><td>像每个匹配的元素的内部的结尾处追加内容</td></tr><tr><td>appendTo()</td><td>将每个匹配的元素追加到指定的元素中的内部的结尾处</td></tr><tr><td>prepend()</td><td>像每个匹配的元素的内部的开始处追加内容</td></tr><tr><td>prependTo()</td><td>将每个匹配的元素追加到指定的元素中的内部的开始处</td></tr></tbody></table><ul><li>插入节点到指定节点的前后</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>after()</td><td>向每个匹配的元素的之后插入内容</td></tr><tr><td>insertAfter()</td><td>向每个匹配的元素插入到指定的元素之后</td></tr><tr><td>before()</td><td>向每个匹配的元素的之前插入内容</td></tr><tr><td>insertBefore()</td><td>向每个匹配的元素插入到指定的元素之前</td></tr></tbody></table><ol start="5"><li><p>删除节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>).remove();</span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>).empty();</span><br></pre></td></tr></table></figure></li><li><p>克隆和替换节点</p><ul><li>克隆<code>$(&quot;#id&quot;).clone();</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#id&quot;</span>).clone(<span class="literal">true</span>)<span class="comment">//true为克隆节点加上之前的事件</span></span><br><span class="line">.attr(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;id-1&quot;</span>)<span class="comment">//改变克隆节点的id</span></span><br><span class="line">.insertAfter($(<span class="string">&quot;目标#id&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>替换<code>replaceAll</code>,<code>replaceWith</code>一对方法。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个&lt;li&gt;xxx&lt;/li&gt;节点，替换#id的最后一个li子节点</span></span><br><span class="line">$(<span class="string">&quot;&lt;li&gt;xxx&lt;/li&gt;&quot;</span>).replaceAll($(<span class="string">&quot;#id li:last&quot;</span>));</span><br><span class="line"><span class="comment">//替换#city的第二个li子节点</span></span><br><span class="line">$(<span class="string">&quot;#id li:eq(1)&quot;</span>).replaceWith($(<span class="string">&quot;&lt;li&gt;xxx&lt;/li&gt;&quot;</span>));</span><br><span class="line"><span class="comment">//互换连个节点#id-1和id-2.还有移动的功能</span></span><br><span class="line">$(<span class="string">&quot;#id-1&quot;</span>).replaceWith($(<span class="string">&quot;#id-2&quot;</span>));</span><br><span class="line"><span class="comment">//互换内容</span></span><br><span class="line"><span class="keyword">var</span> $id1 = $(<span class="string">&quot;#id-1&quot;</span>).clone(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> $id2 = $(<span class="string">&quot;#id-2&quot;</span>).replaceWith($id1);</span><br><span class="line">$(<span class="string">&quot;#id-1&quot;</span>).replaceWith($id2);</span><br></pre></td></tr></table></figure></li><li><p>包裹节点<code>wrap,wrapAll,wrapInner</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包装li本身单个包装</span></span><br><span class="line">$(<span class="string">&quot;#id li&quot;</span>).wrap(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;&lt;/font&gt;&quot;</span>);</span><br><span class="line"><span class="comment">//包装所有的li从外面包装</span></span><br><span class="line">$(<span class="string">&quot;#id li&quot;</span>).wrapAll(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;&lt;/font&gt;&quot;</span>);</span><br><span class="line"><span class="comment">//包装li里面的内容</span></span><br><span class="line">$(<span class="string">&quot;#id li&quot;</span>).wrapInner(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;&lt;/font&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="8"><li><p><code>arrt()</code>方法<code>html()</code>方法和<code>val()</code>方法。</p><p>attr():获取属性和设置属性</p><ul><li>当为该方法传递一个参数时，即为某元素的获取指定属性</li><li>当为该方法传递两个参数时，即为莫元素设置指定属性的值</li><li>removeAttr():删除指定元素的指定属性</li></ul><p>html():获取内容替换内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取</span></span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>).html();</span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line">$(<span class="string">&quot;#id&quot;</span>).html(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure><p>val()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为#id-1 添加focus（获取焦点），blur（失去焦点）响应函数</span></span><br><span class="line">$(<span class="string">&quot;#id-1&quot;</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//2.当获取焦点时，若#id重视默认值（defaultValue属性，该属性值是DOM对象属性），就使其值为&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> val = $(<span class="built_in">this</span>).val();</span><br><span class="line">    <span class="keyword">if</span>(val == <span class="built_in">this</span>.defaultValue)&#123;</span><br><span class="line">        $(<span class="built_in">this</span>).val(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//3.失去焦点时，若#id得知再取出前后空格后等于&quot;&quot;则为其回复默认值</span></span><br><span class="line">    <span class="keyword">var</span> val = <span class="built_in">this</span>.value;</span><br><span class="line">    <span class="function"><span class="title">id</span>(<span class="params">$.trim(val) == <span class="string">&quot;&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="built_in">this</span>.defaultValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//“下拉框3”被选中</span></span><br><span class="line">$(<span class="string">&quot;#id-2&quot;</span>).val(<span class="string">&quot;下拉框3&quot;</span>);</span><br><span class="line"><span class="comment">//下拉框2和4被选中</span></span><br><span class="line">$(<span class="string">&quot;#id-3&quot;</span>).val([<span class="string">&quot;value2,value4&quot;</span>]);</span><br><span class="line"><span class="comment">//多选2和4被选中</span></span><br><span class="line">$(<span class="string">&quot;:checkbox[namer=&#x27;c&#x27;]&quot;</span>).val([<span class="string">&quot;value2,value4&quot;</span>]);</span><br><span class="line"><span class="comment">//单选2</span></span><br><span class="line">$(<span class="string">&quot;:radio[name=&#x27;r&#x27;]&quot;</span>).val([<span class="string">&quot;value2&quot;</span>]);</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">alert($(<span class="string">&quot;id-2&quot;</span>).val());</span><br><span class="line">alert($(<span class="string">&quot;id-3&quot;</span>).val());</span><br><span class="line">alert($(<span class="string">&quot;:checkbox[namer=&#x27;c&#x27;]:checked&quot;</span>).val());</span><br><span class="line">alert($(<span class="string">&quot;:radio[name=&#x27;r&#x27;]:checked&quot;</span>).val());</span><br></pre></td></tr></table></figure></li></ol><h1 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h1><ol><li><p>判断是否有指定class<code>hasClass()</code></p></li><li><p>移出样式class<code>removeClass()</code></p></li><li><p>添加样式class<code>addClass()</code></p></li><li><p>切换样式class<code>toggleClass()</code></p></li><li><p>获取设置元素的样式属性：css()</p></li><li><p>获取设置元素透明度：opacity属性</p></li><li><p>获取设置元素高度，宽度：height(),width()</p></li><li><p>获取元素在当前视窗的相对位移：offset().其返回对象包含两个属性：top，lef.改方法只对可见元素有效。</p></li><li><p>为.head添加onclick响应事件：若.content隐藏则显示，若.content显示则隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.head&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//使用is方法，来判断某个给定的jQuery对象是否符合指定选择器</span></span><br><span class="line">        <span class="keyword">var</span> flag = $(<span class="string">&quot;.content&quot;</span>).is(<span class="string">&quot;:hidden&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            $(<span class="string">&quot;.content&quot;</span>).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&quot;.content&quot;</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>绑定事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.head&quot;</span>).bind(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//使用is方法，来判断某个给定的jQuery对象是否符合指定选择器</span></span><br><span class="line">        <span class="keyword">var</span> flag = $(<span class="string">&quot;.content&quot;</span>).is(<span class="string">&quot;:hidden&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            $(<span class="string">&quot;.content&quot;</span>).show();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&quot;.content&quot;</span>).hide();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>合成事件：</p><blockquote><p>非绑定mouseover</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(.head).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.content&quot;</span>).show;</span><br><span class="line">&#125;).mouseout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.content&quot;</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></blockquote><ul><li>hover鼠标移入第一个函数，鼠标移出第二个函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.head&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.content&quot;</span>).show();</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">&quot;.content&quot;</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>toggle第一次点击执行第一个函数，第二次点击执行第二个函数…循环执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.head&quot;</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.content&quot;</span>).show();</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">&quot;.content&quot;</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>事件冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;body click&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;#id&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;div click&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;span&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;span click&quot;</span>);</span><br><span class="line">        <span class="comment">//如何解决事件的冒泡：通过在响应函数的结尾返回false，可以阻止冒泡。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>事件对象</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.事件：当鼠标移动式，就会触发mousemove事件。</span></span><br><span class="line"><span class="comment">2.如何得到事件对象：在响应函数中添加一个参数就可以</span></span><br><span class="line"><span class="comment">3.事件对象两个属性：pageX，pageY</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//事件对象pageX，pageY属性</span></span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#id&quot;</span>).text(<span class="string">&quot;x:&quot;</span>+event.pageX+<span class="string">&quot;,Y:&quot;</span>+eventY);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="14"><li>移出事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用unbind移除事件</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;li&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.firstChild.nodevalue);</span><br><span class="line">        $(<span class="string">&quot;#id&quot;</span>).unbind(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//one();只为摸个元素添加一次事件，事件函数响应后，将不再响应</span></span><br><span class="line">    $(<span class="string">&quot;#id&quot;</span>).one(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        aleat(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示动画效果：show()和hide()方法传入毫秒数以达到动画的效果</span></span><br><span class="line">$(<span class="string">&quot;.head&quot;</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.content&quot;</span>).show(<span class="number">1000</span>);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">&quot;.content&quot;</span>).hide(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//只改变高度</span></span><br><span class="line">$(<span class="string">&quot;.head&quot;</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.content&quot;</span>).slideDown(<span class="number">500</span>);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">&quot;.content&quot;</span>).slideUp(<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//只改变透明度</span></span><br><span class="line">$(<span class="string">&quot;.head&quot;</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.content&quot;</span>).fadeIn(<span class="number">1000</span>);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">&quot;.content&quot;</span>).fadeOut(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//toggle切换可见状态</span></span><br><span class="line">$(<span class="string">&quot;.head&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.content&quot;</span>).toggle();</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//slidetoggle:通过高度变化来切换匹配元素可见性</span></span><br><span class="line">$(<span class="string">&quot;.head&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.content&quot;</span>).slidetoggle();</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//fadeToggle:通过透明度变化来切换匹配元素可见性</span></span><br><span class="line">$(<span class="string">&quot;.head&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.content&quot;</span>).fadeToggle();</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//fadeTo():是透明度至渐变</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> jQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> jQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-2</title>
      <link href="/2020/04/26/2020-04-26-js-1/"/>
      <url>/2020/04/26/2020-04-26-js-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><ul><li><p>理解:</p><ul><li>当嵌套的内部函数引用了外部函数的变量时就产生了闭包</li><li>通过chrome工具得知: 闭包本质是内部函数中的一个对象, 这个对象中包含引用的变量属性</li></ul></li><li><p>作用:</p><ul><li>延长局部变量的生命周期</li><li>让函数外部能操作内部的局部变量</li></ul></li><li><p>写一个闭包程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function fn1() &#123;</span><br><span class="line">  var a = 2;</span><br><span class="line">  function fn2() &#123;</span><br><span class="line">    a++;</span><br><span class="line">    console.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  return fn2;</span><br><span class="line">&#125;</span><br><span class="line">var f = fn1();</span><br><span class="line">f();</span><br><span class="line">f();</span><br></pre></td></tr></table></figure></li><li><p>闭包应用:</p><ul><li>模块化: 封装一些数据以及操作数据的函数, 向外暴露一些行为</li><li>循环遍历加监听</li><li>JS框架(jQuery)大量使用了闭包</li></ul></li><li><p>缺点:</p><ul><li>变量占用内存的时间可能会过长</li><li>可能导致内存泄露</li><li>解决:<ul><li>及时释放 : f = null; //让内部函数对象成为垃圾对象</li></ul></li></ul></li></ul><h2 id="内存溢出与内存泄露"><a href="#内存溢出与内存泄露" class="headerlink" title="内存溢出与内存泄露"></a>内存溢出与内存泄露</h2><ol><li><p>内存溢出</p><ul><li>一种程序运行出现的错误</li><li>当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误</li></ul></li><li><p>内存泄露</p><ul><li>占用的内存没有及时释放</li><li>内存泄露积累多了就容易导致内存溢出</li><li>常见的内存泄露:<ul><li>意外的全局变量</li><li>没有及时清理的计时器或回调函数</li><li>闭包</li></ul></li></ul></li></ol><h2 id="对象的创建模式"><a href="#对象的创建模式" class="headerlink" title="对象的创建模式"></a>对象的创建模式</h2><ul><li><p>Object构造函数模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">obj.name = &#x27;Tom&#x27;</span><br><span class="line">obj.setName = function(name)&#123;this.name=name&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象字面量模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  name : &#x27;Tom&#x27;,</span><br><span class="line">  setName : function(name)&#123;this.name = name&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">  this.setName = function(name)&#123;this.name=name;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">new Person(&#x27;tom&#x27;, 12);</span><br></pre></td></tr></table></figure></li><li><p>构造函数+原型的组合模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.setName = function(name)&#123;this.name=name;&#125;;</span><br><span class="line">new Person(&#x27;tom&#x27;, 12);</span><br></pre></td></tr></table></figure></li></ul><h2 id="继承模式"><a href="#继承模式" class="headerlink" title="继承模式"></a>继承模式</h2><ul><li><p>原型链继承 : 得到方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Parent()&#123;&#125;</span><br><span class="line">Parent.prototype.test = function()&#123;&#125;;</span><br><span class="line">function Child()&#123;&#125;</span><br><span class="line">Child.prototype = new Parent(); // 子类型的原型指向父类型实例</span><br><span class="line">Child.prototype.constructor = Child</span><br><span class="line">var child = new Child(); //有test()</span><br></pre></td></tr></table></figure></li><li><p>借用构造函数 : 得到属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Parent(xxx)&#123;this.xxx = xxx&#125;</span><br><span class="line">Parent.prototype.test = function()&#123;&#125;;</span><br><span class="line">function Child(xxx,yyy)&#123;</span><br><span class="line">    Parent.call(this, xxx);//借用构造函数   this.Parent(xxx)</span><br><span class="line">&#125;</span><br><span class="line">var child = new Child(&#x27;a&#x27;, &#x27;b&#x27;);  //child.xxx为&#x27;a&#x27;, 但child没有test()</span><br></pre></td></tr></table></figure></li><li><p>组合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Parent(xxx)&#123;this.xxx = xxx&#125;</span><br><span class="line">Parent.prototype.test = function()&#123;&#125;;</span><br><span class="line">function Child(xxx,yyy)&#123;</span><br><span class="line">    Parent.call(this, xxx);//借用构造函数   this.Parent(xxx)</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = new Parent(); //得到test()</span><br><span class="line">var child = new Child(); //child.xxx为&#x27;a&#x27;, 也有test()</span><br></pre></td></tr></table></figure></li><li><p>new一个对象背后做了些什么?</p><ul><li>创建一个空对象</li><li>给对象设置<strong>proto</strong>, 值为构造函数对象的prototype属性值   this.<strong>proto</strong> = Fn.prototype</li><li>执行构造函数体(给对象添加属性/方法)</li></ul></li></ul><h2 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h2><ul><li>进程:<ul><li>程序的一次执行, 它占有一片独有的内存空间</li><li>可以通过windows任务管理器查看进程</li></ul></li><li>线程:<ul><li>是进程内的一个独立执行单元</li><li>是程序执行的一个完整流程</li><li>是CPU的最小的调度单元</li></ul></li><li>关系<ul><li>一个进程至少有一个线程(主)</li><li>程序是在某个进程中的某个线程执行的</li></ul></li></ul><h2 id="浏览器内核模块组成"><a href="#浏览器内核模块组成" class="headerlink" title="浏览器内核模块组成"></a>浏览器内核模块组成</h2><ul><li>主线程<ul><li>js引擎模块 : 负责js程序的编译与运行</li><li>html,css文档解析模块 : 负责页面文本的解析</li><li>DOM/CSS模块 : 负责dom/css在内存中的相关处理 </li><li>布局和渲染模块 : 负责页面的布局和效果的绘制(内存中的对象)</li></ul></li><li>分线程<ul><li>定时器模块 : 负责定时器的管理</li><li>DOM事件模块 : 负责事件的管理</li><li>网络请求模块 : 负责Ajax请求</li></ul></li></ul><h2 id="js线程"><a href="#js线程" class="headerlink" title="js线程"></a>js线程</h2><ul><li>js是单线程执行的(回调函数也是在主线程)</li><li>H5提出了实现多线程的方案: Web Workers</li><li>只能是主线程更新界面</li></ul><h2 id="定时器问题"><a href="#定时器问题" class="headerlink" title="定时器问题:"></a>定时器问题:</h2><ul><li>定时器并不真正完全定时</li><li>如果在主线程执行了一个长时间的操作, 可能导致延时才处理</li></ul><h2 id="事件处理机制-图"><a href="#事件处理机制-图" class="headerlink" title="事件处理机制(图)"></a>事件处理机制(图)</h2><ul><li>代码分类<ul><li>初始化执行代码: 包含绑定dom事件监听, 设置定时器, 发送ajax请求的代码</li><li>回调执行代码: 处理回调逻辑</li></ul></li><li>js引擎执行代码的基本流程: <ul><li>初始化代码===&gt;回调代码</li></ul></li><li>模型的2个重要组成部分:<ul><li>事件管理模块</li><li>回调队列</li></ul></li><li>模型的运转流程<ul><li>执行初始化代码, 将事件回调函数交给对应模块管理</li><li>当事件发生时, 管理模块会将回调函数及其数据添加到回调列队中</li><li>只有当初始化代码执行完后(可能要一定时间), 才会遍历读取回调队列中的回调函数执行</li></ul></li></ul><h2 id="H5-Web-Workers"><a href="#H5-Web-Workers" class="headerlink" title="H5 Web Workers"></a>H5 Web Workers</h2><ul><li><p>可以让js在分线程执行</p></li><li><p>Worker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var worker = new Worker(&#x27;worker.js&#x27;);</span><br><span class="line">worker.onMessage = function(event)&#123;event.data&#125; : 用来接收另一个线程发送过来的数据的回调</span><br><span class="line">worker.postMessage(data1) : 向另一个线程发送数据</span><br></pre></td></tr></table></figure></li><li><p>问题:</p><ul><li>worker内代码不能操作DOM更新UI</li><li>不是每个浏览器都支持这个新特性</li><li>不能跨域加载JS</li></ul></li><li><p>svn版本控制</p></li><li><p>svn server</p><img src="https://cdn.jsdelivr.net/gh/wangzy813/CDN@1.2/img/3.png" alt="js高级思维导图"  /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-1</title>
      <link href="/2020/04/26/2020-04-26-js/"/>
      <url>/2020/04/26/2020-04-26-js/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型的分类和判断"><a href="#数据类型的分类和判断" class="headerlink" title="数据类型的分类和判断"></a>数据类型的分类和判断</h2><ul><li>基本(值)类型<ul><li>Number —– 任意数值 ——– typeof</li><li>String —– 任意字符串 —— typeof</li><li>Boolean —- true/false —– typeof</li><li>undefined — undefined —– typeof/===</li><li>null ——– null ———- ===</li></ul></li><li>对象(引用)类型<ul><li>Object —– typeof/instanceof</li><li>Array —— instanceof</li><li>Function —- typeof</li></ul></li></ul><h2 id="数据-变量-内存的理解"><a href="#数据-变量-内存的理解" class="headerlink" title="数据,变量, 内存的理解"></a>数据,变量, 内存的理解</h2><ul><li>什么是数据?<ul><li>在内存中可读的, 可传递的保存了特定信息的’东东’</li><li>一切皆数据, 函数也是数据</li><li>在内存中的所有操作的目标: 数据</li></ul></li><li>什么是变量?<ul><li>在程序运行过程中它的值是允许改变的量</li><li>一个变量对应一块小内存, 它的值保存在此内存中  </li></ul></li><li>什么是内存?<ul><li>内存条通电后产生的存储空间(临时的)</li><li>一块内存包含2个方面的数据<ul><li>内部存储的数据</li><li>地址值数据</li></ul></li><li>内存空间的分类<ul><li>栈空间: 全局变量和局部变量</li><li>堆空间: 对象 </li></ul></li></ul></li><li>内存,数据, 变量三者之间的关系<ul><li>内存是容器, 用来存储不同数据</li><li>变量是内存的标识, 通过变量我们可以操作(读/写)内存中的数据  </li></ul></li></ul><h2 id="对象的理解和使用"><a href="#对象的理解和使用" class="headerlink" title="对象的理解和使用"></a>对象的理解和使用</h2><ul><li><p>什么是对象?</p><ul><li>多个数据(属性)的集合</li><li>用来保存多个数据(属性)的容器</li></ul></li><li><p>属性组成:</p><ul><li>属性名 : 字符串(标识)</li><li>属性值 : 任意类型</li></ul></li><li><p>属性的分类:</p><ul><li>一般 : 属性值不是function  描述对象的状态</li><li>方法 : 属性值为function的属性  描述对象的行为</li></ul></li><li><p>特别的对象</p><ul><li>数组: 属性名是0,1,2,3之类的索引</li><li>函数: 可以执行的</li></ul></li><li><p>如何操作内部属性(方法)</p><ul><li><p>.属性名</p></li><li><p>[‘属性名’]: 属性名有特殊字符/属性名是一个变量</p></li></ul></li></ul><h2 id="函数的理解和使用"><a href="#函数的理解和使用" class="headerlink" title="函数的理解和使用"></a>函数的理解和使用</h2><ul><li><p>什么是函数?</p><ul><li>用来实现特定功能的, n条语句的封装体</li><li>只有函数类型的数据是可以执行的, 其它的都不可以</li></ul></li><li><p>为什么要用函数?</p><ul><li>提高复用性</li><li>便于阅读交流</li></ul></li><li><p>函数也是对象</p><ul><li>instanceof Object===true</li><li>函数有属性: prototype</li><li>函数有方法: call()/apply()</li><li>可以添加新的属性/方法</li></ul></li><li><p>函数的3种不同角色</p><ul><li>一般函数 : 直接调用</li><li>构造函数 : 通过new调用</li><li>对象 : 通过.调用内部的属性/方法</li></ul></li><li><p>函数中的this</p><ul><li>显式指定谁: obj.xxx()</li><li>通过call/apply指定谁调用: xxx.call(obj)</li><li>不指定谁调用: xxx()  : window</li><li>回调函数: 看背后是通过谁来调用的: window/其它</li></ul></li><li><p>匿名函数自调用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function(w, obj)&#123;</span><br><span class="line">  //实现代码</span><br><span class="line">&#125;)(window, obj)</span><br></pre></td></tr></table></figure><ul><li>专业术语为: IIFE (Immediately Invoked Function Expression) 立即调用函数表达式                          </li></ul></li><li><p>回调函数的理解</p><ul><li>什么函数才是回调函数?<ul><li>你定义的</li><li>你没有调用</li><li>但它最终执行了(在一定条件下或某个时刻)</li></ul></li><li>常用的回调函数<ul><li>dom事件回调函数</li><li>定时器回调函数</li><li>ajax请求回调函数(后面讲解)</li><li>生命周期回调函数(后面讲解)</li></ul></li></ul></li></ul><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><ul><li>所有函数都有一个特别的属性:<ul><li><code>prototype</code> : 显式原型属性</li></ul></li><li>所有实例对象都有一个特别的属性:<ul><li><code>__proto__</code> : 隐式原型属性</li></ul></li><li>显式原型与隐式原型的关系<ul><li>函数的prototype: 定义函数时被自动赋值, 值默认为{}, 即用为原型对象</li><li>实例对象的<strong>proto</strong>: 在创建实例对象时被自动添加, 并赋值为构造函数的prototype值</li><li>原型对象即为当前实例对象的父对象</li></ul></li><li>原型链<ul><li>所有的实例对象都有<strong>proto</strong>属性, 它指向的就是原型对象</li><li>这样通过<strong>proto</strong>属性就形成了一个链的结构—-&gt;原型链</li><li>当查找对象内部的属性/方法时, js引擎自动沿着这个原型链查找</li><li>当给对象属性赋值时不会使用原型链, 而只是在当前对象中进行操作</li></ul></li></ul><h2 id="执行上下文与执行上下文栈"><a href="#执行上下文与执行上下文栈" class="headerlink" title="执行上下文与执行上下文栈"></a>执行上下文与执行上下文栈</h2><ul><li>变量提升与函数提升<ul><li>变量提升: 在变量定义语句之前, 就可以访问到这个变量(undefined)</li><li>函数提升: 在函数定义语句之前, 就执行该函数</li><li>先有变量提升, 再有函数提升</li></ul></li><li>理解<ul><li>执行上下文: 由js引擎自动创建的对象, 包含对应作用域中的所有变量属性</li><li>执行上下文栈: 用来管理产生的多个执行上下文</li></ul></li><li>分类:<ul><li>全局: window</li><li>函数: 对程序员来说是透明的</li></ul></li><li>生命周期<ul><li>全局 : 准备执行全局代码前产生, 当页面刷新/关闭页面时死亡</li><li>函数 : 调用函数时产生, 函数执行完时死亡</li></ul></li><li>包含哪些属性:<ul><li>全局 : <ul><li>用var定义的全局变量  ==&gt;undefined</li><li>使用function声明的函数   ===&gt;function</li><li>this   ===&gt;window</li></ul></li><li>函数<ul><li>用var定义的局部变量  ==&gt;undefined</li><li>使用function声明的函数   ===&gt;function</li><li>this   ===&gt; 调用函数的对象, 如果没有指定就是window </li><li>形参变量   ===&gt;对应实参值</li><li>arguments ===&gt;实参列表的伪数组</li></ul></li></ul></li><li>执行上下文创建和初始化的过程<ul><li>全局:<ul><li>在全局代码执行前最先创建一个全局执行上下文(window)</li><li>收集一些全局变量, 并初始化</li><li>将这些变量设置为window的属性</li></ul></li><li>函数:<ul><li>在调用函数时, 在执行函数体之前先创建一个函数执行上下文</li><li>收集一些局部变量, 并初始化</li><li>将这些变量设置为执行上下文的属性</li></ul></li></ul></li></ul><h2 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h2><ul><li>理解:<ul><li>作用域: 一块代码区域, 在编码时就确定了, 不会再变化</li><li>作用域链: 多个嵌套的作用域形成的由内向外的结构, 用于查找变量</li></ul></li><li>分类:<ul><li>全局</li><li>函数</li><li>js没有块作用域(在ES6之前)</li></ul></li><li>作用<ul><li>作用域: 隔离变量, 可以在不同作用域定义同名的变量不冲突</li><li>作用域链: 查找变量</li></ul></li><li>区别作用域与执行上下文<ul><li>作用域: 静态的, 编码时就确定了(不是在运行时), 一旦确定就不会变化了</li><li>执行上下文: 动态的, 执行代码时动态创建, 当执行结束消失</li><li>联系: 执行上下文环境是在对应的作用域中的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开篇</title>
      <link href="/2020/04/15/2020-04-15-%E5%BC%80%E7%AF%87/"/>
      <url>/2020/04/15/2020-04-15-%E5%BC%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="很多时候，我们穷尽一生，想要达到的高度，不过是别人的起点"><a href="#很多时候，我们穷尽一生，想要达到的高度，不过是别人的起点" class="headerlink" title="很多时候，我们穷尽一生，想要达到的高度，不过是别人的起点"></a>很多时候，我们穷尽一生，想要达到的高度，不过是别人的起点</h1><p>作者|李三清</p><div class="note no-icon flat"><p>本文来源 - 李三清的紫竹林 | 原文标题 - 爸爸，为什么我们这么辛苦却还是很穷？</p></div><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe@latest/2020/07/17/3cc419bc996f40fca2f7e712cdfc9ab7.png" alt=""></p><p>电视剧《黑冰》里，王志文饰演的郭小鹏说：</p><p>“这是一个多么可怕的世界，他们残酷地把人分成三六九等。</p><p>最高层的人，可以最大程度的享受物质和精神的供应。</p><p>随着层次逐渐递减，最底层的人所拥有的物质能量，通常只能勉强维持他们的生存，精神供应几乎为零。”</p><p><strong>有人呼风唤雨，享尽荣华富贵；有人贫病交迫，尝遍人间冷暖。</strong></p><p>这就是贫富差距。</p><p><strong>13年前，我刚上大一。</strong></p><p>一个周末，我和几个女同学约好去东湖磨山游玩，我正研究怎么倒公交车时，一个家在本地的同学说，不用查了，等下我爸爸的司机会来接我们。</p><p>不一会儿，一辆黑色广本轿车停在我们宿舍楼下，同学轻车熟路地招呼我们上车，她的表情恬淡而自然，毫无炫耀的意思。</p><p>这是我19岁生命里第一次坐小轿车。</p><p><strong>那一瞬，我第一次体会到什么是贫富差距。</strong></p><p>我老家是红安。</p><p>在外我们喜欢说是黄冈人，因为黄冈名气响亮些。</p><p>2005年时，我家还没有一个亲戚有私家车。</p><p>从我们村去镇上，我都是步行，20多分钟，从镇上去县城，坐班车，5块钱，从镇上到武汉，坐大巴车，25块钱左右。</p><p>到武汉上大学，平时出行都是公交车，从不敢打出租车，虽然那时候起步价还是3块钱。</p><p>在东湖游玩后，同学带我们逛街买衣服。</p><p>她们对艾格、美特斯邦威、以纯这些品牌如数家珍，我却像刘姥姥进大观园，眼花缭乱，局促不安。</p><p>同学喊我试衣服，我赶紧摆摆手，“你们试吧，我帮大家看着包。”</p><p>后来，我们又去KFC。</p><p>同学们买了薯条、汉堡、鸡块、可乐等。</p><p>我什么都没买，默默地从包里拿出早上买的一个馒头。</p><p>这里的东西太贵了，我一个月只有300块钱生活费，可得省着花。</p><p>那个同学看我啃干馒头，就不动声色地从包里拿出一瓶雪碧，悄悄地递给我。</p><p>那年，她只有18岁，能这么体贴、顾及别人感受，实属不易。</p><p>她家境优越，父亲是高知，母亲从商，良好的家庭背景让她自信爽朗，充满阳光。</p><p>在我眼里，她就像盆栽里一朵娇艳的玫瑰花，明媚动人。</p><p>而我呢，就像生长在野地里的一株狗尾巴草，灰头土脸。</p><p>物质的匮乏、生活的贫穷让我异常节俭、极度自卑。</p><p>当宿舍同学用MP3练习英语听力时，我只能利用没课的时间去机房练习，因为一个MP3要200块钱，买了MP3我就要饿肚子了。</p><p>当同学们计划暑假去新东方培训英语四六级、雅思、小语种时，我默默地整理好行李，倒两次公交车去餐厅打工，虽然一个月工资只有600块，却可以维持我两个月的基本生活。</p><p>当同学们积极投身各种协会开阔眼界，锻炼口才，积累人脉资源时，我在用高考的劲头准备每学期的期末考试，我每学期都必须拼命考专业第一，只有这样才能拿到最高奖学金，才不用为下一年的学费发愁。</p><p>8000块钱，对于有些城里孩子来说，也许只是一次出国旅行、一台笔记本电脑，但对于我来说，它是八九千斤稻谷，码起来是八九十蛇皮袋，堆起来是高高的一堵墙。</p><p><strong>每一颗稻谷，从播种，移栽，除草，施肥，收割到脱粒，都浸润了家人的血汗。</strong></p><p>当同学在股市投入2万块钱试水时，我在毕业前夕，用国家奖学金还了国家助学贷款。</p><p>同样是学经济学出身，哪怕我成绩比他好很多，理论知识比他掌握得更牢固，但是，那一刻，我知道，在未来，他会把我狠狠地抛下，<strong>因为贫穷限制了我的思维和胆量，我没有拿钱去赌的资格。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/wangzy813/wangxe@latest/2020/07/17/5af689679c8b9ee04ea3d67dadf8b8d0.png" alt=""></p><p>最近看到一则新闻，一名在校大学生借高利贷炒数字货币期货，负债十几万，最后被迫辍学，被债主逼债，亡命天涯。</p><p>这个故事让我震惊，也让我反思，一个人在青少年时期，要形成怎样的金钱观，才能不在物欲横流的现实中迷失？</p><p>老话说，<strong>小富靠勤，大富靠命。</strong></p><p>小时候，我问爸爸，为什么我们家这么辛苦种这么多田地，却仍然贫困，而邻居家似乎不种庄稼，靠赌博、搞些副业，却经常有肉吃。</p><p>爸爸回答说，<strong>虾有虾路，蟹有蟹路。</strong></p><p>每个人都有自己谋生的本领，我赚不了那些轻松钱，只知道种地卖苦力，<strong>做一点，得一点，穷人输不起，但是只要勤快肯干，我们不会一直穷下去。</strong></p><p>20多年过去了，“穷人输不起”这个观念在我脑海里根深蒂固，形成了我朴素的价值观：要脚踏实地，不可投机取巧赚快钱，也形成了我保守的金钱观：我可以不赢，但是我不能输。</p><p>于是，几乎一切有风险的投资行为都被我自动过滤屏蔽掉，小到买2块钱的彩票，大到买股票、基金等理财产品。</p><p>我知道，<strong>我的保守决定了我们不会大富大贵，但是也同样规避了风险。</strong></p><p>2014年股票大涨时，老公想拿我们仅有的几万块钱积蓄去炒股，我死活不同意。</p><p>那段时间，他天天念叨着他的同事们今天赚了多少，明天又赚了多少，十分惋惜自己没能进入股市。</p><p>后来，股灾来临，他好几个同事不仅把赚的钱输进去了，还把本钱也蚀了，有一个同事还卖了房炒股，最后血本无归，妻离子散。</p><p>后来，老公说，幸好我坚持不让他炒股，才压制住他赌徒的心理。</p><p>我说，我们靠着工资过活，得钱不容易，不能指望钱生钱，发大财，但我们输不起，一旦输了，我们可能明天就要露宿街头，孩子的奶粉，父母的医药费就都没有着落了，我们不能冒这个险。</p><p>为什么最近裸贷、借高利贷炒币、赌博的事情层出不穷，上演了一场场悲剧故事？</p><p>也许，就是年轻人的金钱观、贫富观出了问题。</p><p>70后、80后普遍比90后、00后吃了更多物质上的苦。</p><p>贫穷塑造了我们坚韧、不服输、能吃苦、不怕脏累的品质，也给了我们自卑、保守、不善交际等弱点。</p><p>昨天还和你一起撸串喝扎啤的哥们，今天因为拆迁一夜暴富；</p><p>前天还和你一起混公众号、混转发群的文友，今天因为一篇10万加的文章刷爆朋友圈，商业合作、签约出版接踵而至；</p><p>不久前还跟你借钱吃饭的闺蜜，转眼就找到了一个高富帅，不仅有大钻戒求婚，还有马尔代夫蜜月旅行……</p><p>有人说，这是最好的时代，也是最坏的时代，似乎每个人都有机会一夜暴富、一举成名。</p><p>巨大的贫富差距让心智尚不成熟、三观尚不牢固的青少年们无所适从，再加上缺位的家庭教育、人性化不足的学校教育，让一些青少年变成了迷途的羔羊。</p><p><strong>穷人和富人，除了金钱、资源、人脉等硬实力的差别，还有观念、视野、情商等软实力的高低。</strong></p><p><img src="https://upimage.alexhchu.com/2020/05/25/96625cf776c4d.png" alt=""></p><p><strong>很多时候，我们穷尽一生，想要达到的高度，不过是别人的起点。</strong></p><p>当你的同学在欧洲十五国玩不亦乐乎时，你却在办公室里苦哈哈地加着没有加班费的班；</p><p>当你的朋友家请了金牌月嫂，料理一家人生活时，你却在上班劳累了一天后，还要当免费保姆做饭洗衣带孩子；</p><p>当你的闺蜜谈项目拉订单满世界飞时，你却在一遍一遍修改着一篇公文报告；</p><p>当你的兄弟在北上广拿下一套学区房时，你还在暗自庆幸终于用公积金在三四线城市按揭了一套属于自己的房子……</p><p>每个人的起点不同，有人费劲千辛万苦，才来到罗马，而有的人就出生在罗马。</p><p><strong>比别人过得好，并不高贵，真正的高贵，是优于过去的自己。</strong></p><p>13年前，我在KFC里啃馒头；</p><p>13年后，我可以淡定从容地带孩子在KFC里吃薯条；</p><p>13年前，我看着同学花9000多块钱买的笔记本电脑，心里在换算，这要卖多少袋稻谷，多少斤花生，多少亩油菜才能买到啊；</p><p>13年后，我可以在苹果专卖店选购最新款的笔记本电脑和手机；</p><p>13年前，我孑然一身，身无长物，揣着东拼西凑的学费到省城上大学；</p><p>13年后，我住在宽敞明亮的房子里，拥有一份从前不敢奢想的工作；</p><p>13年前，我从牙缝里省出钱来买心爱的书籍；</p><p>13年后，我有一间可容纳1000多本书的书房，基本实现了买书自由；</p><p>……</p><p><strong>我们无法选择自己的出身，却可以用自己的努力决定下一代的起点。</strong></p><p><strong>这，也许就是我们每个人奋斗一生的意义。</strong></p><p>我之所以把这篇文章放在这里，是为了告诫我自己。很喜欢一句话，出自莫言先生：”当你的才华还撑不起你的野心的时候，你就应该静下心来学习；当你的能力还驾驭不了你的目标时，就应该沉下心来，历练；梦想，不是浮躁，而是沉淀和积累，只有拼出来的美丽，没有等出来的辉煌，机会永远是留给最渴望的那个人。”学会与内心深处的你对话，问问自己，想要怎样的人生，静心学习，耐心沉淀，送给自己，共勉。</p><div class="note success flat"><p>原文连接：<a href="https://www.sohu.com/a/235563055_99925770">https://www.sohu.com/a/235563055_99925770</a></p></div>]]></content>
      
      
      <categories>
          
          <category> 开篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一次 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
